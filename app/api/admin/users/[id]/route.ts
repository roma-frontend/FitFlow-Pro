// app/api/admin/users/[id]/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø JWT
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import { getSession, debugSessionAccess } from '@/lib/simple-auth';
import { z } from 'zod';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const updateUserSchema = z.object({
  name: z.string().min(1, '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ').max(100, '–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ').optional(),
  email: z.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email').optional(),
  role: z.enum(['user', 'admin', 'manager', 'super-admin', 'trainer', 'client', 'member']).optional(),
  isActive: z.boolean().optional(),
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ null –¥–ª—è photoUrl
  photoUrl: z.union([
    z.string().url('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ñ–æ—Ç–æ'),
    z.string().length(0),
    z.null(),
    z.undefined()
  ]).optional(),
  password: z.string().min(6, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤').optional(),
}).refine(data => Object.keys(data).length > 0, {
  message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
});

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface AuditLogData {
  action: string;
  entityType: string;
  entityId: string;
  performedBy: string;
  ip?: string;
  userAgent?: string;
  sessionId?: string;
  oldValues?: any;
  newValues?: any;
  changedFields?: string[];
  metadata?: any;
  severity?: 'low' | 'medium' | 'high' | 'critical';
  success?: boolean;
  errorMessage?: string;
}

// –£—Ç–∏–ª–∏—Ç—ã –∞—É–¥–∏—Ç–∞
async function logAuditEvent(data: AuditLogData) {
  try {
    const auditLogId = await convex.mutation("auditLogs:createAuditLog", data);
    console.log('‚úÖ Audit log created:', auditLogId);
    return auditLogId;
  } catch (error) {
    console.error('‚ùå Failed to create audit log:', error);
  }
}

function getChangedFields(oldValues: any, newValues: any): string[] {
  const changedFields: string[] = [];
  Object.keys(newValues).forEach(key => {
    if (oldValues[key] !== newValues[key]) {
      changedFields.push(key);
    }
  });
  return changedFields;
}

function determineSeverity(action: string, changedFields: string[]): 'low' | 'medium' | 'high' | 'critical' {
  if (action.includes('delete')) return 'critical';
  if (action.includes('role') || changedFields.includes('role')) return 'high';
  if (action.includes('password') || changedFields.includes('password')) return 'high';
  if (action.includes('email') || changedFields.includes('email')) return 'medium';
  return 'low';
}

function getClientIP(request: NextRequest): string {
  const forwarded = request.headers.get('x-forwarded-for');
  if (forwarded) {
    return forwarded.split(',')[0].trim();
  }
  
  const realIp = request.headers.get('x-real-ip');
  if (realIp) {
    return realIp.trim();
  }
  
  return 'unknown';
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è JWT
async function checkAuthorization(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
  const sessionId = request.cookies.get('session_id')?.value;
  const authToken = request.cookies.get('auth_token')?.value;
  const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–∫–µ–Ω
  const sessionToken = sessionId || authToken || sessionIdDebug;
  
  console.log('üîç checkAuthorization: –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...', {
    hasSessionId: !!sessionId,
    hasAuthToken: !!authToken,
    hasSessionIdDebug: !!sessionIdDebug,
    tokenPreview: sessionToken?.substring(0, 20) + '...' || 'none'
  });
  
  if (!sessionToken) {
    console.log('‚ùå checkAuthorization: JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return { 
      error: NextResponse.json({ 
        success: false, 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
      }, { status: 401 }),
      sessionData: null
    };
  }

  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è getSession
    const sessionData = await getSession(sessionToken);
    
    if (!sessionData) {
      console.log('‚ùå checkAuthorization: JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤ development
      if (process.env.NODE_ENV === 'development') {
        await debugSessionAccess(sessionToken);
      }
      
      return { 
        error: NextResponse.json({ 
          success: false, 
          error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' 
        }, { status: 401 }),
        sessionData: null
      };
    }
    
    console.log('‚úÖ checkAuthorization: JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: sessionData.user.id,
      email: sessionData.user.email,
      role: sessionData.user.role
    });

    return { error: null, sessionData };
    
  } catch (error) {
    console.error('üí• checkAuthorization: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT:', error);
    
    return { 
      error: NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        details: process.env.NODE_ENV === 'development' ? error : undefined
      }, { status: 500 }),
      sessionData: null
    };
  }
}

function checkPermissions(userRole: string, requiredRoles: string[]) {
  return requiredRoles.includes(userRole);
}

// ==================== PUT - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log('üéØ PUT /api/admin/users/[id] - –ù–ê–ß–ê–õ–û –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  
  const { id } = await params;
  let sessionToken: string | undefined;
  let sessionData: any = null;
  
  try {
    console.log('üìç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', id);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!id || typeof id !== 'string' || id.trim() === '') {
      await logAuditEvent({
        action: 'user.update.failed',
        entityType: 'user',
        entityId: id || 'unknown',
        performedBy: 'unknown',
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'PUT',
          reason: 'Invalid user ID',
        },
        severity: 'medium',
        success: false,
        errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      });

      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const sessionId = request.cookies.get('session_id')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    sessionToken = sessionId || authToken || sessionIdDebug;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å JWT
    const { error: authError, sessionData: authSessionData } = await checkAuthorization(request);
    sessionData = authSessionData;
    
    if (authError) {
      await logAuditEvent({
        action: 'user.update.unauthorized',
        entityType: 'user',
        entityId: id,
        performedBy: 'unknown',
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'PUT',
          reason: 'JWT token invalid or expired',
        },
        severity: 'high',
        success: false,
        errorMessage: 'JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
      });
      return authError;
    }

    console.log('‚úÖ PUT: JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      userId: sessionData!.user.id,
      name: sessionData!.user.name,
      role: sessionData!.user.role
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!checkPermissions(sessionData!.user.role, ['super-admin', 'admin', 'manager'])) {
      console.log('‚ùå PUT: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —Ä–æ–ª—å:', sessionData!.user.role);
      
      await logAuditEvent({
        action: 'user.update.forbidden',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'PUT',
          userRole: sessionData!.user.role,
          reason: 'Insufficient permissions',
        },
        severity: 'high',
        success: false,
        errorMessage: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ä–æ–ª—å: ${sessionData!.user.role})`,
      });

      return NextResponse.json({ 
        success: false, 
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ä–æ–ª—å: ${sessionData!.user.role})` 
      }, { status: 403 });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    let body;
    try {
      body = await request.json();
    } catch (parseError) {
      console.log('‚ùå PUT: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      
      await logAuditEvent({
        action: 'user.update.failed',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'PUT',
          reason: 'JSON parsing error',
          error: parseError instanceof Error ? parseError.message : 'Unknown parsing error',
        },
        severity: 'medium',
        success: false,
        errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON',
      });

      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Zod
    const validationResult = updateUserSchema.safeParse(body);
    
    if (!validationResult.success) {
      console.log('‚ùå PUT: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validationResult.error.errors);
      
      await logAuditEvent({
        action: 'user.update.validation_failed',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'PUT',
          validationErrors: validationResult.error.errors,
          submittedData: body,
        },
        severity: 'medium',
        success: false,
        errorMessage: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      });

      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validationResult.error.errors.map(err => ({
          field: err.path.join('.'),
          message: err.message
        }))
      }, { status: 400 });
    }

    const validatedData = validationResult.data;
    console.log('üìù PUT: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', validatedData);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
    console.log('üîç PUT: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex...');
    const currentUser = await convex.query("users:getUserById", { 
      userId: id as any 
    });

    if (!currentUser) {
      console.log('‚ùå PUT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Convex');
      
      await logAuditEvent({
        action: 'user.update.not_found',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'PUT',
          reason: 'User not found in database',
        },
        severity: 'medium',
        success: false,
        errorMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });

      return NextResponse.json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    console.log('üë§ PUT: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      id: currentUser._id,
      name: currentUser.name,
      role: currentUser.role,
      email: currentUser.email
    });

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
    const businessLogicChecks = [
      {
        condition: validatedData.role && validatedData.role !== currentUser.role,
        checks: [
          {
            condition: currentUser.role === 'super-admin',
            error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞'
          },
          {
            condition: validatedData.role === 'admin' && sessionData!.user.role !== 'super-admin',
            error: '–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤'
          },
          {
            condition: validatedData.role === 'super-admin',
            error: '–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞'
          }
        ]
      },
      {
        condition: id === sessionData!.user.id && validatedData.isActive === false,
        checks: [
          {
            condition: true,
            error: '–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'
          }
        ]
      }
    ];

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    for (const check of businessLogicChecks) {
      if (check.condition) {
        for (const subCheck of check.checks || []) {
          if (subCheck.condition) {
            console.log('‚ùå PUT: –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞:', subCheck.error);
            
            await logAuditEvent({
              action: 'user.update.business_rule_violation',
              entityType: 'user',
              entityId: id,
              performedBy: sessionData!.user.id,
              ip: getClientIP(request),
              userAgent: request.headers.get('user-agent') || 'unknown',
              sessionId: sessionToken || 'unknown',
              metadata: {
                endpoint: '/api/admin/users/[id]',
                method: 'PUT',
                businessRule: subCheck.error,
                attemptedChanges: validatedData,
                currentUserData: {
                  role: currentUser.role,
                  isActive: currentUser.isActive,
                },
              },
              severity: 'high',
              success: false,
              errorMessage: subCheck.error,
            });

            return NextResponse.json({
              success: false,
              error: subCheck.error
            }, { status: 403 });
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
    if (validatedData.email && validatedData.email !== currentUser.email) {
      console.log('üîç PUT: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email...');
      const emailExists = await convex.query("users:checkEmailExists", {
        email: validatedData.email,
        excludeUserId: id as any
      });
      
      if (emailExists) {
        console.log('‚ùå PUT: Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
        
        await logAuditEvent({
          action: 'user.update.email_conflict',
          entityType: 'user',
          entityId: id,
          performedBy: sessionData!.user.id,
          ip: getClientIP(request),
          userAgent: request.headers.get('user-agent') || 'unknown',
          sessionId: sessionToken || 'unknown',
          metadata: {
            endpoint: '/api/admin/users/[id]',
            method: 'PUT',
            conflictingEmail: validatedData.email,
            reason: 'Email already in use',
          },
          severity: 'medium',
          success: false,
          errorMessage: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
        });

        return NextResponse.json({
          success: false,
          error: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        }, { status: 409 });
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updates: any = {};
    Object.entries(validatedData).forEach(([key, value]) => {
      if (value !== undefined) {
        if (key === 'password' && typeof value === 'string' && value.trim()) {
          updates[key] = value;
        } else if (key !== 'password') {
          updates[key] = value;
        }
      }
    });

    const changedFields = getChangedFields(currentUser, updates);
    const severity = determineSeverity('user.update', changedFields);
    
    const oldValues = {
      name: currentUser.name,
      email: currentUser.email,
      role: currentUser.role,
      isActive: currentUser.isActive,
      photoUrl: currentUser.photoUrl,
    };

    console.log('üìù PUT: –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updates);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Convex
    console.log('üíæ PUT: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Convex...');
    const updatedUser = await convex.mutation("users:updateUser", {
      userId: id as any,
      updates
    });

    console.log('‚úÖ PUT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Convex');

    // –£—Å–ø–µ—à–Ω—ã–π –∞—É–¥–∏—Ç
    await logAuditEvent({
      action: 'user.update',
      entityType: 'user',
      entityId: id,
      performedBy: sessionData!.user.id,
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || 'unknown',
      sessionId: sessionToken || 'unknown',
      oldValues,
      newValues: updates,
      changedFields,
      metadata: {
        endpoint: '/api/admin/users/[id]',
        method: 'PUT',
        timestamp: new Date().toISOString(),
        updatedBy: {
          id: sessionData!.user.id,
          name: sessionData!.user.name,
          role: sessionData!.user.role,
        },
        targetUser: {
          id: currentUser._id,
          name: currentUser.name,
          email: currentUser.email,
        },
      },
      severity,
      success: true,
    });

    console.log('‚úÖ PUT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤ –∞—É–¥–∏—Ç');

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: updatedUser
    });

  } catch (error) {
    console.error('‚ùå PUT: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞:', error);
    console.error('‚ùå PUT: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');

    // –ê—É–¥–∏—Ç –æ—à–∏–±–∫–∏
    await logAuditEvent({
      action: 'user.update.error',
      entityType: 'user',
      entityId: id,
      performedBy: sessionData?.user?.id || 'unknown',
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || 'unknown',
      sessionId: sessionToken || 'unknown',
      metadata: {
        endpoint: '/api/admin/users/[id]',
        method: 'PUT',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString(),
      },
      severity: 'critical',
      success: false,
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
    });
    
    return NextResponse.json({
      success: false,
      error: process.env.NODE_ENV === 'development' 
        ? (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// ==================== GET - –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  let sessionToken: string | undefined;
  let sessionData: any = null;
  
  try {
    console.log('üîç GET /api/admin/users/[id] - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!id || typeof id !== 'string' || id.trim() === '') {
      await logAuditEvent({
        action: 'user.read.failed',
        entityType: 'user',
        entityId: id || 'unknown',
        performedBy: 'unknown',
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'GET',
          reason: 'Invalid user ID',
        },
        severity: 'low',
        success: false,
        errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      });

      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const sessionId = request.cookies.get('session_id')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    sessionToken = sessionId || authToken || sessionIdDebug;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å JWT
    const { error: authError, sessionData: authSessionData } = await checkAuthorization(request);
    sessionData = authSessionData;
    
    if (authError) {
      await logAuditEvent({
        action: 'user.read.unauthorized',
        entityType: 'user',
        entityId: id,
        performedBy: 'unknown',
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'GET',
          reason: 'JWT token invalid or expired',
        },
        severity: 'medium',
        success: false,
        errorMessage: 'JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
      });
      return authError;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!checkPermissions(sessionData!.user.role, ['super-admin', 'admin', 'manager'])) {
      await logAuditEvent({
        action: 'user.read.forbidden',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'GET',
          userRole: sessionData!.user.role,
          reason: 'Insufficient permissions',
        },
        severity: 'medium',
        success: false,
        errorMessage: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
      });

      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' 
      }, { status: 403 });
    }

    const user = await convex.query("users:getUserById", { 
      userId: id as any 
    });

    if (!user) {
      await logAuditEvent({
        action: 'user.read.not_found',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'GET',
          reason: 'User not found in database',
        },
        severity: 'low',
        success: false,
        errorMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });

      return NextResponse.json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    console.log('‚úÖ GET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.name);

    // –£—Å–ø–µ—à–Ω—ã–π –∞—É–¥–∏—Ç —á—Ç–µ–Ω–∏—è
    await logAuditEvent({
      action: 'user.read',
      entityType: 'user',
      entityId: id,
      performedBy: sessionData!.user.id,
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || 'unknown',
      sessionId: sessionToken || 'unknown',
      metadata: {
        endpoint: '/api/admin/users/[id]',
        method: 'GET',
        timestamp: new Date().toISOString(),
        accessedBy: {
          id: sessionData!.user.id,
          name: sessionData!.user.name,
          role: sessionData!.user.role,
        },
        accessedUser: {
          id: user._id,
          name: user.name,
          email: user.email,
          role: user.role,
        },
      },
      severity: 'low',
      success: true,
    });

    // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const { password, ...safeUser } = user;

    return NextResponse.json({
      success: true,
      user: safeUser
    });

  } catch (error) {
    console.error('‚ùå GET: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    await logAuditEvent({
      action: 'user.read.error',
      entityType: 'user',
      entityId: id,
      performedBy: sessionData?.user?.id || 'unknown',
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || 'unknown',
      sessionId: sessionToken || 'unknown',
      metadata: {
        endpoint: '/api/admin/users/[id]',
        method: 'GET',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
      },
      severity: 'high',
      success: false,
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
    });

    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    }, { status: 500 });
  }
}

// ==================== DELETE - –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  let sessionToken: string | undefined;
  let sessionData: any = null;
  
  try {
    console.log('üóëÔ∏è DELETE /api/admin/users/[id] - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!id || typeof id !== 'string' || id.trim() === '') {
      await logAuditEvent({
        action: 'user.delete.failed',
        entityType: 'user',
        entityId: id || 'unknown',
        performedBy: 'unknown',
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'DELETE',
          reason: 'Invalid user ID',
        },
        severity: 'medium',
        success: false,
        errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      });

      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const sessionId = request.cookies.get('session_id')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    sessionToken = sessionId || authToken || sessionIdDebug;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å JWT
    const { error: authError, sessionData: authSessionData } = await checkAuthorization(request);
    sessionData = authSessionData;
    
    if (authError) {
      await logAuditEvent({
        action: 'user.delete.unauthorized',
        entityType: 'user',
        entityId: id,
        performedBy: 'unknown',
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'DELETE',
          reason: 'JWT token invalid or expired',
        },
        severity: 'high',
        success: false,
        errorMessage: 'JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
      });
      return authError;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å)
    if (!checkPermissions(sessionData!.user.role, ['super-admin', 'admin'])) {
      await logAuditEvent({
        action: 'user.delete.forbidden',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'DELETE',
          userRole: sessionData!.user.role,
          reason: 'Insufficient permissions for deletion',
        },
        severity: 'high',
        success: false,
        errorMessage: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
      });

      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' 
      }, { status: 403 });
    }

    const user = await convex.query("users:getUserById", { 
      userId: id as any 
    });

    if (!user) {
      await logAuditEvent({
        action: 'user.delete.not_found',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'DELETE',
          reason: 'User not found in database',
        },
        severity: 'medium',
        success: false,
        errorMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });

      return NextResponse.json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if (user.role === 'super-admin') {
      await logAuditEvent({
        action: 'user.delete.super_admin_protection',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'DELETE',
          reason: 'Attempted to delete super-admin',
          targetUser: {
            name: user.name,
            email: user.email,
            role: user.role,
          },
        },
        severity: 'critical',
        success: false,
        errorMessage: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞',
      });

      return NextResponse.json({ 
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞' 
      }, { status: 403 });
    }

    if (id === sessionData!.user.id) {
      await logAuditEvent({
        action: 'user.delete.self_deletion_attempt',
        entityType: 'user',
        entityId: id,
        performedBy: sessionData!.user.id,
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || 'unknown',
        sessionId: sessionToken || 'unknown',
        metadata: {
          endpoint: '/api/admin/users/[id]',
          method: 'DELETE',
          reason: 'Attempted self-deletion',
        },
        severity: 'high',
        success: false,
        errorMessage: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è',
      });

      return NextResponse.json({ 
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' 
      }, { status: 403 });
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await convex.mutation("users:deleteUser", {
      id: id as any
    });

    console.log('‚úÖ DELETE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω:', user.name);

    // –£—Å–ø–µ—à–Ω—ã–π –∞—É–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏—è
    await logAuditEvent({
      action: 'user.delete',
      entityType: 'user',
      entityId: id,
      performedBy: sessionData!.user.id,
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || 'unknown',
      sessionId: sessionToken || 'unknown',
      oldValues: {
        name: user.name,
        email: user.email,
        role: user.role,
        isActive: user.isActive,
        photoUrl: user.photoUrl,
      },
      metadata: {
        endpoint: '/api/admin/users/[id]',
        method: 'DELETE',
        timestamp: new Date().toISOString(),
        deletedBy: {
          id: sessionData!.user.id,
          name: sessionData!.user.name,
          role: sessionData!.user.role,
        },
        deletedUser: {
          id: user._id,
          name: user.name,
          email: user.email,
          role: user.role,
          isActive: user.isActive,
        },
      },
      severity: 'critical',
      success: true,
    });

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå DELETE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    // –ê—É–¥–∏—Ç –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    await logAuditEvent({
      action: 'user.delete.error',
      entityType: 'user',
      entityId: id,
      performedBy: sessionData?.user?.id || 'unknown',
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || 'unknown',
      sessionId: sessionToken || 'unknown',
      metadata: {
        endpoint: '/api/admin/users/[id]',
        method: 'DELETE',
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString(),
      },
      severity: 'critical',
      success: false,
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
    });

    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    }, { status: 500 });
  }
}