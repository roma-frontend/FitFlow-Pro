// app/api/face-id/disable/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import jwt from 'jsonwebtoken';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log('üîí Face ID Disable: –æ—Ç–∫–ª—é—á–∞–µ–º Face ID...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = request.cookies.get('auth_token')?.value;
    
    if (!token || !process.env.JWT_SECRET) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    console.log('üë§ –û—Ç–∫–ª—é—á–∞–µ–º Face ID –¥–ª—è:', decoded.email);

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π Face ID –ø—Ä–æ—Ñ–∏–ª—å
    const faceProfile = await convex.query("faceProfiles:getByUserId", { 
      userId: decoded.userId 
    });

    if (!faceProfile || !faceProfile.isActive) {
      return NextResponse.json({
        success: false,
        message: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω'
      }, { status: 404 });
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await convex.mutation("faceProfiles:deactivate", {
      profileId: faceProfile._id
    });

    console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫–ª—é—á–µ–Ω:', faceProfile._id);

    return NextResponse.json({
      success: true,
      message: 'Face ID —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå Face ID Disable: –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Face ID'
    }, { status: 500 });
  }
}
