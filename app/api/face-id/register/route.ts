// app/api/face-id/register/route.ts
import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';

export async function POST(request: NextRequest) {
  try {
    console.log('üìù Face ID Register: –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID...');

    const body = await request.json();
    const { descriptor, confidence, metadata } = body;

    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      hasDescriptor: !!descriptor,
      descriptorLength: descriptor?.length,
      confidence
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!descriptor || descriptor.length === 0) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      }, { status: 400 });
    }

    if (confidence < 75) {
      return NextResponse.json({
        success: false,
        message: '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 75%)'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = request.cookies.get('auth_token')?.value;
    
    if (!token || !process.env.JWT_SECRET) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Face ID –¥–ª—è:', decoded.email);

    // ‚úÖ –î–ï–ú–û –í–ï–†–°–ò–Ø - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
    const fakeProfileId = `face_profile_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω (–¥–µ–º–æ):', fakeProfileId);

    // ‚úÖ –°–û–ó–î–ê–ï–ú –¢–û–ö–ï–ù –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø FACE ID –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
    const faceIdTokenPayload = {
      userId: decoded.userId,
      email: decoded.email,
      name: decoded.name,
      role: decoded.role,
      profileId: fakeProfileId,
      registeredAt: Date.now()
    };

    const faceIdToken = jwt.sign(faceIdTokenPayload, process.env.JWT_SECRET!, {
      expiresIn: '30d' // Face ID —Ç–æ–∫–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π
    });

    console.log('üîê Face ID —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è:', decoded.name);

    // –°–æ–∑–¥–∞–µ–º response
    const response = NextResponse.json({
      success: true,
      message: 'Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
      profileId: fakeProfileId,
      confidence: confidence,
      userId: decoded.userId
    });

    // ‚úÖ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú COOKIE –î–õ–Ø FACE ID –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
    const faceIdCookieOptions = [
      `face_id_registered=${faceIdToken}`,
      'HttpOnly',
      'Path=/',
      `Max-Age=${30 * 24 * 60 * 60}`, // 30 –¥–Ω–µ–π
      'SameSite=Lax'
    ];

    if (process.env.NODE_ENV === 'production') {
      faceIdCookieOptions.push('Secure');
    }

    response.headers.set('Set-Cookie', faceIdCookieOptions.join('; '));

    console.log('‚úÖ Face ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞');

    return response;

  } catch (error) {
    console.error('‚ùå Face ID Register: –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID',
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
