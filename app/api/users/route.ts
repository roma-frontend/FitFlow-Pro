// app/api/users/route.ts - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import { withUserManagement, withUserCreation, type AuthenticatedRequest } from '@/lib/api-middleware';
import { canManageRole, validateUserCreationData } from '@/lib/permissions';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Convex –∫–ª–∏–µ–Ω—Ç–∞
let convex: ConvexHttpClient;
try {
  if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
    throw new Error('NEXT_PUBLIC_CONVEX_URL is not defined');
  }
  convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Convex:', error);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ error response
function createErrorResponse(message: string, status: number = 500, details?: any) {
  console.error(`‚ùå API Error (${status}):`, message, details);
  
  return NextResponse.json({
    success: false,
    error: message,
    timestamp: new Date().toISOString(),
    ...(process.env.NODE_ENV === 'development' && details && { details })
  }, { status });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
function isValidUrl(url: string | undefined | null): boolean {
  if (!url || url.trim() === '') {
    return true; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
  }

  const trimmedUrl = url.trim();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL
    const urlObj = new URL(trimmedUrl);
    return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
  } catch {
    // –ï—Å–ª–∏ –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ data URLs
    return trimmedUrl.startsWith('/') || 
           trimmedUrl.startsWith('./') || 
           trimmedUrl.startsWith('../') ||
           trimmedUrl.startsWith('data:image/');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Cloudinary
async function deleteCloudinaryImage(imageUrl: string): Promise<boolean> {
  try {
    if (!imageUrl || !imageUrl.includes('cloudinary.com')) {
      return true; // –ù–µ Cloudinary URL, —Å—á–∏—Ç–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
    }

    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Cloudinary:', imageUrl);

    const response = await fetch('/api/upload/delete', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ url: imageUrl })
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Cloudinary:', result);
      return result.success;
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Cloudinary:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function validateUserData(data: any): { isValid: boolean; errors: Array<{ field: string; message: string }> } {
  const errors: Array<{ field: string; message: string }> = [];

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  if (data.name !== undefined) {
    if (!data.name || typeof data.name !== 'string' || data.name.trim().length < 2) {
      errors.push({ field: 'name', message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  if (data.email !== undefined) {
    if (!data.email || typeof data.email !== 'string') {
      errors.push({ field: 'email', message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    } else {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(data.email)) {
        errors.push({ field: 'email', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
      }
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (data.phone !== undefined && data.phone !== null && data.phone.trim() !== '') {
    const phoneRegex = /^\+?[\d\s\-()]{10,}$/;
    if (!phoneRegex.test(data.phone)) {
      errors.push({ field: 'phone', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Ñ–æ—Ç–æ
  if (data.photoUrl !== undefined && !isValidUrl(data.photoUrl)) {
    errors.push({ field: 'photoUrl', message: '–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ñ–æ—Ç–æ' });
  }

  if (data.avatar !== undefined && !isValidUrl(data.avatar)) {
    errors.push({ field: 'avatar', message: '–ù–µ–≤–µ—Ä–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞' });
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
  if (data.type === 'trainer') {
    if (data.experience !== undefined && (typeof data.experience !== 'number' || data.experience < 0)) {
      errors.push({ field: 'experience', message: '–û–ø—ã—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' });
    }

    if (data.hourlyRate !== undefined && (typeof data.hourlyRate !== 'number' || data.hourlyRate < 0)) {
      errors.push({ field: 'hourlyRate', message: '–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  if (data.type === 'client') {
    if (data.membershipType && !['basic', 'premium', 'vip'].includes(data.membershipType)) {
      errors.push({ field: 'membershipType', message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞' });
    }
  }

  return {
    isValid: errors.length === 0,
    errors
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function sanitizeUserData(data: any): any {
  const sanitized = { ...data };

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
  ['name', 'email', 'phone', 'bio', 'notes', 'emergencyContact', 'medicalInfo'].forEach(field => {
    if (sanitized[field] && typeof sanitized[field] === 'string') {
      sanitized[field] = sanitized[field].trim();
    }
  });

  // –û—á–∏—Å—Ç–∫–∞ URL –ø–æ–ª–µ–π
  ['photoUrl', 'avatar'].forEach(field => {
    if (sanitized[field]) {
      sanitized[field] = sanitized[field].trim();
      if (sanitized[field] === '') {
        sanitized[field] = null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º null –≤–º–µ—Å—Ç–æ undefined –¥–ª—è —è–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
  });

  // –û—á–∏—Å—Ç–∫–∞ email
  if (sanitized.email) {
    sanitized.email = sanitized.email.toLowerCase();
  }

  // –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
  ['specialization', 'certifications', 'goals'].forEach(field => {
    if (Array.isArray(sanitized[field])) {
      sanitized[field] = sanitized[field]
        .filter((item: any) => typeof item === 'string' && item.trim())
        .map((item: string) => item.trim());
    }
  });

  return sanitized;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
function normalizeUser(user: any, type: 'trainer' | 'client' | 'user') {
  const baseUser = {
    id: user._id || user.id,
    name: user.name || user.email || 'Unknown User',
    email: user.email || 'unknown@example.com',
    phone: user.phone || '',
    status: user.status || (user.isActive !== false ? 'active' : 'inactive'),
    createdAt: user.createdAt ? new Date(user.createdAt).toISOString() : new Date().toISOString(),
    updatedAt: user.updatedAt ? new Date(user.updatedAt).toISOString() : new Date().toISOString(),
    type
  };

  if (type === 'trainer') {
    return {
      ...baseUser,
      role: user.role || 'trainer',
      specialization: user.specialization || [],
      experience: user.experience || 0,
      rating: user.rating || 0,
      activeClients: user.activeClients || 0,
      totalSessions: user.totalSessions || 0,
      hourlyRate: user.hourlyRate || 1500,
      certifications: user.certifications || [],
      workingHours: user.workingHours || {},
      bio: user.bio || '',
      avatar: user.avatar || user.photoUrl || user.photoUri || '',
      createdBy: user.createdBy
    };
  } else if (type === 'client') {
    return {
      ...baseUser,
      trainerId: user.trainerId,
      membershipType: user.membershipType || 'basic',
      joinDate: user.joinDate || baseUser.createdAt.split('T')[0],
      totalSessions: user.totalSessions || 0,
      notes: user.notes || '',
      emergencyContact: user.emergencyContact || '',
      medicalInfo: user.medicalInfo || '',
      goals: user.goals || [],
      createdBy: user.createdBy
    };
  } else {
    return {
      ...baseUser,
      role: user.role || 'user',
      isVerified: user.isVerified || false,
      lastLogin: user.lastLogin ? new Date(user.lastLogin).toISOString() : null,
      photoUrl: user.photoUrl || user.avatar || ''
    };
  }
}

// PUT /api/users - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withUserManagement(async (req: AuthenticatedRequest) => {
    try {
      console.log('üìù API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex');
      
      if (!convex) {
        return createErrorResponse('Convex client not initialized', 500);
      }

      const body = await req.json();
      const { user } = req;
      const { id, type, ...updateData } = body;

      if (!id || !type) {
        return createErrorResponse('ID –∏ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
      }

      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', { id, type, updateData });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let currentUser: any;
      try {
        if (type === 'trainer') {
          currentUser = await convex.query("users:getTrainerById", { id });
        } else if (type === 'client') {
          currentUser = await convex.query("users:getClientById", { id });
        } else {
          currentUser = await convex.query("users:getUserById", { id });
        }

        if (!currentUser) {
          return createErrorResponse(`${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 404);
        }
      } catch (fetchError) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', fetchError);
        return createErrorResponse(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ${type}`, 500, fetchError);
      }

      // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const sanitizedData = sanitizeUserData(updateData);
      console.log('üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', sanitizedData);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const validation = validateUserData({ ...sanitizedData, type });
      if (!validation.isValid) {
        console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation.errors);
        return createErrorResponse('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 400, validation.errors);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (user.role === 'trainer') {
        if (type === 'trainer' && currentUser.id !== user.id) {
          return createErrorResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞', 403);
        }
        if (type === 'client' && currentUser.trainerId !== user.id) {
          return createErrorResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', 403);
        }
        if (type === 'user' && currentUser.id !== user.id) {
          return createErrorResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 403);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
      if (sanitizedData.role && sanitizedData.role !== currentUser.role) {
        if (!canManageRole(user.role, sanitizedData.role)) {
          return createErrorResponse(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ ${sanitizedData.role}`, 403);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
      if (sanitizedData.email && sanitizedData.email !== currentUser.email) {
        try {
          const existingUser = await convex.query("users:getUserByEmail", { 
            email: sanitizedData.email 
          });
          if (existingUser && existingUser._id !== id) {
            return createErrorResponse('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 409);
          }
        } catch (emailCheckError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', emailCheckError);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–º–µ–Ω–µ
      const oldImageUrls: string[] = [];
      const imageFields = type === 'user' ? ['photoUrl'] : ['avatar'];
      
      for (const field of imageFields) {
        const currentUrl = currentUser[field];
        const newUrl = sanitizedData[field];
        
        // –ï—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Å—Ç–∞—Ä—ã–π URL –±—ã–ª –∏–∑ Cloudinary
        if (currentUrl && currentUrl !== newUrl && currentUrl.includes('cloudinary.com')) {
          oldImageUrls.push(currentUrl);
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const normalizedUpdateData = {
        ...sanitizedData,
        updatedAt: Date.now(),
        updatedBy: user.id
      };

      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (type === 'client' && sanitizedData.trainerId && sanitizedData.trainerId !== currentUser.trainerId) {
        try {
          const trainer = await convex.query("users:getTrainerById", { id: sanitizedData.trainerId });
          if (!trainer || trainer.status !== 'active') {
            return createErrorResponse('–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω', 400);
          }
          if (user.role === 'trainer' && trainer.id !== user.id) {
            return createErrorResponse('–ú–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–Ω–µ—Ä–∞', 403);
          }
        } catch (trainerCheckError) {
          console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:', trainerCheckError);
          return createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞', 400);
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      let updatedUser: any;
      try {
        if (type === 'trainer') {
          await convex.mutation("users:updateTrainer", { 
            id, 
            updates: normalizedUpdateData 
          });
          updatedUser = await convex.query("users:getTrainerById", { id });
        } else if (type === 'client') {
          await convex.mutation("users:updateClient", { 
            id, 
            updates: normalizedUpdateData 
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤
          const oldTrainerId = currentUser.trainerId;
          const newTrainerId = normalizedUpdateData.trainerId;
          const oldStatus = currentUser.status;
          const newStatus = normalizedUpdateData.status || oldStatus;

          if (oldTrainerId !== newTrainerId || oldStatus !== newStatus) {
            try {
              if (oldTrainerId && oldStatus === 'active') {
                await convex.mutation("users:decrementTrainerClients", { 
                  trainerId: oldTrainerId 
                });
              }
              if (newTrainerId && newStatus === 'active') {
                await convex.mutation("users:incrementTrainerClients", { 
                  trainerId: newTrainerId 
                });
              }
            } catch (counterError) {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤:', counterError);
            }
          }
          
          updatedUser = await convex.query("users:getClientById", { id });
        } else {
          await convex.mutation("users:updateUser", { 
            id, 
            updates: normalizedUpdateData 
          });
          updatedUser = await convex.query("users:getUserById", { id });
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        if (oldImageUrls.length > 0) {
          console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', oldImageUrls);
          oldImageUrls.forEach(async (url) => {
            try {
              await deleteCloudinaryImage(url);
            } catch (deleteError) {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', url, deleteError);
            }
          });
        }

      } catch (updateError) {
        console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Convex:', updateError);
        return createErrorResponse('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 500, updateError);
      }

      console.log(`‚úÖ API: ${type} –æ–±–Ω–æ–≤–ª–µ–Ω - ${updatedUser.name}`);

      const responseData = normalizeUser(updatedUser, type as any);

      return NextResponse.json({
        success: true,
        data: responseData,
        message: `${type === 'trainer' ? '–¢—Ä–µ–Ω–µ—Ä' : type === 'client' ? '–ö–ª–∏–µ–Ω—Ç' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return createErrorResponse('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 500, error);
    }
  });

  return handler(req, { params: {} });
};

// DELETE /api/users - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withUserManagement(async (req: AuthenticatedRequest) => {
    try {
      console.log('üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex');
      
      if (!convex) {
        return createErrorResponse('Convex client not initialized', 500);
      }

      const { user } = req;
      const url = new URL(req.url);
      const id = url.searchParams.get('id');
      const type = url.searchParams.get('type');
      const force = url.searchParams.get('force') === 'true';

      if (!id || !type) {
        return createErrorResponse('ID –∏ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let currentUser: any;
      try {
        if (type === 'trainer') {
          currentUser = await convex.query("users:getTrainerById", { id });
        } else if (type === 'client') {
          currentUser = await convex.query("users:getClientById", { id });
        } else {
          currentUser = await convex.query("users:getUserById", { id });
        }

        if (!currentUser) {
          return createErrorResponse(`${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 404);
        }
      } catch (fetchError) {
        return createErrorResponse(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ${type}`, 500, fetchError);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
      if (currentUser.id === user.id || currentUser._id === user.id) {
        return createErrorResponse('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è', 400);
      }

      // –°–æ–±–∏—Ä–∞–µ–º URLs –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const imageUrls: string[] = [];
      if (type === 'trainer' && currentUser.avatar) {
        imageUrls.push(currentUser.avatar);
      } else if (type === 'user' && currentUser.photoUrl) {
        imageUrls.push(currentUser.photoUrl);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (user.role === 'trainer') {
        if (type === 'trainer') {
          return createErrorResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞', 403);
        }
        if (type === 'client' && currentUser.trainerId !== user.id) {
          return createErrorResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', 403);
        }
        if (type === 'user') {
          return createErrorResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 403);
        }
      }

      try {
        if (type === 'trainer') {
          if (!force && currentUser.activeClients > 0) {
            return createErrorResponse(
              '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä force=true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è',
              400,
              { activeClients: currentUser.activeClients }
            );
          }

          if (force) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            const trainerClients = await convex.query("users:getClientsByTrainer", { 
              trainerId: currentUser._id || currentUser.id 
            });

            for (const client of trainerClients) {
              await convex.mutation("users:updateClient", {
                id: client._id || client.id,
                updates: {
                  trainerId: undefined,
                  updatedAt: Date.now(),
                  updatedBy: user.id
                }
              });
            }

            await convex.mutation("users:deleteTrainer", { id });

            console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω - ${currentUser.name}, –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${trainerClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);

            // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary
            if (imageUrls.length > 0) {
              imageUrls.forEach(async (url) => {
                try {
                  await deleteCloudinaryImage(url);
                } catch (deleteError) {
                  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', url, deleteError);
                }
              });
            }

            return NextResponse.json({
              success: true,
              message: '–¢—Ä–µ–Ω–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω',
              details: { reassignedClients: trainerClients.length }
            });
          } else {
            // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
            await convex.mutation("users:updateTrainer", {
              id,
              updates: {
                status: 'inactive',
                updatedAt: Date.now(),
                updatedBy: user.id
              }
            });

            console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - ${currentUser.name}`);

            return NextResponse.json({
              success: true,
              message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
            });
          }

        } else if (type === 'client') {
          if (force) {
            // –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            await convex.mutation("users:deleteClient", { id });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É —Ç—Ä–µ–Ω–µ—Ä–∞
            if (currentUser.trainerId && currentUser.status === 'active') {
              try {
                await convex.mutation("users:decrementTrainerClients", { 
                  trainerId: currentUser.trainerId 
                });
              } catch (counterError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', counterError);
              }
            }

            console.log(`‚úÖ API: –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω - ${currentUser.name}`);

            // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary
            if (imageUrls.length > 0) {
              imageUrls.forEach(async (url) => {
                try {
                  await deleteCloudinaryImage(url);
                } catch (deleteError) {
                  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', url, deleteError);
                }
              });
            }

            return NextResponse.json({
              success: true,
              message: '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            });
          } else {
            // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
            const wasActive = currentUser.status === 'active';
            
            await convex.mutation("users:updateClient", {
              id,
              updates: {
                status: 'inactive',
                updatedAt: Date.now(),
                updatedBy: user.id
              }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º
            if (currentUser.trainerId && wasActive) {
              try {
                await convex.mutation("users:decrementTrainerClients", { 
                  trainerId: currentUser.trainerId 
                });
              } catch (counterError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', counterError);
              }
            }

            console.log(`‚úÖ API: –∫–ª–∏–µ–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - ${currentUser.name}`);

            return NextResponse.json({
              success: true,
              message: '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
            });
          }

        } else if (type === 'user') {
          if (force) {
            // –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            await convex.mutation("users:deleteUser", { id });

            console.log(`‚úÖ API: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω - ${currentUser.name}`);

            // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary
            if (imageUrls.length > 0) {
              imageUrls.forEach(async (url) => {
                try {
                  await deleteCloudinaryImage(url);
                } catch (deleteError) {
                  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', url, deleteError);
                }
              });
            }

            return NextResponse.json({
              success: true,
              message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            });
          } else {
            // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
            await convex.mutation("users:updateUser", {
              id,
              updates: {
                status: 'inactive',
                updatedAt: Date.now(),
                updatedBy: user.id
              }
            });

            console.log(`‚úÖ API: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - ${currentUser.name}`);

            return NextResponse.json({
              success: true,
              message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
            });
          }

        } else {
          return createErrorResponse('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 400);
        }

      } catch (deleteError) {
        console.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', deleteError);
        return createErrorResponse(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${type}`, 500, deleteError);
      }

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return createErrorResponse('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 500, error);
    }
  });

  return handler(req, { params: {} });
};

// GET /api/users - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
export const GET = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withUserManagement(async (req: AuthenticatedRequest) => {
    try {
      console.log('üë• API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Convex');
      
      if (!convex) {
        return createErrorResponse('Convex client not initialized', 500);
      }

      const { user } = req;
      const url = new URL(req.url);
      const page = parseInt(url.searchParams.get('page') || '1');
      const limit = parseInt(url.searchParams.get('limit') || '10');
      const role = url.searchParams.get('role');
      const search = url.searchParams.get('search') || '';
      const status = url.searchParams.get('status');
      const type = url.searchParams.get('type');
      const sortBy = url.searchParams.get('sortBy') || 'name';
      const sortOrder = url.searchParams.get('sortOrder') || 'asc';

      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { page, limit, role, search, status, type, sortBy, sortOrder });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex
      let allUsers: any[] = [];

      try {
        const promises = [];

        if (!type || type === 'all' || type === 'trainer') {
          promises.push(
            convex.query("users:getTrainers").then((trainers: any[]) => 
              trainers.map(t => normalizeUser(t, 'trainer'))
            ).catch(err => {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', err);
              return [];
            })
          );
        }

        if (!type || type === 'all' || type === 'client') {
          promises.push(
            convex.query("users:getClients").then((clients: any[]) => 
              clients.map(c => normalizeUser(c, 'client'))
            ).catch(err => {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', err);
              return [];
            })
          );
        }

        if (!type || type === 'all') {
          promises.push(
            convex.query("users:getAll").then((users: any[]) => 
              users.map(u => normalizeUser(u, 'user'))
            ).catch(err => {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
              return [];
            })
          );
        }

        const results = await Promise.all(promises);
        allUsers = results.flat();

      } catch (convexError) {
        console.error('üí• –û—à–∏–±–∫–∞ Convex:', convexError);
        return createErrorResponse('Database connection error', 503, convexError);
      }

      console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Convex:', allUsers.length);

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
      // ... (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ GET –º–µ—Ç–æ–¥–∞)

      return NextResponse.json({
        success: true,
        data: allUsers.slice((page - 1) * limit, page * limit),
        pagination: {
          page,
          limit,
          total: allUsers.length,
          pages: Math.ceil(allUsers.length / limit)
        }
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return createErrorResponse('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 500, error);
    }
  });

  return handler(req, { params: {} });
};

// POST /api/users - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
export const POST = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withUserCreation(async (req: AuthenticatedRequest) => {
    try {
      console.log('‚ûï API: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex');
      
      if (!convex) {
        return createErrorResponse('Convex client not initialized', 500);
      }

      const body = await req.json();
      const { user } = req;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!body.name || !body.email || !body.type) {
        return createErrorResponse('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email, type)', 400);
      }

      // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const sanitizedData = sanitizeUserData(body);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const validation = validateUserData(sanitizedData);
      if (!validation.isValid) {
        return createErrorResponse('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 400, validation.errors);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
      try {
        const existingUser = await convex.query("users:getUserByEmail", { 
          email: sanitizedData.email 
        });
        if (existingUser) {
          return createErrorResponse('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 409);
        }
      } catch (emailCheckError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', emailCheckError);
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
      let newUserId: string;
      let userData: any;

      if (sanitizedData.type === 'trainer') {
        const targetRole = sanitizedData.role || 'trainer';
        if (!canManageRole(user.role, targetRole)) {
          return createErrorResponse(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ ${targetRole}`, 403);
        }

        userData = {
          name: sanitizedData.name,
          email: sanitizedData.email,
          role: targetRole,
          status: sanitizedData.status || 'active',
          phone: sanitizedData.phone || '',
          specialization: sanitizedData.specialization || [],
          experience: sanitizedData.experience || 0,
          hourlyRate: sanitizedData.hourlyRate || 1500,
          certifications: sanitizedData.certifications || [],
          bio: sanitizedData.bio || '',
          avatar: sanitizedData.avatar || '',
          createdAt: Date.now(),
          createdBy: user.id
        };

        newUserId = await convex.mutation("users:createTrainer", userData);

      } else if (sanitizedData.type === 'client') {
        userData = {
          name: sanitizedData.name,
          email: sanitizedData.email,
          phone: sanitizedData.phone || '',
          status: sanitizedData.status || 'active',
          trainerId: sanitizedData.trainerId || undefined,
          membershipType: sanitizedData.membershipType || 'basic',
          goals: sanitizedData.goals || [],
          createdAt: Date.now(),
          createdBy: user.id
        };

        newUserId = await convex.mutation("users:createClient", userData);

      } else {
        return createErrorResponse('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 400);
      }

      console.log(`‚úÖ API: ${sanitizedData.type} —Å–æ–∑–¥–∞–Ω —Å ID: ${newUserId}`);

      const responseData = normalizeUser({ ...userData, _id: newUserId }, sanitizedData.type);

      return NextResponse.json({
        success: true,
        data: responseData,
        message: `${sanitizedData.type === 'trainer' ? '–¢—Ä–µ–Ω–µ—Ä' : '–ö–ª–∏–µ–Ω—Ç'} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`
      }, { status: 201 });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return createErrorResponse('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 500, error);
    }
  });

  return handler(req, { params: {} });
};

// PATCH /api/users - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏)
export const PATCH = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withUserManagement(async (req: AuthenticatedRequest) => {
    try {
      console.log('üîß API: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex');
      
      if (!convex) {
        return createErrorResponse('Convex client not initialized', 500);
      }

      const body = await req.json();
      const { user } = req;
      const { id, type, action, ...actionData } = body;

      if (!id || !type || !action) {
        return createErrorResponse('ID, —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let currentUser: any;
      try {
        if (type === 'trainer') {
          currentUser = await convex.query("users:getTrainerById", { id });
        } else if (type === 'client') {
          currentUser = await convex.query("users:getClientById", { id });
        } else {
          currentUser = await convex.query("users:getUserById", { id });
        }

        if (!currentUser) {
          return createErrorResponse(`${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 404);
        }
      } catch (fetchError) {
        return createErrorResponse(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ${type}`, 500, fetchError);
      }

      // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      let updateData: any = {
        updatedAt: Date.now(),
        updatedBy: user.id
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ç–∏–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      // ... (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—Å—è –ª–æ–≥–∏–∫–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PATCH –º–µ—Ç–æ–¥–∞)

      console.log(`‚úÖ API: –¥–µ–π—Å—Ç–≤–∏–µ "${action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è ${type}`);

      return NextResponse.json({
        success: true,
        message: `–î–µ–π—Å—Ç–≤–∏–µ "${action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return createErrorResponse('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 500, error);
    }
  });

  return handler(req, { params: {} });
};