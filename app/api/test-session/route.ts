// app/api/test-session/route.ts - –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { jwtVerify } from 'jose';

export async function GET(request: NextRequest) {
  console.log('üß™ === –¢–ï–°–¢ –°–ï–°–°–ò–ò ===');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏
    const cookies = request.cookies.getAll();
    console.log('üç™ –í—Å–µ –∫—É–∫–∏:', cookies.map(c => ({ name: c.name, hasValue: !!c.value })));
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionId = request.cookies.get('session_id')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const userRole = request.cookies.get('user_role')?.value;
    
    console.log('üîë –¢–æ–∫–µ–Ω—ã:', {
      hasAuthToken: !!authToken,
      hasSessionId: !!sessionId,
      hasSessionIdDebug: !!sessionIdDebug,
      userRole
    });
    
    const token = authToken || sessionId || sessionIdDebug;
    
    if (!token) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞',
        cookies: cookies.map(c => c.name)
      });
    }
    
    // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîç –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é...');
    try {
      const secret = new TextEncoder().encode(
        process.env.JWT_SECRET || 'fallback-secret-key-change-in-production'
      );
      
      const { payload } = await jwtVerify(token, secret);
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', {
        hasSessionData: !!payload.sessionData,
        hasUserId: !!payload.userId,
        hasUserRole: !!payload.userRole,
        hasRole: !!payload.role,
        hasEmail: !!payload.email,
        keys: Object.keys(payload)
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–≤–æ–¥–∏–º –∏—Ö
      if (payload.userId || payload.sessionData) {
        const userData = payload.sessionData ? 
          (payload.sessionData as any).user : 
          {
            id: payload.userId,
            email: payload.email,
            role: payload.userRole || payload.role,
            name: payload.userName || payload.name
          };
          
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', userData);
      }
    } catch (jwtError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', jwtError);
    }
    
    // –ü—Ä–æ–±—É–µ–º getSession
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ getSession...');
    const session = await getSession(token);
    
    if (session) {
      console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', {
        id: session.id,
        userEmail: session.user.email,
        userRole: session.user.role,
        userName: session.user.name
      });
      
      return NextResponse.json({
        success: true,
        message: '–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞',
        session: {
          id: session.id,
          user: {
            id: session.user.id,
            email: session.user.email,
            role: session.user.role,
            name: session.user.name
          }
        },
        tokenType: authToken ? 'auth_token' : sessionId ? 'session_id' : 'session_id_debug'
      });
    } else {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ getSession');
      
      return NextResponse.json({
        success: false,
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        tokenType: authToken ? 'auth_token' : sessionId ? 'session_id' : 'session_id_debug',
        userRole,
        jwtSecretSet: !!process.env.JWT_SECRET
      });
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}