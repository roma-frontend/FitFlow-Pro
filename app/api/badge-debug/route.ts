// app/api/badge-debug/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ badge API');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Convex
    const allSettings = await convex.query("headerBadges:getAllBadgeSettings", {});
    const stats = await convex.query("headerBadges:getBadgeStats", {});

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π badge –¥–ª—è /about
    const testBadgeId = await convex.mutation("headerBadges:createBadgeSetting", {
      navigationItemHref: "/about",
      badgeVariant: "matrix",
      badgeText: "TEST",
      badgeEnabled: true,
      priority: 1,
      targetRoles: [],
      targetDevices: [],
      conditions: {
        requireAuth: false,
        minUserLevel: 0,
        showOnlyOnce: false,
        hideAfterClick: false,
      },
      createdBy: "debug-api"
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    const updatedSettings = await convex.query("headerBadges:getAllBadgeSettings", {});

    return NextResponse.json({
      success: true,
      message: '–û—Ç–ª–∞–¥–∫–∞ badge API —É—Å–ø–µ—à–Ω–∞',
      data: {
        initialBadgeCount: allSettings?.length || 0,
        testBadgeId,
        updatedBadgeCount: updatedSettings?.length || 0,
        stats
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ badge API:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ badge API',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}
