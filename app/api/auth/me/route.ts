// app/api/auth/me/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { jwtVerify } from 'jose';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è Vercel
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const memoryStore = new Map<string, any>();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookie
const getCookieValue = (request: NextRequest, name: string): string | undefined => {
  return request.cookies.get(name)?.value;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–∞–º—è—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
const getSessionFromMemory = (sessionId: string) => {
  const session = memoryStore.get(sessionId);
  if (!session) return null;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
  if (session.expiresAt && new Date(session.expiresAt) < new Date()) {
    memoryStore.delete(sessionId);
    return null;
  }
  
  return session;
};

export async function GET(request: NextRequest) {
  console.log('üîç GET /api/auth/me - Vercel-optimized version');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    const sessionId = getCookieValue(request, 'session_id') || 
                     getCookieValue(request, 'session_id_debug');
    const authToken = getCookieValue(request, 'auth_token');
    const userRoleCookie = getCookieValue(request, 'user_role');
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
    const authHeader = request.headers.get('authorization');
    const bearerToken = authHeader?.replace('Bearer ', '');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie –∏–ª–∏ header
    const token = authToken || bearerToken;
    
    console.log('üîë Auth check:', {
      hasSessionId: !!sessionId,
      hasToken: !!token,
      hasUserRole: !!userRoleCookie,
      isVercel: !!process.env.VERCEL
    });

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: JWT —Ç–æ–∫–µ–Ω
    if (token) {
      try {
        const secret = new TextEncoder().encode(
          process.env.JWT_SECRET || process.env.NEXT_PUBLIC_JWT_SECRET || 'your-secret-key'
        );
        
        const { payload } = await jwtVerify(token, secret);
        
        if (payload && payload.userId) {
          console.log('‚úÖ JWT –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.email);
          
          return NextResponse.json({
            success: true,
            user: {
              id: payload.userId as string,
              name: payload.name as string || 'User',
              email: payload.email as string,
              role: payload.role as string || 'member'
            }
          });
        }
      } catch (jwtError) {
        console.error('‚ùå JWT validation failed:', jwtError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      }
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–µ—Å—Å–∏—è –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è Vercel)
    if (sessionId) {
      console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏...');
      
      // –ù–∞ Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      const sessionData = getSessionFromMemory(sessionId);
      
      if (sessionData && sessionData.user) {
        console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è:', sessionData.user.email);
        
        return NextResponse.json({
          success: true,
          user: {
            id: sessionData.user.id,
            name: sessionData.user.name,
            email: sessionData.user.email,
            role: sessionData.user.role || userRoleCookie || 'member'
          }
        });
      }
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ï—Å–ª–∏ –µ—Å—Ç—å user_role cookie –Ω–æ –Ω–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (userRoleCookie && (sessionId || token)) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ user_role cookie');
      
      return NextResponse.json({
        success: true,
        user: {
          id: 'temp-' + Date.now(),
          name: 'User',
          email: 'user@example.com',
          role: userRoleCookie
        },
        warning: 'Limited user data available'
      });
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return NextResponse.json({ 
      success: false, 
      error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
      debug: process.env.NODE_ENV === 'development' ? {
        hasSessionCookie: !!sessionId,
        hasAuthToken: !!token,
        hasUserRole: !!userRoleCookie,
        isVercel: !!process.env.VERCEL
      } : undefined
    }, { status: 401 });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /api/auth/me:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—à–∏–±–∫—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    const isDev = process.env.NODE_ENV === 'development';
    
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      debug: isDev ? {
        message: error instanceof Error ? error.message : 'Unknown error',
        type: error instanceof Error ? error.constructor.name : 'Unknown',
        isVercel: !!process.env.VERCEL
      } : undefined
    }, { status: 500 });
  }
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π POST –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { userId, email, name, role } = body;
    
    if (!userId || !email) {
      return NextResponse.json({ 
        success: false, 
        error: 'Missing required fields' 
      }, { status: 400 });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
    const sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36);
    const sessionData = {
      user: { id: userId, email, name, role },
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 –¥–Ω–µ–π
    };
    
    memoryStore.set(sessionId, sessionData);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
    const response = NextResponse.json({ 
      success: true, 
      sessionId,
      user: sessionData.user 
    });
    
    response.cookies.set('session_id', sessionId, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
      path: '/'
    });
    
    if (role) {
      response.cookies.set('user_role', role, {
        httpOnly: false,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 7 * 24 * 60 * 60,
        path: '/'
      });
    }
    
    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Failed to create session' 
    }, { status: 500 });
  }
}