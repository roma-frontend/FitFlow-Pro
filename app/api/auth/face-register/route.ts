// app/api/auth/face-register/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { faceIdStorage } from '@/lib/face-id-storage';
import { jwtVerify } from 'jose';

interface FaceRegisterRequest {
  descriptor: number[];
  confidence: number;
  sessionToken?: string;
  metadata?: {
    source?: string;
    timestamp?: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
function getDeviceInfo(request: NextRequest) {
  const userAgent = request.headers.get('user-agent') || 'Unknown';
  const platform = request.headers.get('sec-ch-ua-platform') || 'Unknown';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∏–∑ User-Agent (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
  let screenResolution = '1920x1080'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

  if (userAgent.includes('Mobile')) {
    screenResolution = '390x844'; // iPhone 13
  } else if (userAgent.includes('iPad')) {
    screenResolution = '1024x768';
  }

  return {
    userAgent,
    platform: platform.replace(/"/g, ''),
    screenResolution
  };
}

export async function POST(request: NextRequest) {
  console.log('üì∏ Face Register API: –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID');

  try {
    const body: FaceRegisterRequest = await request.json();
    const { descriptor, confidence, sessionToken, metadata } = body;

    console.log('üì∏ Face Register: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      hasDescriptor: !!descriptor,
      descriptorLength: descriptor?.length,
      confidence,
      hasSessionToken: !!sessionToken,
      metadata
    });

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!descriptor || descriptor.length < 128) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏–∑ 128 –∑–Ω–∞—á–µ–Ω–∏–π.'
      }, { status: 400 });
    }

    if (confidence < 70) {
      return NextResponse.json({
        success: false,
        message: '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
      }, { status: 400 });
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
    const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key-change-in-production';
    console.log('üîê JWT_SECRET —Å—Ç–∞—Ç—É—Å:', {
      isSet: !!process.env.JWT_SECRET,
      usingFallback: !process.env.JWT_SECRET,
      envMode: process.env.NODE_ENV
    });

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let currentUser = null;
    let userSession = null;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionId = request.cookies.get('session_id')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const userRole = request.cookies.get('user_role')?.value;
    const token = authToken || sessionId || sessionToken || sessionIdDebug;

    console.log('üç™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:', {
      hasAuthToken: !!authToken,
      hasSessionId: !!sessionId,
      hasSessionToken: !!sessionToken,
      hasSessionIdDebug: !!sessionIdDebug,
      userRole,
      usingToken: token ? token.substring(0, 20) + '...' : 'none'
    });

    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID',
        debug: {
          cookies: request.cookies.getAll().map(c => c.name)
        }
      }, { status: 401 });
    }

    // ‚úÖ –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é...');
    try {
      const secret = new TextEncoder().encode(JWT_SECRET);

      const { payload } = await jwtVerify(token, secret);
      console.log('‚úÖ JWT payload:', {
        userId: payload.userId,
        userRole: payload.userRole,
        userEmail: payload.userEmail,
        hasSessionData: !!payload.sessionData,
        exp: payload.exp,
        iat: payload.iat
      });
    } catch (jwtError) {
      console.error('‚ùå JWT –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', jwtError);
      console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        errorName: jwtError instanceof Error ? jwtError.name : 'Unknown',
        errorMessage: jwtError instanceof Error ? jwtError.message : String(jwtError),
        tokenLength: token.length,
        tokenStart: token.substring(0, 20) + '...'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ getSession...');
    userSession = await getSession(token);

    if (!userSession || !userSession.user) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      console.log('üîç –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', {
        hasSession: !!userSession,
        hasUser: userSession ? !!userSession.user : false,
        tokenType: authToken ? 'auth_token' : sessionId ? 'session_id' : 'session_token'
      });

      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
        debug: {
          hasJwtSecret: !!process.env.JWT_SECRET,
          tokenType: authToken ? 'auth_token' : sessionId ? 'session_id' : 'session_token',
          userRole: userRole,
          tokenLength: token.length
        }
      }, { status: 401 });
    }

    currentUser = userSession.user;
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: currentUser.id,
      email: currentUser.email,
      name: currentUser.name,
      role: currentUser.role
    });

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Face ID –ø—Ä–æ—Ñ–∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingProfiles = await faceIdStorage.getUserProfiles(currentUser.id);
    console.log('üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:', existingProfiles.length);

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    if (existingProfiles.length >= 3) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
      existingProfiles.sort((a, b) =>
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö (—Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π)
      for (let i = 2; i < existingProfiles.length; i++) {
        await faceIdStorage.deactivateProfile(existingProfiles[i].id);
        console.log('üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', existingProfiles[i].id);
      }
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const deviceInfo = getDeviceInfo(request);

    // ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Face ID –ø—Ä–æ—Ñ–∏–ª—å
    const profile = await faceIdStorage.createProfile({
      userId: currentUser.id,
      userEmail: currentUser.email,
      userName: currentUser.name || currentUser.email,
      userRole: currentUser.role,
      descriptor,
      confidence,
      deviceInfo
    });

    console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', profile.id);

    // ‚úÖ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è Face ID
    const faceIdToken = faceIdStorage.createFaceIdToken(profile);

    // ‚úÖ –°–æ–∑–¥–∞–µ–º response —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookies
    const response = NextResponse.json({
      success: true,
      message: `Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${currentUser.name || currentUser.email}`,
      profileId: profile.id,
      user: {
        id: currentUser.id,
        name: currentUser.name,
        email: currentUser.email,
        role: currentUser.role
      },
      stats: {
        totalProfiles: existingProfiles.length + 1,
        activeProfiles: existingProfiles.filter(p => p.isActive).length + 1
      }
    });

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è Face ID
    response.cookies.set('face_id_registered', faceIdToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/'
    });

    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    response.cookies.set('face_id_profile', profile.id, {
      httpOnly: false, // –î–æ—Å—Ç—É–ø–µ–Ω –∏–∑ JS
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 30 * 24 * 60 * 60,
      path: '/'
    });

    console.log('‚úÖ Face ID cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');

    return response;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('‚ùå Face Register API: –æ—à–∏–±–∫–∞:', error);
    console.log('üîç Stack trace:', error instanceof Error ? error.stack : 'No stack trace');

    return NextResponse.json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID',
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined,
      stack: process.env.NODE_ENV === 'development' && error instanceof Error ? error.stack : undefined
    }, { status: 500 });
  }
}

// ‚úÖ GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Face ID
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    const faceIdToken = request.cookies.get('face_id_registered')?.value;
    const profileId = request.cookies.get('face_id_profile')?.value;

    if (!faceIdToken) {
      return NextResponse.json({
        registered: false,
        message: 'Face ID –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    const profile = await faceIdStorage.validateFaceIdToken(faceIdToken);

    if (!profile) {
      return NextResponse.json({
        registered: false,
        message: 'Face ID —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const stats = await faceIdStorage.getStats();

    return NextResponse.json({
      registered: true,
      profile: {
        id: profile.id,
        createdAt: profile.createdAt,
        lastUsedAt: profile.lastUsedAt,
        usageCount: profile.usageCount,
        deviceInfo: profile.deviceInfo
      },
      user: {
        id: profile.userId,
        name: profile.userName,
        email: profile.userEmail
      },
      stats
    });

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('‚ùå Face Register GET: –æ—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      registered: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Face ID',
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { status: 500 });
  }
}

// ‚úÖ DELETE –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª—è
export async function DELETE(request: NextRequest) {
  try {
    const token = request.cookies.get('auth_token')?.value ||
      request.cookies.get('session_id')?.value;

    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const session = await getSession(token);
    if (!session || !session.user) {
      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
      }, { status: 401 });
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ Face ID –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deactivatedCount = await faceIdStorage.deactivateUserProfiles(session.user.id);

    console.log(`üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${deactivatedCount} Face ID –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${session.user.id}`);

    // –û—á–∏—â–∞–µ–º cookies
    const response = NextResponse.json({
      success: true,
      message: 'Face ID –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã',
      deactivatedCount
    });

    response.cookies.delete('face_id_registered');
    response.cookies.delete('face_id_profile');

    return response;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('‚ùå Face Register DELETE: –æ—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Face ID –ø—Ä–æ—Ñ–∏–ª—è',
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { status: 500 });
  }
}