// app/api/auth/face-register/route.ts - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import jwt from 'jsonwebtoken';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

interface FaceRegisterRequest {
  descriptor: number[];
  confidence: number;
  sessionToken?: string;
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function getErrorMessage(error: unknown): string {
  if (error instanceof Error) {
    return error.message;
  }
  if (typeof error === 'string') {
    return error;
  }
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
function getErrorDetails(error: unknown) {
  if (process.env.NODE_ENV !== 'development') {
    return undefined;
  }
  
  if (error instanceof Error) {
    return {
      name: error.name,
      message: error.message,
      stack: error.stack
    };
  }
  
  return { error };
}

export async function POST(request: NextRequest) {
  console.log('üì∏ Face Register API: –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID');
  
  try {
    const body: FaceRegisterRequest = await request.json();
    const { descriptor, confidence, sessionToken } = body;

    console.log('üì∏ Face Register: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      hasDescriptor: !!descriptor,
      descriptorLength: descriptor?.length,
      confidence,
      hasSessionToken: !!sessionToken
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    if (!descriptor || descriptor.length === 0) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      }, { status: 400 });
    }

    if (confidence < 70) {
      return NextResponse.json({
        success: false,
        message: '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
      }, { status: 400 });
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return NextResponse.json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
      }, { status: 500 });
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –≤ cookie
    let currentUser = null;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    const token = request.cookies.get('auth_token')?.value || sessionToken;
    console.log('üç™ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', !!token);
    
    if (token) {
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
        console.log('üé´ –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', { userId: decoded.userId, email: decoded.email });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π query name
        currentUser = await convex.query("users:getById", { id: decoded.userId });
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', currentUser ? currentUser.name : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      } catch (jwtError) {
        const jwtErrorMessage = getErrorMessage(jwtError);
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', jwtErrorMessage);
      }
    }

    if (!currentUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
      }, { status: 401 });
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Face ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –¥–µ–º–æ)
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Face ID –ø—Ä–æ—Ñ–∏–ª—å...');
    
    // –î–ª—è –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ - –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º "–ø—Ä–æ—Ñ–∏–ª—å" –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
    console.log('üìù –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ Face ID –ø—Ä–æ—Ñ–∏–ª—å...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const faceProfileId = `face_profile_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω (–¥–µ–º–æ):', faceProfileId);

    return NextResponse.json({
      success: true,
      message: `Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${currentUser.name}`,
      profileId: faceProfileId,
      user: {
        id: currentUser._id,
        name: currentUser.name,
        email: currentUser.email
      }
    });

  } catch (error) {
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏
    const errorMessage = getErrorMessage(error);
    const errorDetails = getErrorDetails(error);
    
    console.error('‚ùå Face Register API: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID',
      error: errorMessage,
      ...(errorDetails && { details: errorDetails })
    }, { status: 500 });
  }
}

// ‚úÖ GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  try {
    return NextResponse.json({
      message: 'Face ID register endpoint',
      status: 'active',
      methods: ['POST'],
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    const errorMessage = getErrorMessage(error);
    console.error('‚ùå Face Register GET: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: errorMessage
    }, { status: 500 });
  }
}

// ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: DELETE –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª—è
export async function DELETE(request: NextRequest) {
  try {
    const token = request.cookies.get('auth_token')?.value;
    
    if (!token || !process.env.JWT_SECRET) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º Face ID –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${decoded.userId}`);
    
    return NextResponse.json({
      success: true,
      message: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    const errorMessage = getErrorMessage(error);
    console.error('‚ùå Face Register DELETE: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Face ID –ø—Ä–æ—Ñ–∏–ª—è',
      error: errorMessage
    }, { status: 500 });
  }
}
