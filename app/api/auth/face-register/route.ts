// app/api/auth/face-register/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å Convex
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { faceIdStorage } from '@/lib/face-id-storage';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

interface FaceRegisterRequest {
  descriptor: number[];
  confidence: number;
  sessionToken?: string;
  metadata?: {
    source?: string;
    timestamp?: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
function getDeviceInfo(request: NextRequest) {
  const userAgent = request.headers.get('user-agent') || 'Unknown';
  const platform = request.headers.get('sec-ch-ua-platform') || 'Unknown';

  let screenResolution = '1920x1080';
  if (userAgent.includes('Mobile')) {
    screenResolution = '390x844';
  } else if (userAgent.includes('iPad')) {
    screenResolution = '1024x768';
  }

  return {
    userAgent,
    platform: platform.replace(/"/g, ''),
    screenResolution
  };
}

export async function POST(request: NextRequest) {
  console.log('üì∏ Face Register API: –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID');

  try {
    const body: FaceRegisterRequest = await request.json();
    const { descriptor, confidence, sessionToken, metadata } = body;

    console.log('üì∏ Face Register: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      hasDescriptor: !!descriptor,
      descriptorLength: descriptor?.length,
      confidence,
      hasSessionToken: !!sessionToken,
      metadata
    });

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!descriptor || descriptor.length < 128) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏–∑ 128 –∑–Ω–∞—á–µ–Ω–∏–π.'
      }, { status: 400 });
    }

    if (confidence < 70) {
      return NextResponse.json({
        success: false,
        message: '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
      }, { status: 400 });
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionId = request.cookies.get('session_id')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const token = authToken || sessionId || sessionToken || sessionIdDebug;

    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
      }, { status: 401 });
    }

    const userSession = await getSession(token);
    if (!userSession || !userSession.user) {
      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
      }, { status: 401 });
    }

    const currentUser = userSession.user;
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: currentUser.id,
      email: currentUser.email,
      name: currentUser.name,
      role: currentUser.role
    });

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ Convex
    const existingProfiles = await convex.query("faceProfiles:getByUserId", {
      userId: currentUser.id,
      userType: "user"
    });

    if (existingProfiles) {
      console.log('üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
      await convex.mutation("faceProfiles:updateFaceDescriptor", {
        profileId: existingProfiles._id,
        faceDescriptor: descriptor,
        confidence: confidence
      });

      console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      // ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Face ID –ø—Ä–æ—Ñ–∏–ª—å –≤ Convex
      console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Face ID –ø—Ä–æ—Ñ–∏–ª—å –≤ Convex...');
      
      const deviceInfo = getDeviceInfo(request);
      
      const convexProfileId = await convex.mutation("faceProfiles:create", {
        userId: currentUser.id,
        faceDescriptor: descriptor,
        confidence: confidence,
        registeredAt: Date.now(),
        isActive: true,
        metadata: {
          registrationMethod: metadata?.source || 'web_app',
          userAgent: deviceInfo.userAgent,
          deviceInfo: JSON.stringify(deviceInfo)
        }
      });

      console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –≤ Convex:', convexProfileId);
    }

    // ‚úÖ –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const profile = await faceIdStorage.createProfile({
      userId: currentUser.id,
      userEmail: currentUser.email,
      userName: currentUser.name || currentUser.email,
      userRole: currentUser.role,
      descriptor,
      confidence,
      deviceInfo: getDeviceInfo(request)
    });

    console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', profile.id);

    // ‚úÖ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è Face ID
    const faceIdToken = faceIdStorage.createFaceIdToken(profile);

    // ‚úÖ –°–æ–∑–¥–∞–µ–º response —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookies
    const response = NextResponse.json({
      success: true,
      message: `Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${currentUser.name || currentUser.email}`,
      profileId: profile.id,
      user: {
        id: currentUser.id,
        name: currentUser.name,
        email: currentUser.email,
        role: currentUser.role
      }
    });

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –¥–ª—è Face ID
    response.cookies.set('face_id_registered', faceIdToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/'
    });

    response.cookies.set('face_id_profile', profile.id, {
      httpOnly: false,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 30 * 24 * 60 * 60,
      path: '/'
    });

    console.log('‚úÖ Face ID cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    return response;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('‚ùå Face Register API: –æ—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID',
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { status: 500 });
  }
}

// ‚úÖ GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Face ID
export async function GET(request: NextRequest) {
  try {
    const faceIdToken = request.cookies.get('face_id_registered')?.value;
    const profileId = request.cookies.get('face_id_profile')?.value;

    if (!faceIdToken) {
      return NextResponse.json({
        registered: false,
        message: 'Face ID –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    const profile = await faceIdStorage.validateFaceIdToken(faceIdToken);

    if (!profile) {
      return NextResponse.json({
        registered: false,
        message: 'Face ID —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Convex
    const convexProfile = await convex.query("faceProfiles:getByUserId", {
      userId: profile.userId,
      userType: "user"
    });

    const stats = await faceIdStorage.getStats();

    return NextResponse.json({
      registered: true,
      profile: {
        id: profile.id,
        createdAt: profile.createdAt,
        lastUsedAt: profile.lastUsedAt,
        usageCount: profile.usageCount,
        deviceInfo: profile.deviceInfo,
        hasConvexProfile: !!convexProfile
      },
      user: {
        id: profile.userId,
        name: profile.userName,
        email: profile.userEmail
      },
      stats
    });

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('‚ùå Face Register GET: –æ—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      registered: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Face ID',
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { status: 500 });
  }
}

// ‚úÖ DELETE –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª—è
export async function DELETE(request: NextRequest) {
  try {
    const token = request.cookies.get('auth_token')?.value ||
      request.cookies.get('session_id')?.value;

    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const session = await getSession(token);
    if (!session || !session.user) {
      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
      }, { status: 401 });
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Convex
    const convexProfile = await convex.query("faceProfiles:getByUserId", {
      userId: session.user.id,
      userType: "user"
    });

    if (convexProfile) {
      await convex.mutation("faceProfiles:deactivate", {
        profileId: convexProfile._id
      });
      console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Convex');
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    const deactivatedCount = await faceIdStorage.deactivateUserProfiles(session.user.id);

    console.log(`üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${deactivatedCount} Face ID –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${session.user.id}`);

    const response = NextResponse.json({
      success: true,
      message: 'Face ID –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã',
      deactivatedCount
    });

    response.cookies.delete('face_id_registered');
    response.cookies.delete('face_id_profile');

    return response;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('‚ùå Face Register DELETE: –æ—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Face ID –ø—Ä–æ—Ñ–∏–ª—è',
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { status: 500 });
  }
}