// app/api/auth/fix-jwt/route.ts - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
import { NextRequest, NextResponse } from 'next/server';
import { createSession } from '@/lib/simple-auth';
import { jwtVerify } from 'jose';

export async function POST(request: NextRequest) {
  try {
    console.log('üîß === FIX JWT START ===');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É–∫–∏
    const userRole = request.cookies.get('user_role')?.value;
    const sessionId = request.cookies.get('session_id')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    
    if (!userRole) {
      return NextResponse.json({
        success: false,
        error: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      }, { status: 400 });
    }
    
    console.log('üë§ –†–æ–ª—å –∏–∑ –∫—É–∫–∏:', userRole);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    let userData = null;
    const existingToken = sessionId || authToken;
    
    if (existingToken) {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
      const secrets = [
        process.env.JWT_SECRET,
        'fallback-secret-key-change-in-production',
        'your-secret-key-change-in-production-123456789'
      ].filter(Boolean);
      
      for (const secret of secrets) {
        try {
          const { payload } = await jwtVerify(existingToken, new TextEncoder().encode(secret!));
          
          if (payload.sessionData && typeof payload.sessionData === 'object') {
            const session = payload.sessionData as any;
            userData = {
              id: session.user?.id || payload.userId,
              email: session.user?.email || payload.userEmail || 'user@example.com',
              name: session.user?.name || payload.userName || 'User',
              role: userRole
            };
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Ç–æ–∫–µ–Ω–∞:', userData);
            break;
          }
        } catch (e) {
          // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∫—Ä–µ—Ç
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ
    if (!userData) {
      userData = {
        id: `member-${Date.now()}`,
        email: 'member@example.com',
        name: 'Member User',
        role: userRole
      };
      console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', userData);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
    const newToken = await createSession({
      id: userData.id,
      email: userData.email,
      role: userData.role as any,
      name: userData.name,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    console.log('‚úÖ –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º response —Å –Ω–æ–≤—ã–º–∏ –∫—É–∫–∞–º–∏
    const response = NextResponse.json({
      success: true,
      message: 'JWT —Ç–æ–∫–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω',
      user: userData,
      tokenLength: newToken.length
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax' as const,
      maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
      path: '/'
    };
    
    response.cookies.set('session_id', newToken, cookieOptions);
    response.cookies.set('auth_token', newToken, cookieOptions);
    response.cookies.set('user_role', userRole, {
      ...cookieOptions,
      httpOnly: false
    });
    
    // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      response.cookies.set('session_id_debug', newToken, {
        ...cookieOptions,
        httpOnly: false
      });
    }
    
    console.log('üîß === FIX JWT END ===');
    
    return response;
    
  } catch (error) {
    console.error('‚ùå Fix JWT error:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JWT',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}