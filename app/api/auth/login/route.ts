// app/api/auth/login/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø JWT
import { NextRequest, NextResponse } from 'next/server';
import {  createSession, type User, authenticateSync } from '@/lib/simple-auth';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);


const checkRouteAccess = (pathname: string, userRole: string): boolean => {
  const normalizedRole = userRole.toLowerCase().replace(/_/g, '-');
  
  // –ü—Ä–æ—Ñ–∏–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  if (pathname.startsWith('/trainer/')) {
    return true;
  }
  
  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/admin/')) {
    return ['admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/manager-')) {
    return ['manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/trainer-')) {
    return ['trainer', 'manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/member-') || pathname.startsWith('/my-') || pathname.startsWith('/profile') || pathname.startsWith('/bookings')) {
    return ['member', 'client', 'trainer', 'manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
  if (pathname.startsWith('/shop')) {
    return true;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
  return true;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∫—É–∫–∞–º–∏
async function createAuthResponse(user: any, sessionToken?: string, redirectUrl?: string) {
  console.log('üéØ –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è:', user.email);
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π sessionToken –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
  let token = sessionToken;
  
  if (!token) {
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ simple-auth –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const fullUser: User = {
      id: user.id || user._id,
      email: user.email,
      role: user.role,
      name: user.name,
      avatar: user.avatar,
      avatarUrl: user.avatarUrl,
      isVerified: user.isVerified || false,
      rating: user.rating || 0,
      createdAt: user.createdAt || new Date(),
      updatedAt: user.updatedAt || new Date()
    };
    
    token = await createSession(fullUser);
    console.log('üé´ –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ createSession');
  } else {
    console.log('üé´ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ä–æ–ª–∏
  const dashboardUrls: Record<string, string> = {
    'admin': '/admin',
    'super-admin': '/admin',
    'manager': '/manager-dashboard',
    'trainer': '/trainer-dashboard',
    'client': '/member-dashboard',
    'member': '/member-dashboard',
    'staff': '/staff-dashboard'
  };
  
  const defaultDashboardUrl = dashboardUrls[user.role] || '/dashboard';
  
  // üîß –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú REDIRECT URL
  let finalRedirectUrl = defaultDashboardUrl;
  
  if (redirectUrl) {
    try {
      const decodedRedirect = decodeURIComponent(redirectUrl);
      console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º redirect:', decodedRedirect);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å
      if (decodedRedirect.startsWith('/') && !decodedRedirect.startsWith('//')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
        const hasAccess = checkRouteAccess(decodedRedirect, user.role);
        
        if (hasAccess) {
          finalRedirectUrl = decodedRedirect;
          console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ redirect –º–∞—Ä—à—Ä—É—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω:', finalRedirectUrl);
        } else {
          console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ redirect –º–∞—Ä—à—Ä—É—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', defaultDashboardUrl);
        }
      } else {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', defaultDashboardUrl);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', defaultDashboardUrl);
    }
  }
  
  const responseData = {
    success: true,
    user: {
      id: user.id || user._id,
      userId: user.id || user._id,
      email: user.email,
      name: user.name,
      role: user.role
    },
    dashboardUrl: finalRedirectUrl,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL
    redirectUrl: finalRedirectUrl,   // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è redirect
    token, // –í–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
    timestamp: Date.now(),
    requestedRedirect: redirectUrl,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    finalRedirect: finalRedirectUrl  // –ò —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  };
  
  const response = NextResponse.json(responseData);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–∫–∏ –¥–ª—è production –∏ development
  const isProduction = process.env.NODE_ENV === 'production';
  const cookieOptions = {
    httpOnly: true,
    secure: isProduction,
    sameSite: 'lax' as const,
    maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
    path: '/'
  };
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JWT —Ç–æ–∫–µ–Ω –≤ session_id cookie
  response.cookies.set('session_id', token, cookieOptions);
  console.log('üç™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω session_id —Å JWT —Ç–æ–∫–µ–Ω–æ–º');
  
  // –î—É–±–ª–∏—Ä—É–µ–º –≤ auth_token –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  response.cookies.set('auth_token', token, cookieOptions);
  console.log('üç™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω auth_token (–¥—É–±–ª–∏–∫–∞—Ç)');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å (–¥–ª—è middleware)
  response.cookies.set('user_role', user.role, {
    ...cookieOptions,
    httpOnly: false // –î–æ—Å—Ç—É–ø–µ–Ω –∏–∑ JS
  });
  console.log('üç™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω user_role:', user.role);
  
  // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development
  if (!isProduction) {
    response.cookies.set('session_id_debug', token, {
      ...cookieOptions,
      httpOnly: false
    });
  }
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');
  response.headers.set('Pragma', 'no-cache');
  response.headers.set('Expires', '0');
  
  return response;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ User –∏–∑ –¥–∞–Ω–Ω—ã—Ö Convex
function createUserFromConvex(convexUser: any): User {
  const now = new Date();
  
  return {
    id: convexUser._id,
    email: convexUser.email,
    role: convexUser.role,
    name: convexUser.name || `${convexUser.firstName || ''} ${convexUser.lastName || ''}`.trim() || convexUser.email,
    avatar: convexUser.avatar || convexUser.photoUrl || undefined,
    avatarUrl: convexUser.avatarUrl || convexUser.photoUrl || undefined,
    isVerified: convexUser.isVerified || false,
    rating: convexUser.rating || undefined,
    createdAt: convexUser.createdAt ? new Date(convexUser.createdAt) : now,
    updatedAt: convexUser.updatedAt ? new Date(convexUser.updatedAt) : now
  };
}

export async function POST(request: NextRequest) {
  console.log('\nüîê === –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –í–•–û–î–ê ===');
  console.log('üîê Timestamp:', new Date().toISOString());
  
  try {
    const body = await request.json();
    const { email, password, role } = body;
    
    console.log('üìß Email:', email);
    console.log('üë§ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Ä–æ–ª—å:', role || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞');
    
    if (!email || !password) {
      console.log('‚ùå Email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω—ã');
      return NextResponse.json(
        { success: false, error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –º–æ–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ...');
    const session = authenticateSync(email, password);
    
    if (session) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –≤ –º–æ–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:', {
        userId: session.user.id,
        userName: session.user.name,
        userRole: session.user.role
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      if (role && session.user.role !== role) {
        // –î–ª—è staff –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å
        const staffRoles = ['admin', 'super-admin', 'manager', 'trainer'];
        if (role === 'staff' && !staffRoles.includes(session.user.role)) {
          console.log('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏');
          return NextResponse.json(
            { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
            { status: 401 }
          );
        }
      }
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ createSession –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      const jwtToken = await createSession(session.user);
      return await createAuthResponse(session.user, jwtToken);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ Convex
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ Convex...');
    
    try {
      const convexUser = await convex.query("users:getByEmail", { email });
      
      if (convexUser) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Convex:', {
          id: convexUser._id,
          role: convexUser.role,
          isActive: convexUser.isActive
        });
        
        if (!convexUser.isActive) {
          console.log('‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
          return NextResponse.json(
            { success: false, error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' },
            { status: 401 }
          );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await bcrypt.compare(password, convexUser.password);
        console.log('üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', isPasswordValid);
        
        if (!isPasswordValid) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
          return NextResponse.json(
            { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
            { status: 401 }
          );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (role && convexUser.role !== role) {
          const staffRoles = ['admin', 'super-admin', 'manager', 'trainer'];
          if (role === 'staff' && !staffRoles.includes(convexUser.role)) {
            console.log('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏');
            return NextResponse.json(
              { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
              { status: 401 }
            );
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        try {
          await convex.mutation("users:updateLastLogin", {
            userId: convexUser._id,
            timestamp: Date.now()
          });
        } catch (updateError) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞:', updateError);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç User –¥–ª—è —Å–µ—Å—Å–∏–∏
        const fullUser = createUserFromConvex(convexUser);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ createSession –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        const jwtToken = await createSession(fullUser);
        
        console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è Convex –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ createSession');
        
        return await createAuthResponse({
          id: convexUser._id,
          email: convexUser.email,
          role: convexUser.role,
          name: fullUser.name
        }, jwtToken);
      }
      
    } catch (convexError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ Convex:', convexError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return NextResponse.json(
      { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
      { status: 401 }
    );
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: process.env.NODE_ENV === 'development' ? error : error instanceof Error ? error.message : undefined
      },
      { status: 500 }
    );
  } finally {
    console.log('üîê === –ö–û–ù–ï–¶ –ü–†–û–¶–ï–°–°–ê –í–•–û–î–ê ===\n');
  }
}