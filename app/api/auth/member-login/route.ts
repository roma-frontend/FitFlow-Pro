// app/api/auth/member-login/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å redirect)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ä—à—Ä—É—Ç—É
const checkRouteAccess = (pathname: string, userRole: string): boolean => {
  const normalizedRole = userRole.toLowerCase().replace(/_/g, '-');
  
  // –ü—Ä–æ—Ñ–∏–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  if (pathname.startsWith('/trainers/')) {
    return true;
  }
  
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/member-') || pathname.startsWith('/my-') || pathname.startsWith('/profile') || pathname.startsWith('/bookings')) {
    return ['member', 'client', 'trainer', 'manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
  if (pathname.startsWith('/shop')) {
    return true;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
  return true;
};

export async function POST(request: NextRequest) {
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
  
  try {
    const body = await request.json();
    const { email, password, redirectUrl } = body; // üîß –î–û–ë–ê–í–ò–õ–ò redirectUrl

    console.log('üìß Email —É—á–∞—Å—Ç–Ω–∏–∫–∞:', email);
    console.log('üîÑ Redirect URL:', redirectUrl); // üîß –õ–û–ì–ò–†–£–ï–ú redirect

    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' },
        { status: 500 }
      );
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const user = await convex.query("users:getByEmail", { email });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 401 }
      );
    }

    if (!user.isActive) {
      console.log('‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      return NextResponse.json(
        { error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫
    if (user.role !== 'member') {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å:', user.role);
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    try {
      await convex.mutation("users:updateLastLogin", {
        userId: user._id,
        timestamp: Date.now()
      });
    } catch (updateError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞:', updateError);
    }

    // üîß –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú REDIRECT URL
    const defaultDashboardUrl = '/member-dashboard';
    let finalRedirectUrl = defaultDashboardUrl;
    
    if (redirectUrl) {
      try {
        const decodedRedirect = decodeURIComponent(redirectUrl);
        console.log('üîç Member-login: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º redirect:', decodedRedirect);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å
        if (decodedRedirect.startsWith('/') && !decodedRedirect.startsWith('//')) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
          const hasAccess = checkRouteAccess(decodedRedirect, user.role);
          
          if (hasAccess) {
            finalRedirectUrl = decodedRedirect;
            console.log('‚úÖ Member-login: –¥–æ—Å—Ç—É–ø –∫ redirect –º–∞—Ä—à—Ä—É—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω:', finalRedirectUrl);
          } else {
            console.log('‚ùå Member-login: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ redirect –º–∞—Ä—à—Ä—É—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', defaultDashboardUrl);
          }
        } else {
          console.log('‚ùå Member-login: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', defaultDashboardUrl);
        }
      } catch (error) {
        console.log('‚ùå Member-login: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', error);
      }
    }

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const tokenPayload = {
      userId: user._id,
      email: user.email,
      role: user.role,
      name: user.name
    };

    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET!,
      { expiresIn: '24h' }
    );

    const responseData = {
      success: true,
      user: {
        userId: user._id,
        email: user.email,
        name: user.name,
        role: user.role
      },
      token,
      dashboardUrl: finalRedirectUrl,
      redirectUrl: finalRedirectUrl,
      requestedRedirect: redirectUrl,
      finalRedirect: finalRedirectUrl
    };

    console.log('üéØ Member-login: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', {
      userId: user._id,
      email: user.email,
      requestedRedirect: redirectUrl,
      finalRedirect: finalRedirectUrl
    });

    const response = NextResponse.json(responseData);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax' as const,
      maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
      path: '/'
    };
    
    response.cookies.set('auth_token', token, cookieOptions);
    
    return response;

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}