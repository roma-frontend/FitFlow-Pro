// app/api/auth/member-register/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';
import { createSession, type User } from '@/lib/simple-auth';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
  
  try {
    const body = await request.json();
    const { email, password, name, phone } = body;

    console.log('üìß –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { email, name, phone });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password || !name) {
      return NextResponse.json(
        { error: 'Email, –ø–∞—Ä–æ–ª—å –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    if (password.length < 6) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const existingUser = await convex.query("users:getByEmail", { email });

    if (existingUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 409 }
      );
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
    const hashedPassword = await bcrypt.hash(password, 12);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const newUserId = await convex.mutation("users:create", {
      email: email.toLowerCase().trim(),
      password: hashedPassword,
      name: name.trim(),
      role: 'member', // –í—Å–µ–≥–¥–∞ member –¥–ª—è —ç—Ç–æ–≥–æ endpoint
      isActive: true,
      createdAt: Date.now(),
      updatedAt: Date.now(),
      ...(phone && { phone: phone.trim() })
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUserId);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fullUser: User = {
      id: newUserId,
      email: email.toLowerCase().trim(),
      role: 'member',
      name: name.trim(),
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const token = await createSession(fullUser);

    const responseData = {
      success: true,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      user: {
        id: newUserId,
        email: email,
        name: name,
        role: 'member'
      },
      token,
      dashboardUrl: '/member-dashboard'
    };

    const response = NextResponse.json(responseData);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax' as const,
      maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
      path: '/'
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ cookie –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    response.cookies.set('auth_token', token, cookieOptions);
    response.cookies.set('session_id', token, cookieOptions);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response.cookies.set('user_role', 'member', {
      ...cookieOptions,
      httpOnly: false
    });
    
    // –í development –¥–æ–±–∞–≤–ª—è–µ–º debug cookie
    if (process.env.NODE_ENV === 'development') {
      response.cookies.set('session_id_debug', token, {
        ...cookieOptions,
        httpOnly: false
      });
    }

    return response;

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}