// app/api/auth/face-login/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å Convex
import { NextRequest, NextResponse } from 'next/server';
import { createSession } from '@/lib/simple-auth';
import { faceIdStorage } from '@/lib/face-id-storage';
import { ConvexHttpClient } from "convex/browser";
import { UserRole } from '@/lib/permissions';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

interface FaceLoginRequest {
  descriptor: number[];
  confidence: number;
  faceFingerprint?: string;
  metadata?: {
    source?: string;
    timestamp?: number;
  };
}

// –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è Face ID (0.6 = 60% —Å—Ö–æ–∂–µ—Å—Ç–∏)
const SIMILARITY_THRESHOLD = parseFloat(process.env.FACE_ID_THRESHOLD || '0.6');

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞
const MIN_CONFIDENCE = 60;

export async function POST(request: NextRequest) {
  console.log('üë§ Face Login: –Ω–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Face ID');
  const startTime = Date.now();

  try {
    const body: FaceLoginRequest = await request.json();
    const { descriptor, confidence, faceFingerprint, metadata } = body;

    console.log('üë§ Face Login: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      hasDescriptor: !!descriptor,
      descriptorLength: descriptor?.length,
      confidence,
      hasFaceFingerprint: !!faceFingerprint,
      metadata
    });

    // ‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!descriptor || descriptor.length < 128) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –¥–ª—è –≤—Ö–æ–¥–∞'
      }, { status: 400 });
    }

    if (confidence < MIN_CONFIDENCE) {
      return NextResponse.json({
        success: false,
        message: `–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ (${confidence}%). –ú–∏–Ω–∏–º—É–º ${MIN_CONFIDENCE}%`
      }, { status: 400 });
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Face ID –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ Convex
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º Face ID –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ Convex...');
    
    const allProfiles = await convex.query("faceProfiles:getAllForComparison");
    
    if (!allProfiles || allProfiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Face ID –ø—Ä–æ—Ñ–∏–ª–µ–π');
      
      return NextResponse.json({
        success: false,
        message: '–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Face ID –ø—Ä–æ—Ñ–∏–ª–µ–π',
        debug: process.env.NODE_ENV === 'development' ? {
          threshold: SIMILARITY_THRESHOLD,
          profilesCount: 0
        } : undefined
      }, { status: 404 });
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allProfiles.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π`);

    // ‚úÖ –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    let bestMatch = null;
    let highestSimilarity = 0;

    for (const profile of allProfiles) {
      if (!profile.faceDescriptor || profile.faceDescriptor.length !== descriptor.length) {
        continue;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
      const similarity = faceIdStorage.calculateSimilarity(descriptor, profile.faceDescriptor);
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ${profile.id}: —Å—Ö–æ–∂–µ—Å—Ç—å ${(similarity * 100).toFixed(1)}%`);

      if (similarity > SIMILARITY_THRESHOLD && similarity > highestSimilarity) {
        highestSimilarity = similarity;
        bestMatch = profile;
      }
    }

    if (!bestMatch) {
      console.log('‚ùå Face ID –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞)');
      
      return NextResponse.json({
        success: false,
        message: 'Face ID –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ Face ID –≤ —Å–∏—Å—Ç–µ–º–µ.',
        debug: process.env.NODE_ENV === 'development' ? {
          threshold: SIMILARITY_THRESHOLD,
          checkedProfiles: allProfiles.length,
          maxSimilarity: Math.round(highestSimilarity * 100)
        } : undefined
      }, { status: 404 });
    }

    console.log('‚úÖ Face ID –Ω–∞–π–¥–µ–Ω:', {
      profileId: bestMatch.id,
      userId: bestMatch.userId,
      userName: bestMatch.name,
      similarity: `${(highestSimilarity * 100).toFixed(1)}%`,
      confidence: `${confidence}%`
    });

    // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const combinedScore = (highestSimilarity + confidence / 100) / 2;
    if (combinedScore < 0.65) {
      console.log('‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score:', combinedScore);
      return NextResponse.json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ.'
      }, { status: 400 });
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Convex
    await convex.mutation("faceProfiles:updateLastUsed", {
      profileId: bestMatch.id,
      timestamp: Date.now()
    });

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex...');
    
    let userData;
    if (bestMatch.userType === 'trainer') {
      userData = await convex.query("trainers:getById", { trainerId: bestMatch.userId });
    } else {
      userData = await convex.query("users:getById", { userId: bestMatch.userId });
    }

    if (!userData) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return NextResponse.json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ'
      }, { status: 404 });
    }

    // ‚úÖ –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîê –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData._id);
    
    const sessionToken = await createSession({
      id: userData._id,
      email: userData.email,
      role: (userData.role || bestMatch.userType || 'member') as UserRole,
      name: userData.name || bestMatch.name,
      avatar: userData.avatar,
      avatarUrl: userData.avatarUrl,
      isVerified: userData.isVerified || false,
      rating: userData.rating || 0,
      createdAt: new Date(userData.createdAt || Date.now()),
      updatedAt: new Date(userData.updatedAt || Date.now())
    });

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const localProfile = await faceIdStorage.findByDescriptor(descriptor, SIMILARITY_THRESHOLD);
    if (localProfile) {
      await faceIdStorage.updateUsageStats(localProfile.profile.id);
    }

    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ —Ä–æ–ª–∏
    const dashboardUrls: Record<string, string> = {
      'admin': '/admin',
      'super-admin': '/admin',
      'manager': '/manager-dashboard',
      'trainer': '/trainer-dashboard',
      'client': '/member-dashboard',
      'member': '/member-dashboard',
      'staff': '/staff-dashboard'
    };

    const userRole = (userData.role || bestMatch.userType || 'member') as string;
    const dashboardUrl = dashboardUrls[userRole] || '/member-dashboard';

    // ‚úÖ –°–æ–∑–¥–∞–µ–º response
    const response = NextResponse.json({
      success: true,
      message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.name || bestMatch.name}!`,
      user: {
        id: userData._id,
        name: userData.name || bestMatch.name,
        email: userData.email || bestMatch.email,
        role: userRole as UserRole
      },
      authMethod: "face_recognition",
      dashboardUrl,
      metrics: {
        similarity: Math.round(highestSimilarity * 100),
        confidence: Math.round(confidence),
        combinedScore: Math.round(combinedScore * 100),
        processingTime: Date.now() - startTime
      }
    });

    // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax' as const,
      maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
      path: '/'
    };

    // JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    response.cookies.set('auth_token', sessionToken, cookieOptions);
    response.cookies.set('session_id', sessionToken, cookieOptions);
    
    // –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ httpOnly –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ JS)
    response.cookies.set('user_role', userRole, {
      ...cookieOptions,
      httpOnly: false
    });

    // Face ID –ø—Ä–æ—Ñ–∏–ª—å
    response.cookies.set('face_id_profile', bestMatch.id, {
      ...cookieOptions,
      httpOnly: false,
      maxAge: 30 * 24 * 60 * 60
    });

    console.log('‚úÖ Face ID –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –¥–ª—è:', userData.name || bestMatch.name);
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', Date.now() - startTime, 'ms');
    
    return response;

  } catch (error) {
    console.error('‚ùå Face Login: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Face ID',
      error: process.env.NODE_ENV === 'development' ? 
        (error instanceof Error ? error.message : String(error)) : undefined
    }, { status: 500 });
  }
}

// ‚úÖ GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Face ID –≤—Ö–æ–¥–∞
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Convex
    const stats = await convex.query("faceProfiles:getStats");
    
    return NextResponse.json({
      enabled: true,
      message: 'Face ID login endpoint',
      requirements: {
        descriptorLength: 128,
        minConfidence: MIN_CONFIDENCE,
        similarityThreshold: Math.round(SIMILARITY_THRESHOLD * 100)
      },
      stats: {
        totalProfiles: stats?.total || 0,
        activeProfiles: stats?.active || 0,
        recentlyUsed: stats?.recentlyUsed || 0
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Face Login GET: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      enabled: false,
      message: 'Face ID –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      error: process.env.NODE_ENV === 'development' ? 
        (error instanceof Error ? error.message : String(error)) : undefined
    }, { status: 500 });
  }
}