// app/api/face-id/manage/route.ts - API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª—è–º–∏
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { faceIdStorage } from '@/lib/face-id-storage';

// ‚úÖ GET - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ Face ID –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = request.cookies.get('auth_token')?.value || 
                 request.cookies.get('session_id')?.value;
    
    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const session = await getSession(token);
    if (!session || !session.user) {
      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profiles = await faceIdStorage.getUserProfiles(session.user.id);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const safeProfiles = profiles.map(profile => ({
      id: profile.id,
      deviceInfo: profile.deviceInfo,
      createdAt: profile.createdAt,
      updatedAt: profile.updatedAt,
      lastUsedAt: profile.lastUsedAt,
      usageCount: profile.usageCount,
      isActive: profile.isActive,
      confidence: Math.round(profile.confidence)
    }));

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ cookie
    const currentProfileId = request.cookies.get('face_id_profile')?.value;
    
    return NextResponse.json({
      success: true,
      profiles: safeProfiles,
      currentProfileId,
      totalProfiles: profiles.length,
      activeProfiles: profiles.filter(p => p.isActive).length,
      maxProfiles: 3 // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });

  } catch (error) {
    console.error('‚ùå Face ID Manage GET: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª–µ–π',
      error: process.env.NODE_ENV === 'development' ? 
        (error instanceof Error ? error.message : String(error)) : undefined
    }, { status: 500 });
  }
}

// ‚úÖ DELETE - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Face ID –ø—Ä–æ—Ñ–∏–ª—å
export async function DELETE(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = request.cookies.get('auth_token')?.value || 
                 request.cookies.get('session_id')?.value;
    
    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const session = await getSession(token);
    if (!session || !session.user) {
      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { searchParams } = new URL(request.url);
    const profileId = searchParams.get('profileId');
    
    if (!profileId) {
      return NextResponse.json({
        success: false,
        message: 'ID –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const profile = await faceIdStorage.getProfile(profileId);
    
    if (!profile) {
      return NextResponse.json({
        success: false,
        message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    if (profile.userId !== session.user.id) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é'
      }, { status: 403 });
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const success = await faceIdStorage.deactivateProfile(profileId);
    
    if (!success) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
      }, { status: 500 });
    }

    console.log('üóëÔ∏è Face ID –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', profileId);

    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –æ—á–∏—â–∞–µ–º cookies
    const currentProfileId = request.cookies.get('face_id_profile')?.value;
    const response = NextResponse.json({
      success: true,
      message: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω',
      deletedProfileId: profileId
    });

    if (currentProfileId === profileId) {
      response.cookies.delete('face_id_profile');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
      const remainingProfiles = await faceIdStorage.getUserProfiles(session.user.id);
      if (remainingProfiles.length === 0) {
        response.cookies.delete('face_id_registered');
      }
    }

    return response;

  } catch (error) {
    console.error('‚ùå Face ID Manage DELETE: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª—è',
      error: process.env.NODE_ENV === 'development' ? 
        (error instanceof Error ? error.message : String(error)) : undefined
    }, { status: 500 });
  }
}

// ‚úÖ PUT - –û–±–Ω–æ–≤–∏—Ç—å Face ID –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä)
export async function PUT(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = request.cookies.get('auth_token')?.value || 
                 request.cookies.get('session_id')?.value;
    
    if (!token) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const session = await getSession(token);
    if (!session || !session.user) {
      return NextResponse.json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
      }, { status: 401 });
    }

    const body = await request.json();
    const { profileId, descriptor, confidence } = body;

    if (!profileId) {
      return NextResponse.json({
        success: false,
        message: 'ID –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const profile = await faceIdStorage.getProfile(profileId);
    
    if (!profile) {
      return NextResponse.json({
        success: false,
        message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    if (profile.userId !== session.user.id) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é'
      }, { status: 403 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updates: any = {};
    
    if (descriptor && descriptor.length === 128) {
      updates.descriptor = descriptor;
    }
    
    if (confidence && confidence >= 70) {
      updates.confidence = confidence;
    }

    const success = await faceIdStorage.updateProfile(profileId, updates);
    
    if (!success) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
      }, { status: 500 });
    }

    console.log('‚úèÔ∏è Face ID –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', profileId);

    return NextResponse.json({
      success: true,
      message: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
      updatedProfileId: profileId,
      updates: Object.keys(updates)
    });

  } catch (error) {
    console.error('‚ùå Face ID Manage PUT: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Face ID –ø—Ä–æ—Ñ–∏–ª—è',
      error: process.env.NODE_ENV === 'development' ? 
        (error instanceof Error ? error.message : String(error)) : undefined
    }, { status: 500 });
  }
}