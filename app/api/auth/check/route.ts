// app/api/auth/check/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø JWT —Å redirect –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
import { NextRequest, NextResponse } from 'next/server';
import { getSession, debugSessionAccess } from '@/lib/simple-auth';

const getDashboardForRole = (role: string): string => {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–æ–ª—å
  const normalizedRole = role.replace(/_/g, '-').toLowerCase();
  
  switch (normalizedRole) {
    case 'member':
    case 'client':
      return '/member-dashboard';
    case 'admin':
    case 'super-admin':
      return '/admin';
    case 'manager':
      return '/manager-dashboard';
    case 'trainer':
      return '/trainer-dashboard';
    default:
      return '/staff-dashboard';
  }
};

// üîß –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê –ö –ú–ê–†–®–†–£–¢–£
const checkRouteAccess = (pathname: string, userRole: string): boolean => {
  const normalizedRole = userRole.toLowerCase().replace(/_/g, '-');
  
  // –ü—Ä–æ—Ñ–∏–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  if (pathname.startsWith('/trainer/')) {
    return true;
  }
  
  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/admin/')) {
    return ['admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/manager-')) {
    return ['manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/trainer-')) {
    return ['trainer', 'manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (pathname.startsWith('/member-') || pathname.startsWith('/my-') || pathname.startsWith('/profile') || pathname.startsWith('/bookings')) {
    return ['member', 'client', 'trainer', 'manager', 'admin', 'super-admin'].includes(normalizedRole);
  }
  
  // –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
  if (pathname.startsWith('/shop')) {
    return true;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
  return true;
};

export async function GET(request: NextRequest) {
  try {
    console.log('\nüîç === API AUTH/CHECK START ===');
    console.log('üîç API auth/check: –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É JWT —Ç–æ–∫–µ–Ω–æ–≤');
    console.log('üîç API auth/check: NODE_ENV:', process.env.NODE_ENV);
    console.log('üîç API auth/check: VERCEL:', process.env.VERCEL);
    
    // –ü–æ–ª—É—á–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è redirect
    const url = new URL(request.url);
    const redirectParam = url.searchParams.get('redirect');
    
    console.log('üîç API auth/check: redirect –ø–∞—Ä–∞–º–µ—Ç—Ä:', redirectParam);
    console.log('üîç API auth/check: –≤—Å–µ cookies:', request.cookies.getAll().map(c => ({ 
      name: c.name, 
      hasValue: !!c.value,
      valueLength: c.value?.length || 0,
      valuePreview: c.value?.substring(0, 20) + '...' || 'empty'
    })));
    
    // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
    const sessionId = request.cookies.get('session_id')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–∫–µ–Ω
    const jwtToken = sessionId || authToken || sessionIdDebug;
    
    console.log('üîç API auth/check: session_id –Ω–∞–π–¥–µ–Ω:', !!sessionId);
    console.log('üîç API auth/check: auth_token –Ω–∞–π–¥–µ–Ω:', !!authToken);
    console.log('üîç API auth/check: session_id_debug –Ω–∞–π–¥–µ–Ω:', !!sessionIdDebug);
    console.log('üîç API auth/check: –∏—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω:', jwtToken?.substring(0, 20) + '...' || 'none');

    if (!jwtToken) {
      console.log('‚ùå API auth/check: JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      const response = NextResponse.json({ 
        authenticated: false,
        user: null,
        debug: 'No JWT token found in cookies',
        system: 'jwt',
        cookiesFound: request.cookies.getAll().map(c => ({ 
          name: c.name, 
          hasValue: !!c.value,
          length: c.value?.length || 0
        })),
        timestamp: new Date().toISOString(),
        redirectUrl: null
      });

      console.log('‚ùå === API AUTH/CHECK END - NO TOKEN ===\n');
      return response;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getSession –∏–∑ simple-auth
    console.log('üîç API auth/check: –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getSession...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getSession
      const session = await getSession(jwtToken);
      
      if (!session) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
        if (process.env.NODE_ENV === 'development') {
          await debugSessionAccess(jwtToken);
        }
        
        console.log('‚ùå API auth/check: JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
        
        const response = NextResponse.json({ 
          authenticated: false,
          user: null,
          debug: 'JWT token invalid or expired',
          system: 'jwt',
          timestamp: new Date().toISOString(),
          redirectUrl: null
        });
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É–∫–∏
        response.cookies.delete('session_id');
        response.cookies.delete('auth_token');
        response.cookies.delete('session_id_debug');
        response.cookies.delete('user_role');
        
        console.log('‚ùå === API AUTH/CHECK END - TOKEN INVALID ===\n');
        return response;
      }

      console.log('‚úÖ API auth/check: JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
        id: session.user.id,
        email: session.user.email,
        role: session.user.role,
        name: session.user.name
      });
      
      // üîß –û–ë–†–ê–ë–û–¢–ö–ê REDIRECT –ü–ê–†–ê–ú–ï–¢–†–ê
      let finalRedirectUrl: string;
      
      if (redirectParam) {
        try {
          const decodedRedirect = decodeURIComponent(redirectParam);
          console.log('üîç API auth/check: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º redirect:', decodedRedirect);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å
          if (decodedRedirect.startsWith('/') && !decodedRedirect.startsWith('//')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
            const hasAccess = checkRouteAccess(decodedRedirect, session.user.role);
            
            if (hasAccess) {
              finalRedirectUrl = decodedRedirect;
              console.log('‚úÖ API auth/check: –¥–æ—Å—Ç—É–ø –∫ redirect –º–∞—Ä—à—Ä—É—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω:', finalRedirectUrl);
            } else {
              finalRedirectUrl = getDashboardForRole(session.user.role);
              console.log('‚ùå API auth/check: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ redirect –º–∞—Ä—à—Ä—É—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', finalRedirectUrl);
            }
          } else {
            finalRedirectUrl = getDashboardForRole(session.user.role);
            console.log('‚ùå API auth/check: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', finalRedirectUrl);
          }
        } catch (error) {
          finalRedirectUrl = getDashboardForRole(session.user.role);
          console.log('‚ùå API auth/check: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', finalRedirectUrl);
        }
      } else {
        finalRedirectUrl = getDashboardForRole(session.user.role);
        console.log('üîç API auth/check: –Ω–µ—Ç redirect –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥:', finalRedirectUrl);
      }

      const response = NextResponse.json({
        authenticated: true,
        user: {
          id: session.user.id,
          role: session.user.role,
          email: session.user.email,
          name: session.user.name,
          avatar: session.user.avatar,
          avatarUrl: session.user.avatarUrl,
          isVerified: session.user.isVerified,
          rating: session.user.rating
        },
        dashboardUrl: finalRedirectUrl,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL
        redirectUrl: finalRedirectUrl,   // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è redirect
        debug: `JWT session valid for ${session.user.email}`,
        system: 'jwt',
        sessionCreated: session.createdAt,
        sessionExpires: session.expiresAt,
        lastAccessed: session.lastAccessed,
        usedCookie: sessionId ? 'session_id' : (authToken ? 'auth_token' : 'session_id_debug'),
        timestamp: new Date().toISOString(),
        requestedRedirect: redirectParam,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        finalRedirect: finalRedirectUrl    // –ò —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      });

      console.log('‚úÖ === API AUTH/CHECK END - SUCCESS ===\n');
      return response;

    } catch (error) {
      console.error('üí• API auth/check: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ JWT:', error);
      
      const response = NextResponse.json({ 
        authenticated: false,
        user: null,
        debug: `JWT verification error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        system: 'jwt',
        timestamp: new Date().toISOString(),
        stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined,
        redirectUrl: null
      });
      
      // –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É–∫–∏
      response.cookies.delete('session_id');
      response.cookies.delete('auth_token');
      response.cookies.delete('session_id_debug');
      response.cookies.delete('user_role');
      
      console.log('üí• === API AUTH/CHECK END - ERROR ===\n');
      return response;
    }

  } catch (error) {
    console.error('üí• API auth/check: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    const response = NextResponse.json({ 
      authenticated: false,
      user: null,
      debug: `Critical error: ${errorMessage}`,
      system: 'error',
      timestamp: new Date().toISOString(),
      stack: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.stack : undefined) : undefined,
      redirectUrl: null
    });

    console.log('üí• === API AUTH/CHECK END - CRITICAL ERROR ===\n');
    return response;
  }
}