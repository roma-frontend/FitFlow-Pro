// app/api/achievements/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const category = searchParams.get('category');
    const statsOnly = searchParams.get('stats') === 'true';
    
    if (statsOnly) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
      const stats = await convex.query("achievements:getAchievementStats");
      
      console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
      
      return NextResponse.json({ 
        success: true, 
        data: stats || {},
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞'
      });
    }
    
    if (!userId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç userId, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è");
      const achievements = await convex.query("achievements:getAllAchievements");
      
      console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", achievements?.length || 0);
      
      return NextResponse.json({ 
        success: true, 
        data: achievements || [],
        count: achievements?.length || 0
      });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å userId, –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (category) {
      console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", userId, category);
      const achievements = await convex.query("achievements:getUserAchievementsByCategory", { 
        userId, 
        category 
      });
      
      console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", achievements?.length || 0);
      
      return NextResponse.json({ 
        success: true, 
        data: achievements || [],
        count: achievements?.length || 0,
        category
      });
    } else {
      console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
      const achievements = await convex.query("achievements:getUserAchievements", { userId });
      
      console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", achievements?.length || 0);
      
      return NextResponse.json({ 
        success: true, 
        data: achievements || [],
        count: achievements?.length || 0
      });
    }
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
        data: []
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ API POST: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è");
    
    const body = await request.json();
    console.log("üì¶ API POST: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId || !body.achievementId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, achievementId");
    }
    
    console.log("üìû API POST: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("achievements:unlockAchievement", {
      userId: body.userId,
      achievementId: body.achievementId,
      progress: body.progress || 100,
      metadata: body.metadata || {}
    });

    console.log("‚úÖ API POST: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'
    });
  } catch (error) {
    console.error("‚ùå API POST: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
      },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log("üîÑ API PUT: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è");
    
    const body = await request.json();
    console.log("üì¶ API PUT: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId || !body.achievementId || body.progress === undefined) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, achievementId, progress");
    }
    
    console.log("üìû API PUT: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("achievements:updateProgress", {
      userId: body.userId,
      achievementId: body.achievementId,
      progress: body.progress,
      metadata: body.metadata || {}
    });

    console.log("‚úÖ API PUT: –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API PUT: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
      },
      { status: 500 }
    );
  }
}