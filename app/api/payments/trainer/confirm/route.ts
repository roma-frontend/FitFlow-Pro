// app/api/payments/trainer/confirm/route.ts
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { ConvexHttpClient } from "convex/browser";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-05-28.basil',
});

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const { paymentIntentId, bookingId } = await request.json();

    console.log('‚úÖ Confirming trainer payment:', { paymentIntentId, bookingId });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);

    if (paymentIntent.status !== 'succeeded') {
      throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    console.log('üí≥ PaymentIntent confirmed:', {
      id: paymentIntent.id,
      amount: paymentIntent.amount,
      metadata: paymentIntent.metadata
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ charge –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    let chargeDetails = null;
    if (paymentIntent.latest_charge) {
      try {
        chargeDetails = await stripe.charges.retrieve(paymentIntent.latest_charge as string);
        console.log('üí≥ Charge details:', chargeDetails.billing_details);
      } catch (chargeError) {
        console.warn('‚ö†Ô∏è Could not retrieve charge details:', chargeError);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Convex
    const updatedBooking = await convex.mutation("bookings:updateTrainerBookingPayment", {
      paymentIntentId,
      paymentStatus: 'paid',
      status: 'confirmed',
      paymentId: paymentIntent.id,
      paidAt: Date.now(),
    });

    console.log('‚úÖ Booking updated successfully:', updatedBooking);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
    const { 
      trainerId,
      trainerName,
      date,
      time,
      trainingType,
      memberEmail,
      customerName,
      customerPhone 
    } = paymentIntent.metadata;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é
    const receipt = {
      receiptId: `TRAIN-${Date.now()}`,
      bookingId: updatedBooking._id,
      paymentId: paymentIntent.id,
      amount: paymentIntent.amount / 100,
      currency: paymentIntent.currency.toUpperCase(),
      paidAt: new Date().toISOString(),
      
      booking: {
        trainerId,
        trainerName,
        date,
        time,
        type: trainingType,
        endTime: `${parseInt(time.split(':')[0]) + 1}:${time.split(':')[1]}`, // +1 —á–∞—Å
      },
      
      customer: {
        email: memberEmail,
        name: customerName,
        phone: customerPhone || '',
      },
      
      company: {
        name: 'FitFlow-Pros',
        address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
        inn: '1234567890',
        phone: '+7 (495) 123-45-67',
        email: 'info@FitFlow-Pros.ru',
      },
    };

    console.log('üìß Trainer booking receipt generated:', {
      receiptId: receipt.receiptId,
      booking: receipt.booking,
      customer: receipt.customer
    });

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π
    // await sendBookingConfirmationEmail(receipt);

    return NextResponse.json({
      success: true,
      receipt,
      booking: updatedBooking,
    });

  } catch (error) {
    console.error('‚ùå Error confirming trainer payment:', error);
    
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      },
      { status: 500 }
    );
  }
}