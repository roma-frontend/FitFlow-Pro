// app/api/badge-settings/route.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import type { HeaderBadgeSetting } from '@/types/badge';
import type { Id } from "@/convex/_generated/dataModel";
import { getSession } from '@/lib/simple-auth';

// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Convex
const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserFromRequest(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ –∫—É–∫–∏
    const sessionId = request.cookies.get('session_id')?.value || 
                     request.cookies.get('session_id_debug')?.value;
    
    if (sessionId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
      const session = await getSession(sessionId);
      if (session) {
        return session.user;
      }
    }
    
    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
    const authResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL || ''}/api/auth/check`, {
      headers: {
        'Cookie': request.headers.get('cookie') || '',
      }
    });
    
    if (!authResponse.ok) {
      return null;
    }
    
    const authData = await authResponse.json();
    
    if (!authData.authenticated || !authData.user) {
      return null;
    }
    
    return authData.user;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return null;
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ badge –Ω–∞—Å—Ç—Ä–æ–µ–∫
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userRole = searchParams.get('userRole');
    const deviceType = searchParams.get('deviceType');
    const activeOnly = searchParams.get('activeOnly') === 'true';

    console.log('üîç API –∑–∞–ø—Ä–æ—Å badge-settings:', { userRole, deviceType, activeOnly });

    let settings;
    if (activeOnly) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ badge
      settings = await convex.query("headerBadges:getActiveBadgeSettings", {
        userRole: userRole || undefined,
        deviceType: deviceType || undefined,
      });
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ badge
      settings = await convex.query("headerBadges:getAllBadgeSettings", {});
    }

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ badge –∏–∑ Convex:', settings?.length || 0);

    return NextResponse.json({
      success: true,
      data: settings || [],
      total: settings?.length || 0
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è badge settings:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await getUserFromRequest(request);
    
    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ badge
    if (user.role !== 'super-admin') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è badge' },
        { status: 403 }
      );
    }

    const body = await request.json();

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ badge —á–µ—Ä–µ–∑ Convex:', body);

    // –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ Convex
    const badgeId = await convex.mutation("headerBadges:createBadgeSetting", body);

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω badge —Å ID:', badgeId);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    const allSettings = await convex.query("headerBadges:getAllBadgeSettings", {});
    const newSetting = allSettings.find((s: any) => s._id === badgeId);

    return NextResponse.json({
      success: true,
      data: newSetting,
      message: 'Badge —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è badge setting:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export async function PUT(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await getUserFromRequest(request);
    
    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ badge
    if (user.role !== 'super-admin') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è badge' },
        { status: 403 }
      );
    }
    
    const body = await request.json();
    const { id, updates, updatedBy } = body;

    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ badge —á–µ—Ä–µ–∑ Convex:', { id, updates });

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Convex
    await convex.mutation("headerBadges:updateBadgeSetting", {
      id,
      updates: {
        ...updates,
        updatedBy
      }
    });

    console.log('‚úÖ Badge –æ–±–Ω–æ–≤–ª–µ–Ω');

    return NextResponse.json({
      success: true,
      message: 'Badge –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è badge setting:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export async function DELETE(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await getUserFromRequest(request);
    
    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ badge
    if (user.role !== 'super-admin') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è badge' },
        { status: 403 }
      );
    }
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'ID –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ badge —á–µ—Ä–µ–∑ Convex:', id);

    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ Convex
    await convex.mutation("headerBadges:deleteBadgeSetting", {
      id
    });

    console.log('‚úÖ Badge —É–¥–∞–ª–µ–Ω');

    return NextResponse.json({
      success: true,
      message: 'Badge —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è badge setting:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
