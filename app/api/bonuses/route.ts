// app/api/bonuses/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

interface Bonus {
    _id: string;
    _creationTime: number;
    userId: string;
    type: string;
    value: number;
    description?: string;
    expiresAt: number;
    isUsed: boolean;
    category?: string;
    conditions?: Record<string, any>;
    metadata?: Record<string, any>;
}

interface BonusWithStatus extends Bonus {
    isExpired: boolean;
    isActive: boolean;
    isUsed: boolean;
}

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
    try {
        console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–æ–Ω—É—Å–æ–≤");

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query
        const { searchParams } = new URL(request.url);
        const userId = searchParams.get('userId');
        const type = searchParams.get('type') || 'all';
        const status = searchParams.get('status'); // active, expired, used

        if (!userId) {
            throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: userId");
        }

        console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId, "—Ç–∏–ø:", type);

        let bonuses: Bonus[] | undefined;

        switch (type) {
            case 'available':
                console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã");
                bonuses = await convex.query("bonuses:getAvailableBonuses", { userId });
                break;

            case 'used':
                console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã");
                bonuses = await convex.query("bonuses:getUsedBonuses", { userId });
                break;

            case 'expired':
                console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã");
                bonuses = await convex.query("bonuses:getExpiredBonuses", { userId });
                break;

            case 'all':
            default:
                console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                bonuses = await convex.query("bonuses:getUserBonuses", { userId });
                break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ–Ω—É—Å–∞
        const now = Date.now();
        const bonusesWithStatus = bonuses?.map((bonus: Bonus) => ({
            ...bonus,
            isExpired: bonus.expiresAt < now,
            isActive: !bonus.isUsed && bonus.expiresAt > now,
            isUsed: bonus.isUsed || false
        })) as BonusWithStatus[] || [];

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        let filteredBonuses = bonusesWithStatus;
        if (status) {
            switch (status) {
                case 'active':
                    filteredBonuses = bonusesWithStatus.filter(bonus => bonus.isActive);
                    break;
                case 'expired':
                    filteredBonuses = bonusesWithStatus.filter(bonus => bonus.isExpired);
                    break;
                case 'used':
                    filteredBonuses = bonusesWithStatus.filter(bonus => bonus.isUsed);
                    break;
            }
        }

        console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:", filteredBonuses.length);

        return NextResponse.json({
            success: true,
            data: filteredBonuses,
            count: filteredBonuses.length,
            type,
            status
        });
    } catch (error) {
        console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);

        return NextResponse.json(
            {
                success: false,
                error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤',
                data: []
            },
            { status: 500 }
        );
    }
}

export async function POST(request: NextRequest) {
    try {
        console.log("üîÑ API POST: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–∞");

        const body = await request.json();
        console.log("üì¶ API POST: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!body.userId) {
            throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: userId");
        }

        if (!body.type || !body.value) {
            throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, value");
        }

        console.log("üìû API POST: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");

        const result = await convex.mutation("bonuses:createUserBonus", {
            userId: body.userId,
            type: body.type,
            value: body.value,
            description: body.description || '',
            expiresAt: body.expiresAt || (Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            category: body.category || 'general',
            conditions: body.conditions || {},
            metadata: body.metadata || {}
        });

        console.log("‚úÖ API POST: –ë–æ–Ω—É—Å —Å–æ–∑–¥–∞–Ω:", result);

        return NextResponse.json({
            success: true,
            data: result,
            message: '–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
        }, { status: 201 });
    } catch (error) {
        console.error("‚ùå API POST: –û—à–∏–±–∫–∞:", error);

        return NextResponse.json(
            {
                success: false,
                error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–∞'
            },
            { status: 500 }
        );
    }
}

export async function PUT(request: NextRequest) {
    try {
        console.log("üîÑ API PUT: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞");

        const body = await request.json();
        console.log("üì¶ API PUT: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!body.userId || !body.bonusId) {
            throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, bonusId");
        }

        console.log("üìû API PUT: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");

        const result = await convex.mutation("bonuses:updateUserBonus", {
            userId: body.userId,
            bonusId: body.bonusId,
            type: body.type,
            value: body.value,
            description: body.description,
            expiresAt: body.expiresAt,
            category: body.category,
            conditions: body.conditions,
            metadata: body.metadata
        });

        console.log("‚úÖ API PUT: –ë–æ–Ω—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:", result);

        return NextResponse.json({
            success: true,
            data: result,
            message: '–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        });
    } catch (error) {
        console.error("‚ùå API PUT: –û—à–∏–±–∫–∞:", error);

        return NextResponse.json(
            {
                success: false,
                error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞'
            },
            { status: 500 }
        );
    }
}

export async function DELETE(request: NextRequest) {
    try {
        console.log("üîÑ API DELETE: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞");

        const { searchParams } = new URL(request.url);
        const userId = searchParams.get('userId');
        const bonusId = searchParams.get('bonusId');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!userId || !bonusId) {
            throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: userId, bonusId");
        }

        console.log("üìû API DELETE: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");

        const result = await convex.mutation("bonuses:deleteUserBonus", {
            userId,
            bonusId
        });

        console.log("‚úÖ API DELETE: –ë–æ–Ω—É—Å —É–¥–∞–ª–µ–Ω:", result);

        return NextResponse.json({
            success: true,
            data: result,
            message: '–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });
    } catch (error) {
        console.error("‚ùå API DELETE: –û—à–∏–±–∫–∞:", error);

        return NextResponse.json(
            {
                success: false,
                error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞'
            },
            { status: 500 }
        );
    }
}