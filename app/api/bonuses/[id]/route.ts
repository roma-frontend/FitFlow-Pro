// app/api/bonuses/[id]/use/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log("üîÑ API POST: –ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞");
    
    const body = await request.json();
    console.log("üì¶ API POST: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    console.log("üéØ API POST: ID –±–æ–Ω—É—Å–∞:", params.id);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: userId");
    }
    
    if (!params.id) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –±–æ–Ω—É—Å–∞");
    }
    
    console.log("üìû API POST: –í—ã–∑—ã–≤–∞–µ–º Convex mutation –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞");
    
    const result = await convex.mutation("bonuses:useBonus", {
      userId: body.userId,
      bonusId: params.id,
      context: body.context || {},
      metadata: body.metadata || {}
    });

    console.log("‚úÖ API POST: –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
    });
  } catch (error) {
    console.error("‚ùå API POST: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞'
      },
      { status: 400 }
    );
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–µ");
    
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: userId");
    }
    
    if (!params.id) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –±–æ–Ω—É—Å–∞");
    }
    
    console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ:", params.id);
    
    const bonus = await convex.query("bonuses:getBonusDetails", {
      userId,
      bonusId: params.id
    });

    console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–µ:", bonus ? '–¥–∞' : '–Ω–µ—Ç');
    
    return NextResponse.json({ 
      success: true, 
      data: bonus || null,
      message: bonus ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–µ –ø–æ–ª—É—á–µ–Ω–∞' : '–ë–æ–Ω—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–µ',
        data: null
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log("üîÑ API DELETE: –ù–∞—á–∞–ª–æ –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞");
    
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: userId");
    }
    
    if (!params.id) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –±–æ–Ω—É—Å–∞");
    }
    
    console.log("üìû API DELETE: –í—ã–∑—ã–≤–∞–µ–º Convex mutation –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞");
    
    const result = await convex.mutation("bonuses:cancelBonusUsage", {
      userId,
      bonusId: params.id
    });

    console.log("‚úÖ API DELETE: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    });
  } catch (error) {
    console.error("‚ùå API DELETE: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞'
      },
      { status: 400 }
    );
  }
}