// app/api/profile/update-avatar/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { ConvexHttpClient } from "convex/browser";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Convex –∫–ª–∏–µ–Ω—Ç–∞
const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log('üñºÔ∏è POST /api/profile/update-avatar - –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value || 
                      request.cookies.get('auth_token')?.value ||
                      request.cookies.get('session_id_debug')?.value;
                      
    if (!sessionId) {
      console.log('‚ùå –ù–µ—Ç session_id');
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = await getSession(sessionId);
    if (!sessionData) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞
    const body = await request.json();
    const { avatarUrl } = body;

    if (!avatarUrl) {
      return NextResponse.json({ error: 'URL –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –æ—Ç Cloudinary
    if (!avatarUrl.includes('cloudinary.com')) {
      return NextResponse.json({ 
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' 
      }, { status: 400 });
    }

    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      userId: sessionData.user.id,
      email: sessionData.user.email,
      role: sessionData.user.role
    });

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Convex mutation
      const result = await convex.mutation("users:updateAvatar", {
        userId: sessionData.user.id,
        email: sessionData.user.email,
        avatarUrl: avatarUrl
      });
      
      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Convex:', result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (sessionData.user.avatar !== avatarUrl || sessionData.user.avatarUrl !== avatarUrl) {
        sessionData.user.avatar = avatarUrl;
        sessionData.user.avatarUrl = avatarUrl;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const { updateSession } = await import('@/lib/simple-auth');
        const newToken = await updateSession(sessionId, sessionData);
        
        if (newToken) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const cookieOptions = {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax' as const,
            maxAge: 7 * 24 * 60 * 60,
            path: '/'
          };
          
          const response = NextResponse.json({
            success: true,
            message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            avatarUrl: avatarUrl,
            userId: result.userId
          });
          
          response.cookies.set('session_id', newToken, cookieOptions);
          response.cookies.set('auth_token', newToken, cookieOptions);
          
          console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º');
          
          return response;
        }
      }
      
      return NextResponse.json({
        success: true,
        message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        avatarUrl: avatarUrl,
        userId: result.userId
      });
      
    } catch (convexError: any) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Convex:', convexError);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Convex (–Ω–∞–ø—Ä–∏–º–µ—Ä, super-admin –∏–∑ simple-auth)
      if (convexError.message?.includes('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω') && sessionData.user.role === 'super-admin') {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è super-admin');
        
        sessionData.user.avatar = avatarUrl;
        sessionData.user.avatarUrl = avatarUrl;
        
        const { updateSession } = await import('@/lib/simple-auth');
        const newToken = await updateSession(sessionId, sessionData);
        
        if (newToken) {
          const cookieOptions = {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax' as const,
            maxAge: 7 * 24 * 60 * 60,
            path: '/'
          };
          
          const response = NextResponse.json({
            success: true,
            message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–ª–æ–∫–∞–ª—å–Ω–æ)',
            avatarUrl: avatarUrl
          });
          
          response.cookies.set('session_id', newToken, cookieOptions);
          response.cookies.set('auth_token', newToken, cookieOptions);
          
          return response;
        }
      }
      
      throw convexError;
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
export async function GET(request: NextRequest) {
  try {
    const sessionId = request.cookies.get('session_id')?.value || 
                      request.cookies.get('auth_token')?.value ||
                      request.cookies.get('session_id_debug')?.value;
                      
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = await getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex
    try {
      const convexUser = await convex.query("users:getUserByEmail", {
        email: sessionData.user.email
      });
      
      if (convexUser) {
        return NextResponse.json({
          success: true,
          avatarUrl: convexUser.avatar || convexUser.photoUrl || null,
          source: 'convex'
        });
      }
    } catch (convexError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex:', convexError);
    }

    // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    return NextResponse.json({
      success: true,
      avatarUrl: sessionData.user.avatar || sessionData.user.avatarUrl || null,
      source: 'session'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}