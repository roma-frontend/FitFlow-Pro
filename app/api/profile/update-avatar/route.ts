// app/api/profile/update-avatar/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getSession, updateSession } from '@/lib/simple-auth';
import { ConvexHttpClient } from "convex/browser";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Convex –∫–ª–∏–µ–Ω—Ç–∞
let convex: ConvexHttpClient;
try {
  if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
    throw new Error('NEXT_PUBLIC_CONVEX_URL is not defined');
  }
  convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Convex:', error);
}

export async function POST(request: NextRequest) {
  try {
    console.log('üñºÔ∏è POST /api/profile/update-avatar - –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value || 
                      request.cookies.get('session_id_debug')?.value;
                      
    if (!sessionId) {
      console.log('‚ùå –ù–µ—Ç session_id');
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = await getSession(sessionId);
    if (!sessionData) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞
    const body = await request.json();
    const { avatarUrl } = body;

    if (!avatarUrl) {
      return NextResponse.json({ error: 'URL –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –æ—Ç Cloudinary
    if (!avatarUrl.includes('cloudinary.com')) {
      return NextResponse.json({ 
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' 
      }, { status: 400 });
    }

    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', sessionData.user.id);

    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å Convex, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
      if (convex) {
        try {
          await convex.mutation("users:updateProfile", {
            userId: sessionData.user.id,
            email: sessionData.user.email,
            updates: {
              avatar: avatarUrl,
              photoUrl: avatarUrl, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å trainers
              updatedAt: Date.now()
            }
          });
          
          console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Convex');
        } catch (convexError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Convex:', convexError);
          
          // –î–ª—è super-admin –∏–∑ simple-auth —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          if (sessionData.user.role !== 'super-admin') {
            throw convexError;
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      sessionData.user.avatar = avatarUrl;
      if (sessionData.user.avatarUrl) {
        sessionData.user.avatarUrl = avatarUrl;
      }
      updateSession(sessionId, sessionData);
      
      console.log('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      return NextResponse.json({
        success: true,
        message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        avatarUrl: avatarUrl
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
export async function GET(request: NextRequest) {
  try {
    const sessionId = request.cookies.get('session_id')?.value || 
                      request.cookies.get('session_id_debug')?.value;
                      
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = await getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    return NextResponse.json({
      success: true,
      avatarUrl: sessionData.user.avatar || null
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', error);
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}