// app/api/profile/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import { getSession } from '@/lib/simple-auth';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Convex –∫–ª–∏–µ–Ω—Ç–∞
let convex: ConvexHttpClient;
try {
  if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
    throw new Error('NEXT_PUBLIC_CONVEX_URL is not defined');
  }
  convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Convex:', error);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ error response
function createErrorResponse(message: string, status: number = 500, details?: any) {
  console.error(`‚ùå API Error (${status}):`, message, details);
  
  const response = NextResponse.json({
    success: false,
    error: message,
    timestamp: new Date().toISOString(),
    ...(process.env.NODE_ENV === 'development' && details && { details })
  }, { status });

  return addNoCacheHeaders(response);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–æ—Ç–∏–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
function addNoCacheHeaders(response: NextResponse) {
  response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
  response.headers.set('Pragma', 'no-cache');
  response.headers.set('Expires', '0');
  response.headers.set('Surrogate-Control', 'no-store');
  response.headers.set('Vercel-CDN-Cache-Control', 'no-store');
  
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  response.headers.set('Access-Control-Allow-Origin', '*');
  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  return response;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ cookies
async function getSessionFromRequest(request: NextRequest) {
  try {
    const sessionId = request.cookies.get('session_id')?.value || 
                      request.cookies.get('session_id_debug')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', {
      hasSessionId: !!sessionId,
      hasAuthToken: !!authToken
    });

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º session_id —á–µ—Ä–µ–∑ simple-auth
    if (sessionId) {
      const session = await getSession(sessionId);
      if (session) {
        console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ simple-auth:', session.user.email);
        return session;
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
    if (authToken) {
      try {
        const { jwtVerify } = await import('jose');
        const secret = new TextEncoder().encode(
          process.env.JWT_SECRET || process.env.NEXT_PUBLIC_JWT_SECRET || 'your-secret-key'
        );
        
        const { payload } = await jwtVerify(authToken, secret);
        
        if (payload && payload.userId && payload.email && payload.role) {
          console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', payload.email);
          return {
            user: {
              id: payload.userId as string,
              email: payload.email as string,
              role: payload.role as string,
              name: payload.name as string || payload.email as string,
              avatar: payload.avatar as string || undefined
            }
          };
        }
      } catch (jwtError) {
        console.log('‚ö†Ô∏è JWT validation failed:', jwtError);
      }
    }

    return null;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    return null;
  }
}

// OPTIONS –¥–ª—è CORS
export async function OPTIONS(request: NextRequest) {
  console.log('üîÑ OPTIONS request received');
  const response = new NextResponse(null, { status: 200 });
  return addNoCacheHeaders(response);
}

// GET - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  console.log('\nüë§ === API /profile GET START ===');
  
  try {
    if (!convex) {
      return createErrorResponse('Convex client not initialized', 500);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getSessionFromRequest(request);
    if (!session || !session.user) {
      return createErrorResponse('Unauthorized', 401);
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', session.user.email);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
    let userData;
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      userData = await convex.query("users:getUserByEmail", {
        email: session.user.email
      });

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ ID
      if (!userData && session.user.id) {
        userData = await convex.query("users:getUserById", {
          userId: session.user.id
        });
      }
    } catch (convexError) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex:', convexError);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ fallback
      userData = null;
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ Convex, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    const profileData = userData ? {
      id: userData._id || userData.id || session.user.id,
      email: userData.email || session.user.email,
      name: userData.name || session.user.name,
      role: userData.role || session.user.role,
      avatar: userData.avatar || userData.photoUrl || session.user.avatar,
      phone: userData.phone || null,
      isVerified: userData.isVerified ?? true,
      isActive: userData.isActive ?? true,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      ...(session.user.role === 'member' && {
        membershipType: userData.membershipType || 'basic',
        membershipExpiry: userData.membershipExpiry || null,
        totalWorkouts: userData.totalWorkouts || 0,
        lastWorkout: userData.lastWorkout || null
      })
    } : {
      // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      id: session.user.id,
      email: session.user.email,
      name: session.user.name,
      role: session.user.role,
      avatar: session.user.avatar,
      isActive: true
    };

    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    const response = NextResponse.json({
      success: true,
      user: profileData,
      timestamp: new Date().toISOString()
    });

    return addNoCacheHeaders(response);

  } catch (error) {
    return createErrorResponse('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 500, error);
  }
}

// PUT - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function PUT(request: NextRequest) {
  console.log('\n‚úèÔ∏è === API /profile PUT START ===');
  
  try {
    if (!convex) {
      return createErrorResponse('Convex client not initialized', 500);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getSessionFromRequest(request);
    if (!session || !session.user) {
      return createErrorResponse('Unauthorized', 401);
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', session.user.email);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let updates;
    try {
      const body = await request.json();
      updates = body.updates || body;
    } catch (parseError) {
      return createErrorResponse('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON', 400, parseError);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π
    const allowedFields = ['name', 'phone', 'avatar', 'avatarUrl', 'bio', 'birthDate', 'location'];
    const updateFields: any = {};

    for (const field of allowedFields) {
      if (updates[field] !== undefined) {
        updateFields[field] = updates[field];
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ avatarUrl -> avatar
    if (updateFields.avatarUrl && !updateFields.avatar) {
      updateFields.avatar = updateFields.avatarUrl;
      delete updateFields.avatarUrl;
    }

    if (Object.keys(updateFields).length === 0) {
      return createErrorResponse('–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 400);
    }

    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è:', Object.keys(updateFields));

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Convex
    try {
      await convex.mutation("users:updateProfile", {
        userId: session.user.id,
        email: session.user.email, // Fallback –Ω–∞ email –µ—Å–ª–∏ –Ω–µ—Ç ID
        updates: {
          ...updateFields,
          updatedAt: Date.now()
        }
      });

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Convex');
    } catch (convexError) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Convex:', convexError);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex,
      // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é (–¥–ª—è super-admin –∏–∑ simple-auth)
      if (session.user.role === 'super-admin') {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ super-admin –≤ —Å–µ—Å—Å–∏–∏');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      } else {
        throw convexError;
      }
    }

    const response = NextResponse.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      updates: updateFields,
      timestamp: new Date().toISOString()
    });

    return addNoCacheHeaders(response);

  } catch (error) {
    return createErrorResponse('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 500, error);
  }
}

// POST - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è, –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏ —Ç.–¥.)
export async function POST(request: NextRequest) {
  console.log('\nüîß === API /profile POST START ===');
  
  try {
    if (!convex) {
      return createErrorResponse('Convex client not initialized', 500);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getSessionFromRequest(request);
    if (!session || !session.user) {
      return createErrorResponse('Unauthorized', 401);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
    let body;
    try {
      body = await request.json();
    } catch (parseError) {
      return createErrorResponse('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON', 400, parseError);
    }

    const { action, ...data } = body;

    if (!action) {
      return createErrorResponse('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ', 400);
    }

    console.log('üéØ –î–µ–π—Å—Ç–≤–∏–µ:', action);

    switch (action) {
      case 'change-password': {
        const { currentPassword, newPassword } = data;
        
        if (!currentPassword || !newPassword) {
          return createErrorResponse('–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
        }

        if (newPassword.length < 6) {
          return createErrorResponse('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤', 400);
        }

        // –ú–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ Convex
        const result = await convex.mutation("users:changePassword", {
          userId: session.user.id,
          email: session.user.email,
          currentPassword,
          newPassword
        });

        if (!result.success) {
          return createErrorResponse(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 400);
        }

        const response = NextResponse.json({
          success: true,
          message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
        });

        return addNoCacheHeaders(response);
      }

      case 'verify-email': {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await convex.mutation("users:sendVerificationEmail", {
          userId: session.user.id,
          email: session.user.email
        });

        const response = NextResponse.json({
          success: true,
          message: '–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        });

        return addNoCacheHeaders(response);
      }

      case 'update-preferences': {
        const { preferences } = data;
        
        if (!preferences || typeof preferences !== 'object') {
          return createErrorResponse('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º', 400);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ Convex
        await convex.mutation("users:updatePreferences", {
          userId: session.user.id,
          preferences: {
            ...preferences,
            updatedAt: Date.now()
          }
        });

        const response = NextResponse.json({
          success: true,
          message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
          preferences
        });

        return addNoCacheHeaders(response);
      }

      default:
        return createErrorResponse(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`, 400);
    }

  } catch (error) {
    return createErrorResponse('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è', 500, error);
  }
}

// DELETE - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç (soft delete)
export async function DELETE(request: NextRequest) {
  console.log('\nüóëÔ∏è === API /profile DELETE START ===');
  
  try {
    if (!convex) {
      return createErrorResponse('Convex client not initialized', 500);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getSessionFromRequest(request);
    if (!session || !session.user) {
      return createErrorResponse('Unauthorized', 401);
    }

    console.log('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:', session.user.email);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const { searchParams } = new URL(request.url);
    const confirm = searchParams.get('confirm');
    
    if (confirm !== 'true') {
      return createErrorResponse('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è', 400, {
        hint: '–î–æ–±–∞–≤—å—Ç–µ ?confirm=true –∫ –∑–∞–ø—Ä–æ—Å—É'
      });
    }

    // Soft delete —á–µ—Ä–µ–∑ Convex
    await convex.mutation("users:deactivateAccount", {
      userId: session.user.id,
      email: session.user.email,
      reason: 'User requested deletion'
    });

    console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

    // –û—á–∏—â–∞–µ–º –∫—É–∫–∏
    const response = NextResponse.json({
      success: true,
      message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
    });

    // –£–¥–∞–ª—è–µ–º –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    response.cookies.delete('session_id');
    response.cookies.delete('session_id_debug');
    response.cookies.delete('auth_token');

    return addNoCacheHeaders(response);

  } catch (error) {
    return createErrorResponse('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞', 500, error);
  }
}