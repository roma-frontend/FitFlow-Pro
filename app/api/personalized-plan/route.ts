// app/api/personalized-plan/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const sessionToken = request.cookies.get('session_id')?.value;
    if (!sessionToken) {
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      }, { status: 401 });
    }

    const sessionData = await getSession(sessionToken);
    if (!sessionData) {
      return NextResponse.json({ 
        success: false, 
        error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' 
      }, { status: 401 });
    }

    const userId = sessionData.user.id;
    const body = await request.json();

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ Convex:', {
      userId,
      analysisId: body.analysisId,
      hasTrainer: !!body.recommendedTrainer,
      hasProgram: !!body.trainingProgram,
      exercisesCount: body.trainingProgram?.exercises?.length || 0
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º exercises –∏–∑ trainingProgram
      const exercises = body.trainingProgram?.exercises || [];
      
      // –û—á–∏—â–∞–µ–º trainingProgram –æ—Ç exercises –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—É
      const cleanTrainingProgram = {
        duration: body.trainingProgram.duration,
        focusAreas: body.trainingProgram.focusAreas,
        id: body.trainingProgram.id,
        name: body.trainingProgram.name,
        sessionsPerWeek: body.trainingProgram.sessionsPerWeek
      };

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Convex
      const planData = {
        userId,
        analysisId: body.analysisId,
        recommendedTrainer: body.recommendedTrainer,
        trainingProgram: cleanTrainingProgram,
        exercises: exercises, // –ü–µ—Ä–µ–¥–∞–µ–º exercises –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º
        nutritionPlan: body.nutritionPlan,
        recommendedProducts: body.recommendedProducts,
        membershipRecommendation: body.membershipRecommendation,
        projectedResults: body.projectedResults
      };

      console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Convex:', {
        ...planData,
        exercisesCount: exercises.length,
        firstExercise: exercises[0] // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ConvexHttpClient –¥–ª—è –≤—ã–∑–æ–≤–∞ mutation
      const result = await convex.mutation("bodyAnalysis:savePersonalizedPlan", planData);

      console.log('‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ (–≤–∫–ª—é—á–∞—è exercises –æ–±—Ä–∞—Ç–Ω–æ –≤ trainingProgram)
      const fullPlanData = {
        _id: result.planId,
        analysisId: body.analysisId,
        userId,
        recommendedTrainer: body.recommendedTrainer,
        trainingProgram: {
          ...cleanTrainingProgram,
          exercises: exercises // –í–æ–∑–≤—Ä–∞—â–∞–µ–º exercises –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        },
        nutritionPlan: body.nutritionPlan,
        recommendedProducts: body.recommendedProducts,
        membershipRecommendation: body.membershipRecommendation,
        projectedResults: body.projectedResults,
        _creationTime: Date.now()
      };

      return NextResponse.json({
        success: true,
        data: fullPlanData
      });

    } catch (convexError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Convex –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞:', convexError);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (convexError instanceof Error && convexError.message.includes('ArgumentValidationError')) {
        console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', {
          error: convexError.message,
          trainingProgram: body.trainingProgram,
          exercisesCount: body.trainingProgram?.exercises?.length,
          firstExercise: body.trainingProgram?.exercises?.[0]
        });
      }
      
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        details: convexError instanceof Error ? convexError.message : 'Unknown error'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const sessionToken = request.cookies.get('session_id')?.value;
    if (!sessionToken) {
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      }, { status: 401 });
    }

    const sessionData = await getSession(sessionToken);
    if (!sessionData) {
      return NextResponse.json({ 
        success: false, 
        error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' 
      }, { status: 401 });
    }

    const userId = sessionData.user.id;
    const { searchParams } = new URL(request.url);
    const analysisId = searchParams.get('analysisId');

    if (!analysisId) {
      return NextResponse.json({
        success: false,
        error: 'analysisId –Ω–µ —É–∫–∞–∑–∞–Ω'
      }, { status: 400 });
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ConvexHttpClient –¥–ª—è –≤—ã–∑–æ–≤–∞ query
      const plan = await convex.query("bodyAnalysis:getPersonalizedPlan", {
        userId,
        analysisId: analysisId as any
      });

      return NextResponse.json({
        success: true,
        data: plan
      });

    } catch (convexError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Convex –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞:', convexError);
      return NextResponse.json({
        success: false,
        error: '–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω',
        details: convexError instanceof Error ? convexError.message : 'Unknown error'
      }, { status: 404 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}