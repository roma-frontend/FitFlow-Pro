// app/api/memberships/create-payment/route.ts
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { ConvexHttpClient } from "convex/browser";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-05-28.basil',
});

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const { 
      planId,
      userId,
      userEmail,
      userName,
      userPhone,
      autoRenew = false
    } = await request.json();

    console.log('üí≥ Creating membership payment:', {
      planId,
      userId,
      userEmail,
      userName,
      userPhone,
      autoRenew
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!planId || !userId || !userEmail || !userName) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: planId, userId, userEmail, userName' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –∏–∑ Convex
    const plan = await convex.query("memberships:getPlanById", { id: planId });
    
    if (!plan) {
      return NextResponse.json(
        { error: '–ü–ª–∞–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    console.log('üìã Plan details:', {
      id: plan._id,
      type: plan.type,
      name: plan.name,
      price: plan.price,
      duration: plan.duration
    });

    // –°–æ–∑–¥–∞–µ–º Payment Intent —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(plan.price * 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
      currency: 'rub',
      
      // Email –¥–ª—è —á–µ–∫–∞
      receipt_email: userEmail,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      metadata: {
        userId: userId,
        planId: planId,
        planType: plan.type,
        planName: plan.name,
        planDuration: plan.duration.toString(),
        autoRenew: autoRenew.toString(),
        email: userEmail,
        userName: userName,
        userPhone: userPhone || '',
        createdAt: Date.now().toString(),
        orderType: 'membership',
        source: 'web',
      },
      
      description: `–ê–±–æ–Ω–µ–º–µ–Ω—Ç "${plan.name}" (${plan.duration} –¥–Ω–µ–π) –¥–ª—è ${userName}`,
      
      // –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      shipping: {
        name: userName,
        phone: userPhone || undefined,
        address: {
          country: 'RU',
          line1: '–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä FitFlow-Pro',
          city: '–ú–æ—Å–∫–≤–∞',
          state: '–ú–æ—Å–∫–≤–∞',
          postal_code: '101000',
        }
      },
    });

    console.log('‚úÖ Payment intent created:', {
      id: paymentIntent.id,
      amount: paymentIntent.amount,
      receipt_email: paymentIntent.receipt_email
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –≤ Convex
    const membershipOrderId = await convex.mutation("membershipOrders:create", {
      userId,
      planId,
      planType: plan.type,
      planName: plan.name,
      price: plan.price,
      duration: plan.duration,
      autoRenew,
      paymentIntentId: paymentIntent.id,
      paymentMethod: 'card',
      status: 'pending',
      
      // –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      userEmail,
      userName,
      userPhone,
    });

    console.log('üì¶ Membership order created:', membershipOrderId);

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
      membershipOrderId,
      plan: {
        id: plan._id,
        name: plan.name,
        price: plan.price,
        duration: plan.duration
      }
    });

  } catch (error) {
    console.error('‚ùå Error creating membership payment:', error);
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      },
      { status: 500 }
    );
  }
}