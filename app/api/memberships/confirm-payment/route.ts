import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { ConvexHttpClient } from "convex/browser";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
    apiVersion: '2025-05-28.basil',
});

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
    try {
        const { paymentIntentId, membershipOrderId } = await request.json();

        console.log('‚úÖ Confirming membership payment:', { paymentIntentId, membershipOrderId });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ Stripe
        const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);

        if (paymentIntent.status !== 'succeeded') {
            throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
        }

        console.log('üí≥ Payment succeeded:', {
            id: paymentIntent.id,
            amount: paymentIntent.amount,
            metadata: paymentIntent.metadata
        });

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ charge –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        let chargeDetails = null;
        if (paymentIntent.latest_charge) {
            try {
                chargeDetails = await stripe.charges.retrieve(paymentIntent.latest_charge as string);
            } catch (chargeError) {
                console.warn('‚ö†Ô∏è Could not retrieve charge details:', chargeError);
            }
        }

        // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è Convex
        const allowedFields = [
            "_id", "userId", "planId", "planType", "planName", "price", "duration",
            "autoRenew", "userEmail", "userName", "userPhone", "paymentIntentId", "paymentId", "paidAt"
        ];

        function cleanOrderData(orderData: any) {
            return Object.fromEntries(Object.entries(orderData).filter(([key]) => allowedFields.includes(key)));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        const updatedOrder = await convex.mutation("membershipOrders:updatePaymentStatus", {
            paymentIntentId,
            status: 'confirmed',
            paymentStatus: 'paid',
            paymentId: paymentIntent.id,
            paidAt: Date.now(),
        });
        console.log('‚úÖ Membership order updated:', updatedOrder);

        // –û—á–∏—â–∞–µ–º orderData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        const cleanedOrder = cleanOrderData(updatedOrder);

        console.log('üîç About to create active membership:', { orderData: cleanedOrder, paymentIntentId: paymentIntent.id });
        const activeMembership = await convex.mutation("memberships:createFromOrder", {
            orderData: cleanedOrder,
            paymentIntentId: paymentIntent.id
        });
        console.log('üéâ Active membership created:', activeMembership);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        const customerEmail = paymentIntent.receipt_email ||
            paymentIntent.metadata?.email ||
            updatedOrder.userEmail ||
            'customer@fitflow-pro.ru';

        const customerName = paymentIntent.metadata?.userName ||
            paymentIntent.shipping?.name ||
            chargeDetails?.billing_details?.name ||
            updatedOrder.userName ||
            '–ö–ª–∏–µ–Ω—Ç';

        const customerPhone = paymentIntent.metadata?.userPhone ||
            paymentIntent.shipping?.phone ||
            chargeDetails?.billing_details?.phone ||
            updatedOrder.userPhone ||
            '';

        // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫
        const receipt = {
            receiptId: `MBR-${Date.now()}`,
            membershipId: activeMembership._id,
            paymentId: paymentIntent.id,
            amount: paymentIntent.amount / 100,
            currency: paymentIntent.currency.toUpperCase(),
            paidAt: new Date().toISOString(),
            customer: {
                email: customerEmail,
                name: customerName,
                phone: customerPhone,
                userId: updatedOrder.userId,
            },
            membership: {
                planName: updatedOrder.planName,
                planType: updatedOrder.planType,
                duration: updatedOrder.duration,
                price: updatedOrder.price,
                startDate: activeMembership.startDate,
                expiresAt: activeMembership.expiresAt,
            },
            company: {
                name: 'FitFlow-Pro',
                address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
                inn: '1234567890',
                phone: '+7 (495) 123-45-67',
                email: 'info@fitflow-pro.ru',
            }
        };

        console.log('üìß Membership receipt generated:', {
            receiptId: receipt.receiptId,
            customer: receipt.customer,
            membership: receipt.membership
        });

        return NextResponse.json({
            success: true,
            receipt,
            membership: activeMembership,
            order: updatedOrder,
        });

    } catch (error) {
        console.error('‚ùå Error confirming membership payment:', error);

        return NextResponse.json(
            {
                success: false,
                error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
            },
            { status: 500 }
        );
    }
}