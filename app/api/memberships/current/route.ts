// app/api/memberships/current/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log("üîÑ API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞");
    
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        },
        { status: 400 }
      );
    }
    
    const membership = await convex.query("memberships:getCurrentMembership", { userId });
    
    console.log("‚úÖ API: –¢–µ–∫—É—â–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç:", membership ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω");
    
    return NextResponse.json({ 
      success: true, 
      data: membership
    });
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞'
      },
      { status: 500 }
    );
  }
}