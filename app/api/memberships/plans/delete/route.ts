// app/api/memberships/plans/delete/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json();
    
    console.log("üîÑ API: –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", body.id);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!body.id) {
      throw new Error("ID –ø–ª–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }
    
    const result = await convex.mutation("memberships:deletePlan", {
      id: body.id
    });
    
    console.log("‚úÖ API: –ü–ª–∞–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω");
    
    return NextResponse.json({
      success: true,
      data: result,
      message: '–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞:', error);
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞' 
      },
      { status: 500 }
    );
  }
}