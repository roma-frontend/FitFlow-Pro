// app/api/memberships/plans/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET() {
  try {
    console.log("üîÑ API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");
    
    const plans = await convex.query("memberships:getPlans");
    
    console.log("‚úÖ API: –ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞–Ω–æ–≤:", plans?.length || 0);
    
    return NextResponse.json({ 
      success: true, 
      data: plans || [],
      count: plans?.length || 0
    });
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤',
        data: []
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!body.name || !body.type || !body.duration || !body.price) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    }
    
    const planId = await convex.mutation("memberships:createPlan", body);
    
    return NextResponse.json({
      success: true,
      data: planId,
      message: '–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞:', error);
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞' 
      },
      { status: 500 }
    );
  }
}