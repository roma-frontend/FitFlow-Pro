// app/api/memberships/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");
    
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ query params
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç userId, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã
      console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");
      const plans = await convex.query("memberships:getPlans");
      
      console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞–Ω–æ–≤:", plans?.length || 0);
      
      return NextResponse.json({ 
        success: true, 
        data: plans || [],
        count: plans?.length || 0
      });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å userId, –ø–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
    const memberships = await convex.query("memberships:getUserMemberships", { userId });
    
    console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:", memberships?.length || 0);
    
    return NextResponse.json({ 
      success: true, 
      data: memberships || [],
      count: memberships?.length || 0
    });
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤',
        data: []
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ API POST: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞");
    
    const body = await request.json();
    console.log("üì¶ API POST: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId || !body.planId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, planId");
    }
    
    console.log("üìû API POST: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("memberships:create", {
      userId: body.userId,
      planId: body.planId,
      trainerId: body.trainerId,
      autoRenew: body.autoRenew || false,
      paymentIntentId: body.paymentIntentId,
      paymentMethod: body.paymentMethod
    });

    console.log("‚úÖ API POST: –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
  } catch (error) {
    console.error("‚ùå API POST: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞'
      },
      { status: 500 }
    );
  }
}