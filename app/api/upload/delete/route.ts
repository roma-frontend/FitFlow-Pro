// app/api/upload/delete/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è public_id –∏–∑ Cloudinary URL
function extractPublicIdFromUrl(url: string): string | null {
  try {
    // –ü—Ä–∏–º–µ—Ä—ã URL:
    // https://res.cloudinary.com/dgbtipi5o/image/upload/v1234567890/user-avatars/filename.jpg
    // https://res.cloudinary.com/dgbtipi5o/image/upload/user-avatars/filename.jpg
    
    const cloudinaryPattern = /cloudinary\.com\/[^\/]+\/image\/upload\/(?:v\d+\/)?(.+?)(?:\.[^.]+)?$/;
    const match = url.match(cloudinaryPattern);
    
    if (match && match[1]) {
      return match[1];
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ä–∞–∑–±–æ—Ä URL
    const urlParts = url.split('/');
    const uploadIndex = urlParts.findIndex(part => part === 'upload');
    
    if (uploadIndex !== -1 && uploadIndex < urlParts.length - 1) {
      let publicIdParts = urlParts.slice(uploadIndex + 1);
      
      // –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å (v1234567890)
      if (publicIdParts[0]?.startsWith('v') && /^v\d+$/.test(publicIdParts[0])) {
        publicIdParts = publicIdParts.slice(1);
      }
      
      // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const lastPart = publicIdParts[publicIdParts.length - 1];
      if (lastPart?.includes('.')) {
        publicIdParts[publicIdParts.length - 1] = lastPart.split('.')[0];
      }
      
      return publicIdParts.join('/');
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è public_id:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Cloudinary
async function deleteFromCloudinary(publicId: string): Promise<boolean> {
  try {
    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || 'dgbtipi5o';
    const apiKey = process.env.CLOUDINARY_API_KEY;
    const apiSecret = process.env.CLOUDINARY_API_SECRET;
    
    if (!apiKey || !apiSecret) {
      console.error('‚ùå Cloudinary API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const timestamp = Math.round(Date.now() / 1000);
    const crypto = require('crypto');
    
    const stringToSign = `public_id=${publicId}&timestamp=${timestamp}${apiSecret}`;
    const signature = crypto.createHash('sha1').update(stringToSign).digest('hex');
    
    const formData = new FormData();
    formData.append('public_id', publicId);
    formData.append('timestamp', timestamp.toString());
    formData.append('api_key', apiKey);
    formData.append('signature', signature);
    
    const deleteUrl = `https://api.cloudinary.com/v1_1/${cloudName}/image/destroy`;
    
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑ Cloudinary:', { publicId, timestamp });
    
    const response = await fetch(deleteUrl, {
      method: 'POST',
      body: formData,
    });
    
    const result = await response.json();
    console.log('üì° –û—Ç–≤–µ—Ç Cloudinary –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:', result);
    
    return result.result === 'ok';
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Cloudinary:', error);
    return false;
  }
}

export async function DELETE(request: NextRequest) {
  try {
    console.log('üóëÔ∏è DELETE /api/upload/delete - –Ω–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionToken = request.cookies.get('session_id')?.value;
    if (!sessionToken) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = await getSession(sessionToken);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
    const { searchParams } = new URL(request.url);
    const fileUrl = searchParams.get('url');
    
    if (!fileUrl) {
      return NextResponse.json({ error: 'URL —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' }, { status: 400 });
    }

    console.log('üìÑ URL —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', fileUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Cloudinary URL
    if (!fileUrl.includes('cloudinary.com')) {
      return NextResponse.json({ 
        success: true, 
        message: '–§–∞–π–ª –Ω–µ –∏–∑ Cloudinary, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è' 
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º public_id
    const publicId = extractPublicIdFromUrl(fileUrl);
    if (!publicId) {
      return NextResponse.json({ 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å public_id –∏–∑ URL',
        details: { url: fileUrl }
      }, { status: 400 });
    }

    console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π public_id:', publicId);

    // –£–¥–∞–ª—è–µ–º –∏–∑ Cloudinary
    const deleted = await deleteFromCloudinary(publicId);
    
    if (deleted) {
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Cloudinary');
      return NextResponse.json({
        success: true,
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Cloudinary',
        data: {
          url: fileUrl,
          publicId: publicId,
          deletedAt: new Date().toISOString(),
          deletedBy: sessionData.user.name
        }
      });
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Cloudinary');
      return NextResponse.json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Cloudinary',
        details: { publicId, url: fileUrl }
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}