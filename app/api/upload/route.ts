// app/api/upload/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { jwtVerify } from 'jose';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ POST /api/upload - –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    console.log('üìã Headers:', Object.fromEntries(request.headers.entries()));

    const sessionId = request.cookies.get('session_id')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const userRole = request.cookies.get('user_role')?.value;

    console.log('üç™ –ö—É–∫–∏:', {
      hasSessionId: !!sessionId,
      hasAuthToken: !!authToken,
      hasSessionIdDebug: !!sessionIdDebug,
      userRole
    });

    const jwtToken = sessionId || authToken || sessionIdDebug;

    if (!jwtToken) {
      console.log('‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–∫–∏');
      return NextResponse.json({
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        details: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
      }, { status: 401 });
    }

    // ‚úÖ –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é...');
    try {
      const secret = new TextEncoder().encode(
        process.env.JWT_SECRET || 'fallback-secret-key-change-in-production'
      );

      const { payload } = await jwtVerify(jwtToken, secret);
      console.log('‚úÖ JWT payload:', {
        userId: payload.userId,
        userRole: payload.userRole,
        userEmail: payload.userEmail,
        hasSessionData: !!payload.sessionData
      });
    } catch (jwtError) {
      console.error('‚ùå JWT –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', jwtError);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ getSession...');
    const sessionData = await getSession(jwtToken);

    if (!sessionData) {
      console.log('‚ùå Upload: JWT —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      console.log('üîç –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
        tokenLength: jwtToken.length,
        tokenStart: jwtToken.substring(0, 20) + '...',
        JWT_SECRET: process.env.JWT_SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'
      });

      return NextResponse.json({
        error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞',
        details: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É',
        debug: {
          hasJwtSecret: !!process.env.JWT_SECRET,
          tokenType: sessionId ? 'session_id' : authToken ? 'auth_token' : 'session_id_debug',
          userRole: userRole
        }
      }, { status: 401 });
    }

    console.log('‚úÖ Upload: JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞:', {
      userId: sessionData.user.id,
      role: sessionData.user.role,
      email: sessionData.user.email
    });

    // –ü–∞—Ä—Å–∏–º FormData
    console.log('üìã –ü–∞—Ä—Å–∏–º FormData...');
    const formData = await request.formData();
    const type = formData.get('type') as string || 'profile';
    const file = formData.get('file') as File;

    console.log('üìÅ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', {
      type,
      fileName: file?.name,
      fileSize: file?.size,
      fileType: file?.type
    });

    // –î–ª—è body-analysis —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if (type === 'body-analysis') {
      console.log('‚úÖ Upload: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö');
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
      const allowedRoles = ['super-admin', 'admin', 'manager', 'trainer'];

      // –î–ª—è —Ç–∏–ø–æ–≤ profile –∏ avatar —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–≤–∫–ª—é—á–∞—è member)
      if (type === 'profile' || type === 'avatar') {
        console.log('‚úÖ Upload: –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞/–ø—Ä–æ—Ñ–∏–ª—è - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', sessionData.user.role);
      } else if (!allowedRoles.includes(sessionData.user.role)) {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
        console.log('‚ùå Upload: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–∏–ø–∞:', type);
        return NextResponse.json({
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
          details: `–†–æ–ª—å ${sessionData.user.role} –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–∏–ø ${type}`
        }, { status: 403 });
      }
    }

    if (!file) {
      console.log('‚ùå Upload: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FormData');
      return NextResponse.json({
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
        details: '–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ FormData'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(file.type)) {
      console.log('‚ùå Upload: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type);
      return NextResponse.json({
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP, GIF',
        details: `–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø: ${file.type}`
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    const maxSize = 10 * 1024 * 1024;
    if (file.size > maxSize) {
      console.log('‚ùå Upload: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size);
      return NextResponse.json({
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB',
        details: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.size} –±–∞–π—Ç`
      }, { status: 400 });
    }

    console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || 'dgbtipi5o';
    if (!cloudName) {
      console.log('‚ùå Upload: CLOUDINARY_CLOUD_NAME –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞',
        details: 'Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      }, { status: 500 });
    }

    const uploadPreset = 'ml_default';
    const folder = type === 'body-analysis' ? 'body-analysis' : 'user-avatars';

    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Cloudinary:', {
      cloudName,
      uploadPreset,
      folder,
      fileName: file.name,
      fileSize: file.size
    });

    const cloudinaryFormData = new FormData();
    cloudinaryFormData.append('file', file);
    cloudinaryFormData.append('upload_preset', uploadPreset);
    cloudinaryFormData.append('folder', folder);

    const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cloudinary:', cloudinaryUrl);

    try {
      const cloudinaryResponse = await fetch(cloudinaryUrl, {
        method: 'POST',
        body: cloudinaryFormData,
      });

      const responseText = await cloudinaryResponse.text();
      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Cloudinary:', {
        status: cloudinaryResponse.status,
        ok: cloudinaryResponse.ok,
        statusText: cloudinaryResponse.statusText,
        responseLength: responseText.length
      });

      if (!cloudinaryResponse.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Cloudinary:', responseText);
        return NextResponse.json({
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary',
          details: responseText,
          cloudinaryStatus: cloudinaryResponse.status
        }, { status: 500 });
      }

      const cloudinaryData = JSON.parse(responseText);

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary:', {
        url: cloudinaryData.secure_url,
        publicId: cloudinaryData.public_id,
        width: cloudinaryData.width,
        height: cloudinaryData.height
      });

      const responseData = {
        success: true,
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
        url: cloudinaryData.secure_url,
        data: {
          fileName: cloudinaryData.public_id,
          originalName: file.name,
          size: file.size,
          type: file.type,
          url: cloudinaryData.secure_url,
          uploadedAt: new Date().toISOString(),
          uploadedBy: sessionData.user.name,
          userId: sessionData.user.id,
          uploadType: type,
          cloudinaryData: {
            publicId: cloudinaryData.public_id,
            width: cloudinaryData.width,
            height: cloudinaryData.height,
            format: cloudinaryData.format,
            bytes: cloudinaryData.bytes
          }
        }
      };

      console.log('üéâ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É');
      return NextResponse.json(responseData);

    } catch (cloudinaryError) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Cloudinary:', cloudinaryError);
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Cloudinary',
        details: cloudinaryError instanceof Error ? cloudinaryError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}