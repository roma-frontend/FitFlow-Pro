import { NextRequest, NextResponse } from 'next/server';

// –¢–∏–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface DashboardNotification {
  id: string;
  type: 'info' | 'warning' | 'error' | 'success';
  title: string;
  message: string;
  timestamp: string;
  read: boolean;
  actionUrl?: string;
  priority: 'low' | 'medium' | 'high';
  userId?: string;
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const getMockNotifications = (): DashboardNotification[] => {
  const now = new Date();
  
  return [
    {
      id: 'notif_' + Date.now() + '_1',
      type: 'warning',
      title: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
      message: '–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞ #3 —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
      timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'high',
      actionUrl: '/admin/equipment'
    },
    {
      id: 'notif_' + Date.now() + '_2',
      type: 'success',
      title: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
      message: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      timestamp: new Date(now.getTime() - 4 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'medium',
      actionUrl: '/admin/clients'
    },
    {
      id: 'notif_' + Date.now() + '_3',
      type: 'info',
      title: '–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤',
      message: '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É',
      timestamp: new Date(now.getTime() - 6 * 60 * 60 * 1000).toISOString(),
      read: true,
      priority: 'low',
      actionUrl: '/admin/reports'
    },
    {
      id: 'notif_' + Date.now() + '_4',
      type: 'error',
      title: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∫–ª–∏–µ–Ω—Ç–∞ ID: 12345',
      timestamp: new Date(now.getTime() - 8 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'high',
      actionUrl: '/admin/payments'
    },
    {
      id: 'notif_' + Date.now() + '_5',
      type: 'info',
      title: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      message: '–¢—Ä–µ–Ω–µ—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      timestamp: new Date(now.getTime() - 12 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'medium',
      actionUrl: '/admin/schedule'
    }
  ];
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
let notificationsStore: DashboardNotification[] = getMockNotifications();

// GET - –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '10');
    const unreadOnly = searchParams.get('unread') === 'true';
    const priority = searchParams.get('priority') as 'low' | 'medium' | 'high' | null;
    
    console.log('üì¨ API: –ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Dashboard', {
      limit,
      unreadOnly,
      priority
    });
    
    let filteredNotifications = [...notificationsStore];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏
    if (unreadOnly) {
      filteredNotifications = filteredNotifications.filter(n => !n.read);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (priority) {
      filteredNotifications = filteredNotifications.filter(n => n.priority === priority);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    filteredNotifications.sort((a, b) => 
      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const limitedNotifications = filteredNotifications.slice(0, limit);
    
    console.log('‚úÖ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', {
      total: notificationsStore.length,
      filtered: filteredNotifications.length,
      returned: limitedNotifications.length,
      unread: notificationsStore.filter(n => !n.read).length
    });
    
    return NextResponse.json({
      success: true,
      data: limitedNotifications,
      meta: {
        total: notificationsStore.length,
        filtered: filteredNotifications.length,
        unread: notificationsStore.filter(n => !n.read).length,
        highPriority: notificationsStore.filter(n => n.priority === 'high' && !n.read).length
      },
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// POST - –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üîÑ API: –û–ø–µ—Ä–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º:', body);
    
    if (body.notificationId && body.action === 'read') {
      // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
      const notificationIndex = notificationsStore.findIndex(n => n.id === body.notificationId);
      
      if (notificationIndex === -1) {
        return NextResponse.json({
          success: false,
          error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        }, { status: 404 });
      }
      
      notificationsStore[notificationIndex].read = true;
      
      console.log('‚úÖ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', body.notificationId);
      
      return NextResponse.json({
        success: true,
        data: notificationsStore[notificationIndex],
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'
      });
      
    } else if (body.type && body.title && body.message) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const newNotification: DashboardNotification = {
        id: 'notif_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
        type: body.type,
        title: body.title,
        message: body.message,
        timestamp: new Date().toISOString(),
        read: false,
        priority: body.priority || 'medium',
        actionUrl: body.actionUrl,
        userId: body.userId
      };
      
      notificationsStore.unshift(newNotification); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
      
      console.log('‚úÖ API: –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', newNotification.id);
      
      return NextResponse.json({
        success: true,
        data: newNotification,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ'
      });
      
    } else {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞'
      }, { status: 400 });
    }
    
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º',
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// DELETE - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const notificationId = searchParams.get('id');
    
    if (notificationId) {
      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const initialLength = notificationsStore.length;
      notificationsStore = notificationsStore.filter(n => n.id !== notificationId);
      
      if (notificationsStore.length === initialLength) {
        return NextResponse.json({
          success: false,
          error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        }, { status: 404 });
      }
      
      console.log('‚úÖ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', notificationId);
      
      return NextResponse.json({
        success: true,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
      });
      
    } else {
      // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const deletedCount = notificationsStore.length;
      notificationsStore = [];
      
      console.log('‚úÖ API: –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã:', deletedCount);
      
      return NextResponse.json({
        success: true,
        message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`,
        deletedCount
      });
    }
    
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
