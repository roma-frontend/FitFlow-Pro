import { NextRequest, NextResponse } from 'next/server';

// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
interface DashboardStats {
  totalClients: number;
  activeTrainers: number;
  todayEvents: number;
  monthlyRevenue: number;
  weeklyGrowth: number;
  clientRetention: number;
  averageRating: number;
  equipmentUtilization: number;
  totalUsers?: number;
  totalAdmins?: number;
  newClientsThisWeek?: number;
  monthlyEvents?: number;
  inactiveClients?: number;
  usersByRole?: Record<string, number>;
  lastUpdated: string;
  dataSource: string;
  generatedBy: string;
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const getMockStats = (): DashboardStats => {
  const now = new Date();
  
  return {
    totalClients: 156 + Math.floor(Math.random() * 10), // –ù–µ–±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è
    activeTrainers: 8,
    todayEvents: 24 + Math.floor(Math.random() * 5),
    monthlyRevenue: 485000 + Math.floor(Math.random() * 50000),
    weeklyGrowth: 12.5 + (Math.random() - 0.5) * 5,
    clientRetention: 87.3 + (Math.random() - 0.5) * 10,
    averageRating: 4.7 + (Math.random() - 0.5) * 0.6,
    equipmentUtilization: 73.2 + (Math.random() - 0.5) * 20,
    totalUsers: 164,
    totalAdmins: 3,
    newClientsThisWeek: 8,
    monthlyEvents: 156,
    inactiveClients: 12,
    usersByRole: {
      client: 156,
      trainer: 8,
      admin: 3
    },
    lastUpdated: now.toISOString(),
    dataSource: 'next-api',
    generatedBy: 'dashboard-stats-api'
  };
};

// GET - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function GET(request: NextRequest) {
  try {
    console.log('üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dashboard');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä: const stats = await db.getDashboardStats();
    
    const stats = getMockStats();
    
    console.log('‚úÖ API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Dashboard —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', {
      totalClients: stats.totalClients,
      todayEvents: stats.todayEvents,
      monthlyRevenue: stats.monthlyRevenue
    });
    
    return NextResponse.json({
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Dashboard –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dashboard:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// POST - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üîÑ API: –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', body);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    // const updatedStats = await db.updateDashboardStats(body);
    
    const updatedStats = {
      ...getMockStats(),
      ...body,
      lastUpdated: new Date().toISOString(),
      generatedBy: 'manual-update'
    };
    
    return NextResponse.json({
      success: true,
      data: updatedStats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
