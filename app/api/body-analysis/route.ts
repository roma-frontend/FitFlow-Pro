// app/api/body-analysis/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞");
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const type = searchParams.get('type') || 'current';
    
    if (!userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: userId");
    }
    
    console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId, "—Ç–∏–ø:", type);
    
    let data;
    
    switch (type) {
      case 'current':
        console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞");
        data = await convex.query("bodyAnalysis:getCurrentAnalysis", { userId });
        break;
        
      case 'progress':
        console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
        data = await convex.query("bodyAnalysis:getProgressCheckpoints", { userId });
        break;
        
      case 'leaderboard':
        console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π");
        data = await convex.query("bodyAnalysis:getTransformationLeaderboard");
        break;
        
      case 'history':
        console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤");
        const limit = searchParams.get('limit');
        data = await convex.query("bodyAnalysis:getAnalysisHistory", { 
          userId,
          limit: limit ? parseInt(limit) : undefined
        });
        break;
        
      default:
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${type}`);
    }
    
    console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞:", data ? '–¥–∞' : '–Ω–µ—Ç');
    
    return NextResponse.json({ 
      success: true, 
      data: data || null,
      type,
      count: Array.isArray(data) ? data.length : (data ? 1 : 0)
    });
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞',
        data: null
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ API POST: –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞");
    
    const body = await request.json();
    console.log("üì¶ API POST: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: userId");
    }
    
    console.log("üìû API POST: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("bodyAnalysis:saveBodyAnalysis", {
      userId: body.userId,
      weight: body.weight,
      height: body.height,
      bodyFat: body.bodyFat,
      muscleMass: body.muscleMass,
      visceralFat: body.visceralFat,
      boneMass: body.boneMass,
      waterPercentage: body.waterPercentage,
      metabolism: body.metabolism,
      measurements: body.measurements,
      photos: body.photos,
      goals: body.goals,
      notes: body.notes
    });

    console.log("‚úÖ API POST: –ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
    }, { status: 201 });
  } catch (error) {
    console.error("‚ùå API POST: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞'
      },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log("üîÑ API PUT: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞");
    
    const body = await request.json();
    console.log("üì¶ API PUT: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId || !body.analysisId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, analysisId");
    }
    
    console.log("üìû API PUT: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("bodyAnalysis:updateBodyAnalysis", {
      userId: body.userId,
      analysisId: body.analysisId,
      weight: body.weight,
      height: body.height,
      bodyFat: body.bodyFat,
      muscleMass: body.muscleMass,
      visceralFat: body.visceralFat,
      boneMass: body.boneMass,
      waterPercentage: body.waterPercentage,
      metabolism: body.metabolism,
      measurements: body.measurements,
      photos: body.photos,
      goals: body.goals,
      notes: body.notes
    });

    console.log("‚úÖ API PUT: –ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API PUT: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞'
      },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    console.log("üîÑ API DELETE: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞");
    
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const analysisId = searchParams.get('analysisId');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!userId || !analysisId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: userId, analysisId");
    }
    
    console.log("üìû API DELETE: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("bodyAnalysis:deleteBodyAnalysis", {
      userId,
      analysisId
    });

    console.log("‚úÖ API DELETE: –ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ —É–¥–∞–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API DELETE: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞'
      },
      { status: 500 }
    );
  }
}