// app/api/body-analysis/progress/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞");
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const dateFrom = searchParams.get('dateFrom');
    const dateTo = searchParams.get('dateTo');
    const limit = searchParams.get('limit');
    
    if (!userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: userId");
    }
    
    console.log("üìû API GET: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
    
    const progress = await convex.query("bodyAnalysis:getProgress", {
      userId,
      dateFrom: dateFrom || undefined,
      dateTo: dateTo || undefined,
      limit: limit ? parseInt(limit) : undefined
    });
    
    console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", progress?.length || 0);
    
    return NextResponse.json({ 
      success: true, 
      data: progress || [],
      count: progress?.length || 0
    });
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞',
        data: []
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ API POST: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞");
    
    const body = await request.json();
    console.log("üì¶ API POST: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: userId");
    }
    
    console.log("üìû API POST: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("bodyAnalysis:updateProgress", {
      userId: body.userId,
      weight: body.weight,
      bodyFat: body.bodyFat,
      muscleMass: body.muscleMass,
      measurements: body.measurements,
      photos: body.photos,
      notes: body.notes,
      date: body.date || new Date().toISOString()
    });

    console.log("‚úÖ API POST: –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API POST: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞'
      },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log("üîÑ API PUT: –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
    
    const body = await request.json();
    console.log("üì¶ API PUT: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.userId || !body.progressId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, progressId");
    }
    
    console.log("üìû API PUT: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("bodyAnalysis:editProgress", {
      userId: body.userId,
      progressId: body.progressId,
      weight: body.weight,
      bodyFat: body.bodyFat,
      muscleMass: body.muscleMass,
      measurements: body.measurements,
      photos: body.photos,
      notes: body.notes
    });

    console.log("‚úÖ API PUT: –ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞'
    });
  } catch (error) {
    console.error("‚ùå API PUT: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
      },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    console.log("üîÑ API DELETE: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
    
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const progressId = searchParams.get('progressId');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!userId || !progressId) {
      throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: userId, progressId");
    }
    
    console.log("üìû API DELETE: –í—ã–∑—ã–≤–∞–µ–º Convex mutation");
    
    const result = await convex.mutation("bodyAnalysis:deleteProgress", {
      userId,
      progressId
    });

    console.log("‚úÖ API DELETE: –ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∞:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error("‚ùå API DELETE: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
      },
      { status: 500 }
    );
  }
}