// app/member-login/MemberLoginContent.tsx - –° –õ–û–ê–î–ï–†–û–ú –ù–ê –ö–ù–û–ü–ö–ï
"use client";

import { useEffect, useState } from "react";
import { useAuthForm } from "@/hooks/useAuthForm";
import { AuthCard } from "@/components/auth/AuthCard";
import { ErrorAlert } from "@/components/auth/ErrorAlert";
import { FormField } from "@/components/auth/FormField";
import { SubmitButton } from "@/components/auth/SubmitButton";
import { AuthModeToggle } from "@/components/auth/AuthModeToggle";
import { FormStatusIndicator } from "@/components/auth/FormStatusIndicator";
import { SecurityInfo } from "@/components/auth/SecurityInfo";
import { DevelopmentTools } from "@/components/auth/DevelopmentTools";
import { useLoaderStore } from "@/stores/loaderStore";
import StaffLoginLoader from "@/app/staff-login/components/StaffLoginLoader";
import { OtherAuthOptions } from "@/components/auth/OtherAuthOptions";
import { ForgotPasswordForm } from "@/components/auth/ForgotPasswordForm";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Shield, Zap, Users, Sparkles, CheckCircle, ArrowRight, Loader2, Eye, Lock, Mail, User, Phone } from "lucide-react";
import { useRouter } from "next/navigation";
import SparklesButton from "./components/MemberLoginButton";
import { Input } from "@/components/ui/input";
import { GoogleLoginButton } from "@/components/auth/GoogleLoginButton";

export default function MemberLoginContent() {
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const router = useRouter();
  const { showLoader, hideLoader } = useLoaderStore();
  
  const { loaderType, loaderProps } = useLoaderStore();
  const isLoaderActive = loaderType !== null;

  const [isRedirectInProgress, setIsRedirectInProgress] = useState(false);

  const {
    isLogin,
    loading,
    error,
    emailValid,
    formData,
    validationStates,
    isValidating,
    isFormReady,
    isRedirecting,
    handleFieldChange,
    handleSubmit,
    toggleMode,
    fillFormData,
    clearForm,
    redirectParam,
  } = useAuthForm();

  useEffect(() => {
    const redirectFlag = sessionStorage.getItem('is_redirecting');
    if (redirectFlag === 'true') {
      setIsRedirectInProgress(true);
    }
  }, []);

  useEffect(() => {
    if (isRedirecting || isRedirectInProgress) {
      
      return;
    }
  }, [isRedirecting, isRedirectInProgress]);

  useEffect(() => {
    const checkGoogleOAuthReturn = () => {
      const googleLoginInProgress = sessionStorage.getItem('google_login_in_progress');
      const urlParams = new URLSearchParams(window.location.search);
      const code = urlParams.get('code');

      if (googleLoginInProgress === 'true' && code) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ Google OAuth –Ω–∞ member-login');

        const savedRedirect = sessionStorage.getItem('google_login_redirect');

        sessionStorage.removeItem('google_login_in_progress');
        sessionStorage.removeItem('google_login_is_staff');
        sessionStorage.removeItem('google_login_redirect');

        setTimeout(() => {
          hideLoader();
          const targetUrl = savedRedirect || "/member-dashboard";
          window.location.replace(targetUrl); // –ò—Å–ø–æ–ª—å–∑—É–µ–º replace –≤–º–µ—Å—Ç–æ href
        }, 2000);
      }
    };

    checkGoogleOAuthReturn();
  }, [hideLoader]);

  if (isRedirectInProgress || isLoaderActive || isRedirecting) {
    return null;
  }

  if (loaderType === "login" && loaderProps) {
    return (
      <StaffLoginLoader
        userRole={loaderProps.userRole || "member"}
        userName={loaderProps.userName || "–£—á–∞—Å—Ç–Ω–∏–∫"}
        dashboardUrl={loaderProps.dashboardUrl || "/member-dashboard"}
      />
    );
  }

  if (showForgotPassword) {
    return (
      <div className="min-h-[100svh] bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 flex items-center justify-center p-4">
        <div className="w-full max-w-sm">
          <ForgotPasswordForm
            onBack={() => setShowForgotPassword(false)}
            initialEmail={formData.email}
          />
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-[100svh] bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 flex items-center justify-center p-4">
        <ErrorAlert error={error} />
      </div>
    );
  }

  return (
    <div className="min-h-[100svh] bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 lg:bg-gradient-to-br lg:from-blue-50 lg:via-white lg:to-indigo-50">
      {/* üîß –ò–ù–î–ò–ö–ê–¢–û–† REDIRECT'–ê –í–í–ï–†–•–£ –°–¢–†–ê–ù–ò–¶–´ */}
      {redirectParam && (
        <div className="bg-blue-500/90 backdrop-blur-sm text-white text-center py-2 px-4">
          <p className="text-sm">
            üìç –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </p>
        </div>
      )}

      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <div className="lg:hidden">
        <div className="min-h-[100svh] flex flex-col">
          {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
          <div className="flex-1 flex flex-col justify-center px-6 py-8">

            {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <SparklesButton isLogin={isLogin} />

            {/* –§–æ—Ä–º–∞ –≤ card */}
            <div className="w-full max-w-sm mx-auto">
              <Card className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-3xl overflow-hidden">
                <CardContent className="p-6">
                  <ErrorAlert error={error} />

                  <form onSubmit={handleSubmit} className="space-y-4">
                    {!isLogin && (
                      <div className="relative">
                        <User className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                        <Input
                          type="text"
                          placeholder="–í–∞—à–µ –∏–º—è"
                          value={formData.name}
                          onChange={(e) => handleFieldChange("name", e.target.value)}
                          className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50/50 text-gray-900 placeholder-gray-500"
                          required
                        />
                      </div>
                    )}

                    <div className="relative">
                      <Mail className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                      <Input
                        type="email"
                        placeholder="Email –∞–¥—Ä–µ—Å"
                        value={formData.email}
                        onChange={(e) => handleFieldChange("email", e.target.value)}
                        className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50/50 text-gray-900 placeholder-gray-500"
                        required
                      />
                      {validationStates.email && validationStates.email.isValid && (
                        <CheckCircle className="absolute right-3 top-3 h-5 w-5 text-green-500" />
                      )}
                    </div>

                    <div className="relative">
                      <Lock className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                      <Input
                        type="password"
                        placeholder="–ü–∞—Ä–æ–ª—å"
                        value={formData.password}
                        onChange={(e) => handleFieldChange("password", e.target.value)}
                        className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50/50 text-gray-900 placeholder-gray-500"
                        required
                      />
                    </div>

                    {!isLogin && (
                      <div className="relative">
                        <Phone className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                        <Input
                          type="tel"
                          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                          value={formData.phone}
                          onChange={(e) => handleFieldChange("phone", e.target.value)}
                          className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50/50 text-gray-900 placeholder-gray-500"
                        />
                      </div>
                    )}

                    {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–∞–¥–µ—Ä —Ç–µ–ø–µ—Ä—å –Ω–∞ –∫–Ω–æ–ø–∫–µ, –∞ –Ω–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π */}
                    <button
                      type="submit"
                      disabled={loading || !isFormReady || isValidating}
                      className="w-full py-3 px-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white font-medium rounded-2xl hover:from-blue-700 hover:to-purple-700 focus:ring-4 focus:ring-blue-300 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"
                    >
                      {loading ? (
                        <div className="flex items-center justify-center">
                          <Loader2 className="h-5 w-5 animate-spin mr-2" />
                          {isRedirecting ? "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ..." : "–û–±—Ä–∞–±–æ—Ç–∫–∞..."}
                        </div>
                      ) : (
                        isLogin ? "–í–æ–π—Ç–∏" : "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
                      )}
                    </button>
                  </form>

                  {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ */}
                  <div className="mt-6 text-center">
                    <button
                      onClick={toggleMode}
                      disabled={loading || isValidating}
                      className="text-sm text-gray-600 hover:text-gray-900 transition-colors disabled:opacity-50"
                    >
                      {isLogin ? (
                        <>
                          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <span className="text-blue-600 font-medium">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</span>
                        </>
                      ) : (
                        <>
                          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <span className="text-blue-600 font-medium">–í–æ–π—Ç–∏</span>
                        </>
                      )}
                    </button>
                  </div>

                  {/* –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å */}
                  {isLogin && (
                    <div className="mt-3 text-center">
                      <button
                        onClick={() => setShowForgotPassword(true)}
                        disabled={loading}
                        className="text-sm text-gray-500 hover:text-gray-700 transition-colors disabled:opacity-50"
                      >
                        –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
                      </button>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              <div className="mt-6 space-y-3">
                <GoogleLoginButton
                  isStaff={false}
                  className="bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 transition-all text-white"
                />
                <button
                  onClick={() => {
                    const faceAuthUrl = redirectParam
                      ? `/auth/face-auth?redirect=${encodeURIComponent(redirectParam)}`
                      : '/auth/face-auth';
                    router.push(faceAuthUrl);
                  }}
                  disabled={loading}
                  className="w-full flex items-center justify-center p-3 bg-white/20 backdrop-blur-sm border border-white/30 rounded-2xl hover:bg-white/30 transition-all text-white disabled:opacity-50"
                >
                  <Eye className="h-5 w-5 mr-2" />
                  <span className="font-medium">Face ID –≤—Ö–æ–¥</span>
                </button>

                <button
                  onClick={() => {
                    const staffLoginUrl = redirectParam
                      ? `/staff-login?redirect=${encodeURIComponent(redirectParam)}`
                      : '/staff-login';
                    router.push(staffLoginUrl);
                  }}
                  disabled={loading}
                  className="w-full flex items-center justify-center p-3 bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl hover:bg-white/20 transition-all text-white/80 disabled:opacity-50"
                >
                  <Shield className="h-5 w-5 mr-2" />
                  <span className="font-medium">–í—Ö–æ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞</span>
                </button>
              </div>

              {/* –°—Ç–∞—Ç—É—Å—ã */}
              <div className="mt-6 flex justify-center space-x-4 text-xs text-white/60">
                <div className="flex items-center">
                  <span className="w-2 h-2 bg-green-400 rounded-full mr-2" />
                  <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ</span>
                </div>
                <div className="flex items-center">
                  <span className="w-2 h-2 bg-blue-400 rounded-full mr-2" />
                  <span>–ë—ã—Å—Ç—Ä–æ</span>
                </div>
                <div className="flex items-center">
                  <span className="w-2 h-2 bg-purple-400 rounded-full mr-2" />
                  <span>–ù–∞–¥–µ–∂–Ω–æ</span>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <div className="hidden lg:block py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto">

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              {isLogin ? "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitFlow Pro" : "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ FitFlow Pro"}
            </h1>
            <p className="text-lg text-gray-600">
              {isLogin ? "–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç" : "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤"}
            </p>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∏–¥–µ "–∫–Ω–∏–≥–∏" */}
          <div className="grid lg:grid-cols-2 gap-8 items-start">

            {/* –õ–µ–≤–∞—è "—Å—Ç—Ä–∞–Ω–∏—Ü–∞" - –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            <div className="order-1">
              <AuthCard isLogin={isLogin}>
                <ErrorAlert error={error} />

                <form onSubmit={handleSubmit} className="space-y-5">
                  {!isLogin && (
                    <FormField
                      fieldName="name"
                      label="–ü–æ–ª–Ω–æ–µ –∏–º—è"
                      placeholder="–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
                      type="text"
                      required
                      value={formData.name}
                      onChange={(value) => handleFieldChange("name", value)}
                      validationState={validationStates.name}
                      isLogin={isLogin}
                    />
                  )}

                  <FormField
                    fieldName="email"
                    label="Email –∞–¥—Ä–µ—Å"
                    placeholder="your@email.com"
                    type="email"
                    required
                    value={formData.email}
                    onChange={(value) => handleFieldChange("email", value)}
                    validationState={validationStates.email}
                    isValidating={isValidating}
                    isLogin={isLogin}
                  />

                  <FormField
                    fieldName="password"
                    label="–ü–∞—Ä–æ–ª—å"
                    placeholder={isLogin ? "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" : "–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"}
                    type="password"
                    required
                    value={formData.password}
                    onChange={(value) => handleFieldChange("password", value)}
                    validationState={validationStates.password}
                    isLogin={isLogin}
                  />

                  {!isLogin && (
                    <FormField
                      fieldName="phone"
                      label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                      placeholder="+7 (999) 123-45-67"
                      type="tel"
                      required={false}
                      value={formData.phone}
                      onChange={(value) => handleFieldChange("phone", value)}
                      validationState={validationStates.phone}
                      isLogin={isLogin}
                    />
                  )}

                  {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º SubmitButton, –Ω–æ —Å —É—á–µ—Ç–æ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
                  <SubmitButton
                    isLogin={isLogin}
                    loading={loading}
                    isFormReady={isFormReady}
                    isValidating={isValidating}
                    redirectParam={redirectParam}
                    isRedirecting={isRedirecting}
                  />
                </form>

                <AuthModeToggle
                  isLogin={isLogin}
                  onToggle={toggleMode}
                  loading={loading}
                  isValidating={isValidating}
                  onShowForgotPassword={() => setShowForgotPassword(true)}
                />

                <OtherAuthOptions loading={loading} />
              </AuthCard>

              {/* –°—Ç–∞—Ç—É—Å —Ñ–æ—Ä–º—ã –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π */}
              <div className="mt-6">
                <FormStatusIndicator
                  isFormReady={isFormReady}
                  isValidating={isValidating}
                  formData={formData}
                  emailValid={emailValid}
                  isLogin={isLogin}
                  validationStates={validationStates}
                />
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è "—Å—Ç—Ä–∞–Ω–∏—Ü–∞" - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
            <div className="order-1 lg:order-2 space-y-6">

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
              <SecurityInfo isLogin={isLogin} />

              {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
              <Card className="bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200 shadow-lg">
                <CardHeader>
                  <CardTitle className="text-lg text-purple-900 flex items-center">
                    <Sparkles className="h-5 w-5 mr-2" />
                    {isLogin ? "–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" : "–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç"}
                  </CardTitle>
                </CardHeader>
                <CardContent className="text-sm text-purple-800 space-y-3">
                  <div className="space-y-3">
                    <div className="flex items-start">
                      <CheckCircle className="h-4 w-4 text-purple-500 mr-3 mt-0.5 flex-shrink-0" />
                      <div>
                        <span className="font-medium">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</span>
                        <p className="text-xs text-purple-700 mt-1">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <CheckCircle className="h-4 w-4 text-purple-500 mr-3 mt-0.5 flex-shrink-0" />
                      <div>
                        <span className="font-medium">–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω</span>
                        <p className="text-xs text-purple-700 mt-1">–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <CheckCircle className="h-4 w-4 text-purple-500 mr-3 mt-0.5 flex-shrink-0" />
                      <div>
                        <span className="font-medium">–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</span>
                        <p className="text-xs text-purple-700 mt-1">–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <CheckCircle className="h-4 w-4 text-purple-500 mr-3 mt-0.5 flex-shrink-0" />
                      <div>
                        <span className="font-medium">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã</span>
                        <p className="text-xs text-purple-700 mt-1">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <CheckCircle className="h-4 w-4 text-purple-500 mr-3 mt-0.5 flex-shrink-0" />
                      <div>
                        <span className="font-medium">Face ID –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</span>
                        <p className="text-xs text-purple-700 mt-1">–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥</p>
                      </div>
                    </div>
                  </div>
                  <div className="mt-4 p-3 bg-white/60 rounded-lg border border-purple-200">
                    <p className="text-center font-medium text-purple-900">
                      {isLogin ? "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!" : "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é!"}
                    </p>
                  </div>
                </CardContent>
              </Card>

              {/* –ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ */}
              <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200 shadow-lg">
                <CardHeader>
                  <CardTitle className="text-lg text-green-900 flex items-center">
                    <Users className="h-5 w-5 mr-2" />
                    –ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
                  </CardTitle>
                </CardHeader>
                <CardContent className="text-sm text-green-800 space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">5,000+</div>
                      <div className="text-xs text-green-700">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">50+</div>
                      <div className="text-xs text-green-700">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">1,000+</div>
                      <div className="text-xs text-green-700">–ü—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">98%</div>
                      <div className="text-xs text-green-700">–î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                    </div>
                  </div>
                  <div className="mt-4 p-3 bg-white/60 rounded-lg border border-green-200">
                    <p className="text-center font-medium text-green-900">
                      ‚≠ê –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —É—Å–ø–µ—à–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!
                    </p>
                  </div>
                </CardContent>
              </Card>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200 shadow-lg">
                <CardHeader>
                  <CardTitle className="text-lg text-blue-900 flex items-center">
                    <Zap className="h-5 w-5 mr-2" />
                    –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <button
                    onClick={() => {
                      const faceAuthUrl = redirectParam
                        ? `/auth/face-auth?redirect=${encodeURIComponent(redirectParam)}`
                        : '/auth/face-auth';
                      router.push(faceAuthUrl);
                    }}
                    disabled={loading}
                    className="w-full flex items-center justify-between p-3 bg-gradient-to-r from-purple-500/10 to-blue-500/10 border border-purple-300/30 rounded-lg hover:from-purple-500/20 hover:to-blue-500/20 transition-all text-left disabled:opacity-50"
                  >
                    <div className="flex items-center">
                      <Shield className="h-4 w-4 text-purple-600 mr-3" />
                      <div>
                        <div className="font-medium text-blue-900">Face ID –≤—Ö–æ–¥</div>
                        <div className="text-xs text-blue-700">–í–æ–π—Ç–∏ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã</div>
                      </div>
                    </div>
                    <ArrowRight className="h-4 w-4 text-blue-600" />
                  </button>

                  <button
                    onClick={() => {
                      const staffLoginUrl = redirectParam
                        ? `/staff-login?redirect=${encodeURIComponent(redirectParam)}`
                        : '/staff-login';
                      router.push(staffLoginUrl);
                    }}
                    disabled={loading}
                    className="w-full flex items-center justify-between p-3 bg-gradient-to-r from-gray-100 to-gray-200 border border-gray-300 rounded-lg hover:from-gray-200 hover:to-gray-300 transition-all text-left disabled:opacity-50"
                  >
                    <div className="flex items-center">
                      <Users className="h-4 w-4 text-gray-600 mr-3" />
                      <div>
                        <div className="font-medium text-gray-900">–í—Ö–æ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞</div>
                        <div className="text-xs text-gray-700">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</div>
                      </div>
                    </div>
                    <ArrowRight className="h-4 w-4 text-gray-600" />
                  </button>
                </CardContent>
              </Card>

              {/* Development Tools (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ) */}
              <DevelopmentTools
                isLogin={isLogin}
                loading={loading}
                isValidating={isValidating}
                onFillData={fillFormData}
                onClearForm={clearForm}
                onShowForgotPassword={() => setShowForgotPassword(true)}
              />

            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É */}
          <div className="mt-12 text-center">
            <Card className="bg-gradient-to-r from-gray-50 to-gray-100 border-gray-200 shadow-sm">
              <CardContent className="py-6">
                <div className="flex flex-col sm:flex-row items-center justify-center gap-6 text-sm text-gray-600">
                  <div className="flex items-center">
                    <span className="w-2 h-2 bg-green-500 rounded-full mr-2" />
                    <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</span>
                  </div>
                  <div className="flex items-center">
                    <span className="w-2 h-2 bg-blue-500 rounded-full mr-2" />
                    <span>–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
                  </div>
                  <div className="flex items-center">
                    <span className="w-2 h-2 bg-purple-500 rounded-full mr-2" />
                    <span>24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
                  </div>
                  <div className="flex items-center">
                    <span className="w-2 h-2 bg-orange-500 rounded-full mr-2" />
                    <span>–û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

        </div>
      </div>
    </div>
  );
}