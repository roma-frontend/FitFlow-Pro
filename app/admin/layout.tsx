// app/admin/layout.tsx
"use client";

import { useState, useEffect, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import { useUnifiedData } from "@/contexts/UnifiedDataContext";
import { useRoleTexts, getContextualHints } from "@/lib/roleTexts";
import { SuperAdminProvider } from "@/contexts/SuperAdminContext";
import { QueryProvider } from "@/components/providers/QueryProvider";
import FitnessLoader from '@/components/ui/FitnessLoader';

import { useWelcomeToast } from "@/hooks/useWelcomeToast";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { Sidebar } from "@/components/admin/layout/Sidebar";
import { MobileHeader } from "@/components/admin/layout/MobileHeader";
import { MobileMenu } from "@/components/admin/layout/MobileMenu";

import {
  LayoutDashboard,
  Users,
  Calendar,
  BarChart3,
  Settings,
  CheckCircle,
  AlertTriangle,
  RefreshCw,
  MessageCircle,
  Package,
  Shield,
} from "lucide-react";
import { GlobalNotifications } from "@/components/admin/layout/GlobalNotifications";
import { PersonalizedTooltips } from "@/components/admin/layout/PersonalizedTooltips";

// –•—É–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const useIsMobile = () => {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 1024);
    };

    checkIsMobile();
    window.addEventListener('resize', checkIsMobile);
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  return isMobile;
};

function AdminLayoutContent({ children }: { children: React.ReactNode }) {
  useWelcomeToast();
  const { user, loading: authLoading, refreshUser } = useAuth();
  const router = useRouter();
  const userRole = user?.role;
  const roleTexts = useRoleTexts(userRole);
  const isMobile = useIsMobile();

  const {
    events,
    loading: scheduleLoading,
    error: scheduleError,
    isOnline,
    retryCount,
    lastSync,
    syncAllData,
  } = useUnifiedData();

  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const hints = getContextualHints(userRole);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const initializeAuth = async () => {
      console.log('üîç AdminLayout: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const storedUser = localStorage.getItem('auth_user');
      const storedToken = localStorage.getItem('auth_token');

      if (!storedUser || !storedToken) {
        console.log('‚ùå AdminLayout: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }

      // –ï—Å–ª–∏ user –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      if (!user && !authLoading) {
        console.log('üîÑ AdminLayout: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await refreshUser();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (user) {
        const adminRoles = ['admin', 'super-admin', 'manager', 'trainer'];
        if (!adminRoles.includes(user.role)) {
          console.log('‚ùå AdminLayout: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
          router.push('/unauthorized');
          return;
        }
        setIsInitialized(true);
      }
    };

    initializeAuth();
  }, [user, authLoading, refreshUser, router]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const hasPermission = (resource: string, action: string) => {
    if (!userRole) return false;

    switch (userRole) {
      case "super-admin":
        return true;
      case "admin":
        return true;
      case "manager":
        return [
          "users",
          "schedule",
          "messages",
          "analytics",
          "products",
        ].includes(resource);
      case "trainer":
        return ["schedule", "messages"].includes(resource);
      case "member":
      case "client":
        return ["schedule", "messages"].includes(resource);
      default:
        return false;
    }
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const navigationItems = useMemo(() => {
    if (!userRole) return [];

    const items = [
      {
        href: "/admin",
        label: roleTexts.dashboardTitle,
        icon: LayoutDashboard,
        permission: null,
      },
      {
        href: "/admin/users",
        label: roleTexts.usersTitle,
        icon: Users,
        permission: { resource: "users", action: "read" },
      },
      {
        href: "/admin/products",
        label: roleTexts.productsTitle,
        icon: Package,
        permission: { resource: "products", action: "read" },
      },
      {
        href: "/admin/analytics",
        label: roleTexts.reportsTitle,
        icon: BarChart3,
        permission: { resource: "analytics", action: "read" },
      },
      {
        href: "/admin/schedule",
        label: roleTexts.scheduleTitle,
        icon: Calendar,
        permission: { resource: "schedule", action: "read" },
      },
      {
        href: "/admin/messages",
        label: roleTexts.messagesTitle,
        icon: MessageCircle,
        permission: { resource: "messages", action: "read" },
      },
      {
        href: "/admin/settings",
        label: roleTexts.settingsTitle,
        icon: Settings,
        permission: { resource: "settings", action: "read" },
      },
      {
        label: roleTexts.resetPasswordTitle,
        href: "/admin/password-reset",
        icon: Shield,
        description: roleTexts.resetPasswordDescription,
        permission: null,
      },
    ];

    return items.filter((item) => {
      if (!item.permission) return true;
      return hasPermission(item.permission.resource, item.permission.action);
    });
  }, [userRole, roleTexts]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞
  const sidebarStats = useMemo(() => {
    const today = new Date();
    const todayEvents = events.filter((event) => {
      try {
        const eventDate = new Date(event.startTime);
        return eventDate.toDateString() === today.toDateString();
      } catch {
        return false;
      }
    });

    const thisWeekEvents = events.filter((event) => {
      try {
        const eventDate = new Date(event.startTime);
        const weekStart = new Date(today);
        weekStart.setDate(today.getDate() - today.getDay());
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        return eventDate >= weekStart && eventDate <= weekEnd;
      } catch {
        return false;
      }
    });

    const completionRate =
      events.length > 0
        ? Math.round(
          (events.filter((e) => e.status === "completed").length /
            events.length) *
          100
        )
        : 0;

    return {
      totalEvents: events.length,
      todayEvents: todayEvents.length,
      weekEvents: thisWeekEvents.length,
      completionRate,
    };
  }, [events]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
  const systemStatus = useMemo(() => {
    if (scheduleError) {
      return {
        text:
          roleTexts.warningMessages?.offlineMode ||
          "–†–∞–±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ",
        color: "text-red-600",
        bgColor: "from-red-50 to-red-100",
        icon: AlertTriangle,
      };
    }

    if (isOnline) {
      return {
        text:
          userRole === "super-admin"
            ? "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
            : "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        color: "text-green-600",
        bgColor: "from-green-50 to-green-100",
        icon: CheckCircle,
      };
    }

    return {
      text: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...",
      color: "text-yellow-600",
      bgColor: "from-yellow-50 to-yellow-100",
      icon: RefreshCw,
    };
  }, [scheduleError, isOnline, userRole, roleTexts]);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (!authLoading && !user) {
    if (isMobile) {
      return (
        <FitnessLoader
          isMobile={true}
          theme="staff"
          size="lg"
          variant="heartbeat"
          text="–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"
          showProgress={false}
          motivationalTexts={[
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...",
            "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"
          ]}
        />
      );
    }
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (isInitialized && navigationItems.length === 0) {
    if (isMobile) {
      return (
        <FitnessLoader
          isMobile={true}
          theme="staff"
          size="lg"
          variant="yoga"
          text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
          showProgress={false}
          motivationalTexts={[
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...",
            "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"
          ]}
        />
      );
    }
  }

  return (
    <div className="min-h-[100svh] bg-gradient-to-br from-gray-50 to-blue-50">
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è —à–∞–ø–∫–∞ */}
      <MobileHeader
        roleTexts={roleTexts}
        onMenuOpen={() => setSidebarOpen(true)}
      />

      <div className="relative flex">
        {/* –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é */}
        <MobileMenu
          isOpen={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
          navigationItems={navigationItems}
          user={user}
        />

        {/* –°–∞–π–¥–±–∞—Ä */}
        <Sidebar
          user={user}
          roleTexts={roleTexts}
          navigationItems={navigationItems}
          sidebarStats={sidebarStats}
          systemStatus={systemStatus}
          isOnline={isOnline}
          lastSync={lastSync}
          retryCount={retryCount}
          scheduleError={scheduleError}
          scheduleLoading={scheduleLoading}
          syncAllData={syncAllData}
          hints={hints}
        />

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <main className="static flex-1">
          <div className="max-w-7xl mx-auto p-4 lg:p-6">
            {children}
          </div>
        </main>
      </div>

      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <GlobalNotifications
        lastSync={lastSync}
        scheduleLoading={scheduleLoading}
        scheduleError={scheduleError}
        roleTexts={roleTexts}
      />

      {/* –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <PersonalizedTooltips userRole={userRole ?? ''} />
    </div>
  );
}

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <SuperAdminProvider>
      <QueryProvider>
        <AdminLayoutContent>{children}</AdminLayoutContent>
      </QueryProvider>
    </SuperAdminProvider>
  );
}