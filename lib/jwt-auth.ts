// lib/jwt-auth.ts

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–∏
const isNodeEnvironment = typeof window === 'undefined';

export interface JWTPayload {
    userId: string;
    email: string;
    name: string;
    role: string;
    iat?: number;
    exp?: number;
}

export interface TokenData {
    userId: string;
    email: string;
    name: string;
    role: string;
}

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
const JWT_EXPIRES_IN = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è JWT –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–±–µ–∑ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∏)
 * –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É JWT –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
class SimpleJWT {
    private static encode(payload: any): string {
        return btoa(JSON.stringify(payload)).replace(/=/g, '');
    }

    static create(payload: TokenData): string {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + Math.floor(JWT_EXPIRES_IN / 1000);

        const header = {
            alg: 'HS256',
            typ: 'JWT'
        };

        const jwtPayload = {
            ...payload,
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: 'fitness-users'
        };

        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '');

        // –ü—Ä–æ—Å—Ç–∞—è "–ø–æ–¥–ø–∏—Å—å" (–Ω–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è)
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}`).replace(/=/g, '');

        return `${encodedHeader}.${encodedPayload}.${signature}`;
    }

    static verify(token: string): JWTPayload | null {
        try {
            if (!token) return null;

            const cleanToken = token.replace(/^Bearer\s+/, '');
            const parts = cleanToken.split('.');

            if (parts.length !== 3) return null;

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞');
                return null;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));
            if (!payload) return null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
                return null;
            }

            return payload;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    static decode(token: string): JWTPayload | null {
        try {
            const cleanToken = token.replace(/^Bearer\s+/, '');
            const parts = cleanToken.split('.');

            if (parts.length !== 3) return null;

            const padding = '='.repeat((4 - (parts[1].length % 4)) % 4);
            return JSON.parse(atob(parts[1] + padding));
        } catch {
            return null;
        }
    }
}

/**
 * Node.js JWT —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (—Å –Ω–∞—Å—Ç–æ—è—â–µ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π)
 */
class NodeJWT {
    static async create(payload: TokenData): Promise<string> {
        if (!isNodeEnvironment) {
            throw new Error('NodeJWT –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ Node.js');
        }

        try {
            const jwt = await import('jsonwebtoken');

            return jwt.sign(
                {
                    userId: payload.userId,
                    email: payload.email,
                    name: payload.name,
                    role: payload.role,
                },
                JWT_SECRET,
                {
                    expiresIn: '7d',
                    issuer: 'fitness-app',
                    audience: 'fitness-users',
                }
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω');
        }
    }

    static async verify(token: string): Promise<JWTPayload | null> {
        if (!isNodeEnvironment) {
            throw new Error('NodeJWT –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ Node.js');
        }

        try {
            const jwt = await import('jsonwebtoken');
            const cleanToken = token.replace(/^Bearer\s+/, '');

            const decoded = jwt.verify(cleanToken, JWT_SECRET, {
                issuer: 'fitness-app',
                audience: 'fitness-users',
            }) as JWTPayload;

            return decoded;
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    static async decode(token: string): Promise<JWTPayload | null> {
        if (!isNodeEnvironment) {
            throw new Error('NodeJWT –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ Node.js');
        }

        try {
            const jwt = await import('jsonwebtoken');
            const cleanToken = token.replace(/^Bearer\s+/, '');
            return jwt.decode(cleanToken) as JWTPayload;
        } catch {
            return null;
        }
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω
 */
export function createToken(payload: TokenData): string {
    try {
        if (isNodeEnvironment) {
            // –í Node.js –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π JWT (–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            return SimpleJWT.create(payload);
        } else {
            // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
            return SimpleJWT.create(payload);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
 */
export function verifyToken(token: string): Promise<JWTPayload | null> {
    return new Promise((resolve) => {
        try {
            if (isNodeEnvironment) {
                // –í Node.js –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π JWT
                NodeJWT.verify(token)
                    .then(resolve)
                    .catch(() => resolve(null));
            } else {
                // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                const result = SimpleJWT.verify(token);
                resolve(result);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            resolve(null);
        }
    });
}

/**
 * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
 */
export function decodeToken(token: string): JWTPayload | null {
    try {
        return SimpleJWT.decode(token);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
 */
export function isTokenExpired(token: string): boolean {
    try {
        const decoded = decodeToken(token);
        if (!decoded || !decoded.exp) {
            return true;
        }

        const currentTime = Math.floor(Date.now() / 1000);
        return decoded.exp < currentTime;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return true;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
 */
export function getTokenExpiration(token: string): Date | null {
    try {
        const decoded = decodeToken(token);
        if (!decoded || !decoded.exp) {
            return null;
        }

        return new Date(decoded.exp * 1000);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω
 */
export async function refreshToken(oldToken: string): Promise<string | null> {
    try {
        const decoded = await verifyToken(oldToken);
        if (!decoded) {
            return null;
        }

        const newToken = createToken({
            userId: decoded.userId,
            email: decoded.email,
            name: decoded.name,
            role: decoded.role,
        });

        console.log(`üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${decoded.email}`);
        return newToken;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
 */
export function extractTokenFromHeader(authHeader: string | undefined): string | null {
    if (!authHeader) {
        return null;
    }

    const parts = authHeader.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer') {
        return null;
    }

    return parts[1];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization —Å —Ç–æ–∫–µ–Ω–æ–º
 */
export function createAuthHeader(token: string): string {
    return `Bearer ${token}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function hasRole(token: string, requiredRole: string | string[]): boolean {
    try {
        const decoded = decodeToken(token);
        if (!decoded) {
            return false;
        }

        const roles = Array.isArray(requiredRole) ? requiredRole : [requiredRole];
        return roles.includes(decoded.role);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏:', error);
        return false;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
 */
export function getUserIdFromToken(token: string): string | null {
    try {
        const decoded = decodeToken(token);
        return decoded?.userId || null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
 */
export function getEmailFromToken(token: string): string | null {
    try {
        const decoded = decodeToken(token);
        return decoded?.email || null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –∏–∑ —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
 */
export function isValidTokenFormat(token: string): boolean {
    if (!token || typeof token !== 'string') {
        return false;
    }

    const parts = token.split('.');
    return parts.length === 3;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 */
export function createPasswordResetToken(userId: string, email: string): string {
    try {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + (60 * 60); // 1 —á–∞—Å

        const payload = {
            userId,
            email,
            type: 'password_reset',
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: 'password-reset'
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.reset`).replace(/=/g, '');

        console.log(`üîë –¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å–æ–∑–¥–∞–Ω –¥–ª—è: ${email}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 */
export function verifyPasswordResetToken(token: string): Promise<{ userId: string; email: string } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è reset —Ç–æ–∫–µ–Ω–∞
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.reset`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== 'password_reset') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ –¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫');
                resolve(null);
                return;
            }

            console.log(`‚úÖ –¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è: ${payload.email}`);
            resolve({
                userId: payload.userId,
                email: payload.email,
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
            resolve(null);
        }
    });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
 */
export function createEmailVerificationToken(userId: string, email: string): string {
    try {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + (24 * 60 * 60); // 24 —á–∞—Å–∞

        const payload = {
            userId,
            email,
            type: 'email_verification',
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: 'email-verification'
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.email`).replace(/=/g, '');

        console.log(`üìß –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —Å–æ–∑–¥–∞–Ω –¥–ª—è: ${email}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
 */
export function verifyEmailVerificationToken(token: string): Promise<{ userId: string; email: string } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è email —Ç–æ–∫–µ–Ω–∞
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.email`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== 'email_verification') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email');
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∏—Å—Ç–µ–∫');
                resolve(null);
                return;
            }

            console.log(`‚úÖ –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è: ${payload.email}`);
            resolve({
                userId: payload.userId,
                email: payload.email,
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
            resolve(null);
        }
    });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)
 */
export function createTemporaryToken(userId: string, purpose: string, expiresInMinutes: number = 15): string {
    try {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + (expiresInMinutes * 60);

        const payload = {
            userId,
            purpose,
            type: 'temporary',
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: 'temporary-access'
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.temp`).replace(/=/g, '');

        console.log(`‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ü–µ–ª—å: ${purpose}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
 */
export function verifyTemporaryToken(token: string, expectedPurpose?: string): Promise<{ userId: string; purpose: string } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.temp`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== 'temporary') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if (expectedPurpose && payload.purpose !== expectedPurpose) {
                console.warn(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å —Ç–æ–∫–µ–Ω–∞. –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedPurpose}, –ø–æ–ª—É—á–µ–Ω–æ: ${payload.purpose}`);
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
                resolve(null);
                return;
            }

            console.log(`‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payload.userId}, —Ü–µ–ª—å: ${payload.purpose}`);
            resolve({
                userId: payload.userId,
                purpose: payload.purpose,
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
            resolve(null);
        }
    });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
 */
export function getTokenInfo(token: string): {
    header: any;
    payload: any;
    isExpired: boolean;
    timeToExpiry: number;
} | null {
    try {
        const parts = token.split('.');
        if (parts.length !== 3) {
            return null;
        }

        const [headerPart, payloadPart] = parts;

        const headerPadding = '='.repeat((4 - (headerPart.length % 4)) % 4);
        const payloadPadding = '='.repeat((4 - (payloadPart.length % 4)) % 4);

        const header = JSON.parse(atob(headerPart + headerPadding));
        const payload = JSON.parse(atob(payloadPart + payloadPadding));

        const now = Math.floor(Date.now() / 1000);
        const isExpired = payload.exp ? payload.exp < now : false;
        const timeToExpiry = payload.exp ? (payload.exp - now) * 1000 : 0;

        return {
            header,
            payload,
            isExpired,
            timeToExpiry
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ:', error);
        return null;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è API –¥–æ—Å—Ç—É–ø–∞ (–±–µ–∑ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
 */
export function createApiToken(userId: string, permissions: string[]): string {
    try {
        const now = Math.floor(Date.now() / 1000);

        const payload = {
            userId,
            permissions,
            type: 'api_access',
            iat: now,
            iss: 'fitness-app',
            aud: 'api-access'
            // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º exp –¥–ª—è API —Ç–æ–∫–µ–Ω–æ–≤
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.api`).replace(/=/g, '');

        console.log(`üîë API —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –ø—Ä–∞–≤–∞–º–∏: ${permissions.join(', ')}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API —Ç–æ–∫–µ–Ω');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API —Ç–æ–∫–µ–Ω
 */
export function verifyApiToken(token: string): Promise<{ userId: string; permissions: string[] } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è API —Ç–æ–∫–µ–Ω–∞
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.api`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å API —Ç–æ–∫–µ–Ω–∞');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== 'api_access') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø API —Ç–æ–∫–µ–Ω–∞');
                resolve(null);
                return;
            }

            console.log(`‚úÖ API —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payload.userId}`);
            resolve({
                userId: payload.userId,
                permissions: payload.permissions || [],
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ç–æ–∫–µ–Ω–∞:', error);
            resolve(null);
        }
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ API —Ç–æ–∫–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
 */
export async function hasApiPermission(token: string, requiredPermission: string): Promise<boolean> {
    try {
        const tokenData = await verifyApiToken(token);
        if (!tokenData) {
            return false;
        }

        return tokenData.permissions.includes(requiredPermission) || tokenData.permissions.includes('*');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è API:', error);
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export function create2FAToken(userId: string, method: 'sms' | 'email' | 'app'): string {
    try {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + (5 * 60); // 5 –º–∏–Ω—É—Ç –¥–ª—è 2FA

        const payload = {
            userId,
            method,
            type: '2fa_verification',
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: '2fa-verification'
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.2fa`).replace(/=/g, '');

        console.log(`üîê 2FA —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –º–µ—Ç–æ–¥: ${method}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 2FA —Ç–æ–∫–µ–Ω–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å 2FA —Ç–æ–∫–µ–Ω');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç 2FA —Ç–æ–∫–µ–Ω
 */
export function verify2FAToken(token: string): Promise<{ userId: string; method: string } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è 2FA —Ç–æ–∫–µ–Ω–∞
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.2fa`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å 2FA —Ç–æ–∫–µ–Ω–∞');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== '2fa_verification') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø 2FA —Ç–æ–∫–µ–Ω–∞');
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ 2FA —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
                resolve(null);
                return;
            }

            console.log(`‚úÖ 2FA —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payload.userId}, –º–µ—Ç–æ–¥: ${payload.method}`);
            resolve({
                userId: payload.userId,
                method: payload.method,
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA —Ç–æ–∫–µ–Ω–∞:', error);
            resolve(null);
        }
    });
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ (–∑–∞—â–∏—Ç–∞ –æ—Ç timing attacks)
 */
function safeStringCompare(a: string, b: string): boolean {
    if (a.length !== b.length) {
        return false;
    }

    let result = 0;
    for (let i = 0; i < a.length; i++) {
        result |= a.charCodeAt(i) ^ b.charCodeAt(i);
    }

    return result === 0;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω–∞—Ö
 */
export function generateRandomString(length: number = 32): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';

    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const array = new Uint8Array(length);
        crypto.getRandomValues(array);

        for (let i = 0; i < length; i++) {
            result += chars[array[i] % chars.length];
        }
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        for (let i = 0; i < length; i++) {
            result += chars[Math.floor(Math.random() * chars.length)];
        }
    }

    return result;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JWT —Ç–æ–∫–µ–Ω–∞
 */
export function validateTokenStructure(token: string): {
    valid: boolean;
    errors: string[];
} {
    const errors: string[] = [];

    if (!token || typeof token !== 'string') {
        errors.push('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π');
        return { valid: false, errors };
    }

    const parts = token.split('.');
    if (parts.length !== 3) {
        errors.push('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏');
        return { valid: false, errors };
    }

    const [header, payload, signature] = parts;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    try {
        const headerPadding = '='.repeat((4 - (header.length % 4)) % 4);
        const decodedHeader = JSON.parse(atob(header + headerPadding));

        if (!decodedHeader.alg || !decodedHeader.typ) {
            errors.push('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å alg –∏ typ');
        }

        if (decodedHeader.typ !== 'JWT') {
            errors.push('–¢–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JWT');
        }
    } catch {
        errors.push('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–∫–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    try {
        const payloadPadding = '='.repeat((4 - (payload.length % 4)) % 4);
        const decodedPayload = JSON.parse(atob(payload + payloadPadding));

        if (!decodedPayload.iss) {
            errors.push('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–¥–∞—Ç–µ–ª—è (iss)');
        }

        if (!decodedPayload.iat) {
            errors.push('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ (iat)');
        }
    } catch {
        errors.push('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É —Ç–æ–∫–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if (!signature || signature.length < 10) {
        errors.push('–ü–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è');
    }

    return {
        valid: errors.length === 0,
        errors
    };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
 */
export function getTokenMetadata(token: string): {
    type: string;
    issuer: string;
    audience: string;
    issuedAt: Date | null;
    expiresAt: Date | null;
    algorithm: string;
    subject?: string;
} | null {
    try {
        const info = getTokenInfo(token);
        if (!info) return null;

        return {
            type: info.payload.type || 'access',
            issuer: info.payload.iss || 'unknown',
            audience: info.payload.aud || 'unknown',
            issuedAt: info.payload.iat ? new Date(info.payload.iat * 1000) : null,
            expiresAt: info.payload.exp ? new Date(info.payload.exp * 1000) : null,
            algorithm: info.header.alg || 'unknown',
            subject: info.payload.sub
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ—Ä–æ –ª–∏ –∏—Å—Ç–µ—á–µ—Ç —Ç–æ–∫–µ–Ω
 */
export function isTokenExpiringSoon(token: string, minutesThreshold: number = 15): boolean {
    try {
        const info = getTokenInfo(token);
        if (!info || !info.payload.exp) return false;

        const thresholdMs = minutesThreshold * 60 * 1000;
        return info.timeToExpiry <= thresholdMs && info.timeToExpiry > 0;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
 */
export function createSessionRecoveryToken(sessionId: string, userId: string): string {
    try {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + (30 * 60); // 30 –º–∏–Ω—É—Ç

        const payload = {
            sessionId,
            userId,
            type: 'session_recovery',
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: 'session-recovery'
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.recovery`).replace(/=/g, '');

        console.log(`üîÑ –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
 */
export function verifySessionRecoveryToken(token: string): Promise<{ sessionId: string; userId: string } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.recovery`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== 'session_recovery') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫');
                resolve(null);
                return;
            }

            console.log(`‚úÖ –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payload.userId}`);
            resolve({
                sessionId: payload.sessionId,
                userId: payload.userId,
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            resolve(null);
        }
    });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function createInvitationToken(invitedBy: string, email: string, role: string): string {
    try {
        const now = Math.floor(Date.now() / 1000);
        const exp = now + (7 * 24 * 60 * 60); // 7 –¥–Ω–µ–π

        const payload = {
            invitedBy,
            email,
            role,
            type: 'invitation',
            iat: now,
            exp: exp,
            iss: 'fitness-app',
            aud: 'user-invitation'
        };

        const header = { alg: 'HS256', typ: 'JWT' };
        const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
        const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
        const signature = btoa(`${encodedHeader}.${encodedPayload}.${JWT_SECRET}.invite`).replace(/=/g, '');

        console.log(`üìß –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω –¥–ª—è ${email} —Å —Ä–æ–ª—å—é ${role}`);
        return `${encodedHeader}.${encodedPayload}.${signature}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
 */
export function verifyInvitationToken(token: string): Promise<{ invitedBy: string; email: string; role: string } | null> {
    return new Promise((resolve) => {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                resolve(null);
                return;
            }

            const [headerPart, payloadPart, signaturePart] = parts;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const expectedSignature = btoa(`${headerPart}.${payloadPart}.${JWT_SECRET}.invite`).replace(/=/g, '');
            if (signaturePart !== expectedSignature) {
                console.warn('üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                resolve(null);
                return;
            }

            const padding = '='.repeat((4 - (payloadPart.length % 4)) % 4);
            const payload = JSON.parse(atob(payloadPart + padding));

            if (payload.type !== 'invitation') {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                resolve(null);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.warn('‚è∞ –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫');
                resolve(null);
                return;
            }

            console.log(`‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–ª—è ${payload.email}`);
            resolve({
                invitedBy: payload.invitedBy,
                email: payload.email,
                role: payload.role,
            });
        } catch (error) {
            console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
            resolve(null);
        }
    });
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–∫ –æ–±—ä–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export default {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    createToken,
    verifyToken,
    decodeToken,
    isTokenExpired,
    getTokenExpiration,
    refreshToken,

    // –£—Ç–∏–ª–∏—Ç—ã
    extractTokenFromHeader,
    createAuthHeader,
    hasRole,
    getUserIdFromToken,
    getEmailFromToken,
    isValidTokenFormat,

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    createPasswordResetToken,
    verifyPasswordResetToken,
    createEmailVerificationToken,
    verifyEmailVerificationToken,
    createTemporaryToken,
    verifyTemporaryToken,
    createApiToken,
    verifyApiToken,
    hasApiPermission,
    create2FAToken,
    verify2FAToken,
    createSessionRecoveryToken,
    verifySessionRecoveryToken,
    createInvitationToken,
    verifyInvitationToken,

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    getTokenInfo,
    getTokenMetadata,
    validateTokenStructure,
    isTokenExpiringSoon,

    // –£—Ç–∏–ª–∏—Ç—ã
    generateRandomString,
};


