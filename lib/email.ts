// lib/email.ts
import nodemailer from 'nodemailer';
import validator from 'validator';

interface PasswordResetEmailData {
  to: string;
  name: string;
  resetUrl: string;
  userType: 'staff' | 'member';
}

interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  auth?: {
    user: string;
    pass: string;
  };
  tls?: {
    rejectUnauthorized: boolean;
  };
}

interface EmailResult {
  success: boolean;
  messageId?: string;
  attempt?: number;
  previewUrl?: string | false;
  error?: string;
}

interface EmailTemplate {
  subject: string;
  html: string;
  text: string;
}

interface TemplateData {
  [key: string]: any;
}

interface EmailMetrics {
  sent: number;
  failed: number;
  retries: number;
  lastError?: string;
  lastSuccess?: Date;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è email —Å–µ—Ä–≤–∏—Å–∞ „Äê182-2„Äë
const getEmailConfig = () => {
  return {
    provider: process.env.EMAIL_PROVIDER || 'smtp',
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT || '587'),
    secure: process.env.SMTP_SECURE === 'true',
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
    domain: process.env.EMAIL_DOMAIN || 'fitflow-pro.com',
    companyName: process.env.COMPANY_NAME || 'FitFlow-Pro',
    supportEmail: process.env.SUPPORT_EMAIL || 'support@fitflow-pro.com',
    maxRetries: parseInt(process.env.EMAIL_MAX_RETRIES || '3'),
    retryDelay: parseInt(process.env.EMAIL_RETRY_DELAY || '1000')
  };
};

// –ö—ç—à–∏—Ä—É–µ–º transporter –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let cachedTransporter: nodemailer.Transporter | null = null;
let cachedTestAccount: any = null;

// Rate Limiter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ „Äê182-2„Äë
class EmailRateLimiter {
  private static requests: Map<string, number[]> = new Map();
  private static readonly WINDOW_MS = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
  private static readonly MAX_REQUESTS = 10; // 10 –ø–∏—Å–µ–º –≤ –º–∏–Ω—É—Ç—É

  static canSend(email: string): boolean {
    const now = Date.now();
    const requests = this.requests.get(email) || [];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const validRequests = requests.filter(time => now - time < this.WINDOW_MS);
    
    if (validRequests.length >= this.MAX_REQUESTS) {
      return false;
    }
    
    validRequests.push(now);
    this.requests.set(email, validRequests);
    
    return true;
  }

  static getRemainingRequests(email: string): number {
    const now = Date.now();
    const requests = this.requests.get(email) || [];
    const validRequests = requests.filter(time => now - time < this.WINDOW_MS);
    
    return Math.max(0, this.MAX_REQUESTS - validRequests.length);
  }
}

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ „Äê182-3„Äë
class EmailMetricsCollector {
  private static metrics: EmailMetrics = {
    sent: 0,
    failed: 0,
    retries: 0
  };

  static recordSuccess(): void {
    this.metrics.sent++;
    this.metrics.lastSuccess = new Date();
  }

  static recordFailure(error: string): void {
    this.metrics.failed++;
    this.metrics.lastError = error;
  }

  static recordRetry(): void {
    this.metrics.retries++;
  }

  static getMetrics(): EmailMetrics {
    return { ...this.metrics };
  }

  static reset(): void {
    this.metrics = {
      sent: 0,
      failed: 0,
      retries: 0
    };
  }
}

// –®–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä email „Äê182-5„Äë
class EmailTemplateEngine {
  private static replaceVariables(template: string, data: TemplateData): string {
    return template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      return data[key] || match;
    });
  }

  static getWelcomeTemplate(data: {
    name: string;
    userType: string;
    companyName: string;
    loginUrl: string;
  }): EmailTemplate {
    const subject = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {{companyName}}!`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>{{subject}}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
          .button { display: inline-block; background: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }
          .features { background: #e3f2fd; border: 1px solid #bbdefb; padding: 15px; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {{companyName}}!</h1>
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {{userType}}</p>
          </div>
          
          <div class="content">
            <h2>–ü—Ä–∏–≤–µ—Ç, {{name}}!</h2>
            
            <p>–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ {{companyName}}. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç {{userType}} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</p>
            
            <div class="features">
              <h3>üöÄ –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</h3>
              <ul>
                <li>–£–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</li>
                <li>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
                <li>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö</li>
                <li>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏</li>
              </ul>
            </div>
            
            <div style="text-align: center;">
              <a href="{{loginUrl}}" class="button">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
            </div>
            
            <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
          </div>
          
          <div class="footer">
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ {{companyName}}</p>
            <p>¬© ${new Date().getFullYear()} {{companyName}}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {{companyName}}, {{name}}!
      
      –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ {{userType}}.
      
      –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É: {{loginUrl}}
      
      –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
      –ö–æ–º–∞–Ω–¥–∞ {{companyName}}
    `;

    return {
      subject: this.replaceVariables(subject, data),
      html: this.replaceVariables(html, data),
      text: this.replaceVariables(text, data)
    };
  }

  static getPasswordResetTemplate(data: {
    name: string;
    userType: string;
    companyName: string;
    resetUrl: string;
  }): EmailTemplate {
    const subject = `üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è {{userType}} - {{companyName}}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
          .button { display: inline-block; background: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }
          .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h1>
            <p>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è {{userType}}</p>
          </div>
          
          <div class="content">
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{name}}!</h2>
            
            <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {{userType}} –≤ —Å–∏—Å—Ç–µ–º–µ {{companyName}}.</p>
            
            <div style="text-align: center;">
              <a href="{{resetUrl}}" class="button">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
            </div>
            
            <div class="warning">
              <strong>‚è∞ –í–∞–∂–Ω–æ:</strong> –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.
            </div>
            
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ. –í–∞—à –ø–∞—Ä–æ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.</p>
            
            <p>–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.</p>
          </div>
          
          <div class="footer">
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ {{companyName}}</p>
            <p>¬© ${new Date().getFullYear()} {{companyName}}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
      –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è {{userType}} - {{companyName}}
      
      –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{name}}!
      
      –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {{userType}}.
      
      –î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
      {{resetUrl}}
      
      –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.
      
      –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
      
      –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
      –ö–æ–º–∞–Ω–¥–∞ {{companyName}}
    `;

    return {
      subject: this.replaceVariables(subject, data),
      html: this.replaceVariables(html, data),
      text: this.replaceVariables(text, data)
    };
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–æ–≤ „Äê182-3„Äë
const validateEmail = (email: string): boolean => {
  return validator.isEmail(email);
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const validateEmailData = (to: string, name: string): string | null => {
  if (!validateEmail(to)) {
    return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞';
  }

  if (!name.trim()) {
    return '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
  }

  return null;
};

// –°–æ–∑–¥–∞–Ω–∏–µ transporter —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π „Äê182-0„Äë„Äê182-4„Äë
const createTransporter = async (): Promise<nodemailer.Transporter> => {
  // –ï—Å–ª–∏ transporter —É–∂–µ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (cachedTransporter) {
    return cachedTransporter;
  }

  const config = {
    pool: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    maxConnections: 5,
    maxMessages: 100,
    rateDelta: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    rateLimit: 5, // 5 –ø–∏—Å–µ–º –≤ —Å–µ–∫—É–Ω–¥—É
    connectionTimeout: 5000, // 5 —Å–µ–∫—É–Ω–¥ timeout „Äê182-3„Äë
    greetingTimeout: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã timeout –¥–ª—è greeting
  };

  if (process.env.NODE_ENV === 'development') {
    try {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Ethereal - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      if (!cachedTestAccount) {
        console.log('üß™ Creating Ethereal test account...');
        cachedTestAccount = await nodemailer.createTestAccount();
        
        console.log('‚úÖ Ethereal test account created:');
        console.log('üìß User:', cachedTestAccount.user);
        console.log('üîë Pass:', cachedTestAccount.pass);
        console.log('üåê SMTP Host:', cachedTestAccount.smtp.host);
        console.log('üåê Web URL: https://ethereal.email/login');
        console.log('üí° Use these credentials to login and view sent emails');
      }

      cachedTransporter = nodemailer.createTransport({
        ...config,
        host: cachedTestAccount.smtp.host,
        port: cachedTestAccount.smtp.port,
        secure: cachedTestAccount.smtp.secure,
        auth: {
          user: cachedTestAccount.user,
          pass: cachedTestAccount.pass,
        },
      });

      console.log('‚úÖ Ethereal transporter created successfully');
      return cachedTransporter;
      
    } catch (error) {
      console.error('‚ùå Failed to create Ethereal transporter:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Ethereal transporter –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    }
  }

  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const emailConfig = getEmailConfig();
  
  try {
    switch (emailConfig.provider) {
      case 'sendgrid':
        if (!process.env.SENDGRID_API_KEY) {
          throw new Error('SENDGRID_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        cachedTransporter = nodemailer.createTransport({
          ...config,
          service: 'SendGrid',
          auth: {
            user: 'apikey',
            pass: process.env.SENDGRID_API_KEY
          }
        });
        break;
        
      case 'gmail':
        if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {
          throw new Error('GMAIL_USER –∏–ª–∏ GMAIL_APP_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º App Password –¥–ª—è Gmail „Äê182-4„Äë
        cachedTransporter = nodemailer.createTransport({
          ...config,
          service: 'Gmail',
          auth: {
            user: process.env.GMAIL_USER,
            pass: process.env.GMAIL_APP_PASSWORD // App Password, –Ω–µ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å
          }
        });
        break;
        
      default:
        if (!emailConfig.host || !emailConfig.user || !emailConfig.pass) {
          throw new Error('SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        cachedTransporter = nodemailer.createTransport({
          ...config,
          host: emailConfig.host,
          port: emailConfig.port,
          secure: emailConfig.secure,
          auth: {
            user: emailConfig.user,
            pass: emailConfig.pass
          },
          // –î–æ–±–∞–≤–ª—è–µ–º TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          tls: {
            rejectUnauthorized: process.env.NODE_ENV === 'production'
          }
        });
    }

    console.log(`‚úÖ ${emailConfig.provider.toUpperCase()} transporter created successfully`);
    return cachedTransporter;
    
  } catch (error) {
    console.error(`‚ùå Failed to create ${emailConfig.provider} transporter:`, error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
const sendEmailWithRetry = async (
  transporter: nodemailer.Transporter,
  mailOptions: nodemailer.SendMailOptions,
  maxRetries: number = 3
): Promise<EmailResult> => {
  let lastError: Error | null = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const info = await transporter.sendMail(mailOptions);
      
      EmailMetricsCollector.recordSuccess();
      console.log(`‚úÖ Email sent successfully on attempt ${attempt}:`, info.messageId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ Ethereal (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
      const previewUrl = process.env.NODE_ENV === 'development' ? 
        nodemailer.getTestMessageUrl(info) : undefined;
      
      if (previewUrl) {
        console.log('üëÄ Preview email at:', previewUrl);
      }

      return { 
        success: true, 
        messageId: info.messageId, 
        attempt,
        previewUrl 
      };
      
    } catch (error) {
      lastError = error as Error;
      EmailMetricsCollector.recordRetry();
      console.error(`‚ùå Email send attempt ${attempt} failed:`, error);
      
      if (attempt === maxRetries) {
        break;
      }
      
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
    }
  }
  
  EmailMetricsCollector.recordFailure(lastError?.message || 'Unknown error');
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${lastError?.message}`);
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
export async function sendWelcomeEmail({
  to,
  name,
  userType
}: {
  to: string;
  name: string;
  userType: 'staff' | 'member';
}): Promise<EmailResult> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validationError = validateEmailData(to, name);
  if (validationError) {
    return {
      success: false,
      error: validationError
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
  if (!EmailRateLimiter.canSend(to)) {
    return {
      success: false,
      error: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${EmailRateLimiter.getRemainingRequests(to)}`
    };
  }
  
  try {
    const transporter = await createTransporter();
    const config = getEmailConfig();
    const userTypeText = userType === 'staff' ? '–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' : '—É—á–∞—Å—Ç–Ω–∏–∫–∞';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä
    const template = EmailTemplateEngine.getWelcomeTemplate({
      name,
      userType: userTypeText,
      companyName: config.companyName,
      loginUrl: `${process.env.NEXT_PUBLIC_APP_URL}/login`
    });

    const mailOptions: nodemailer.SendMailOptions = {
      from: `"${config.companyName}" <noreply@${config.domain}>`,
      to,
      subject: template.subject,
      text: template.text,
      html: template.html
    };

    return await sendEmailWithRetry(transporter, mailOptions, config.maxRetries);

  } catch (error) {
    console.error('‚ùå Error sending welcome email:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

export async function sendPasswordResetEmail({
  to,
  name,
  resetUrl,
  userType
}: PasswordResetEmailData): Promise<EmailResult> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validationError = validateEmailData(to, name);
  if (validationError) {
    return {
      success: false,
      error: validationError
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
  if (!EmailRateLimiter.canSend(to)) {
    return {
      success: false,
      error: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${EmailRateLimiter.getRemainingRequests(to)}`
    };
  }

  try {
    const transporter = await createTransporter();
    const config = getEmailConfig();
    const userTypeText = userType === 'staff' ? '–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' : '—É—á–∞—Å—Ç–Ω–∏–∫–∞';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä
    const template = EmailTemplateEngine.getPasswordResetTemplate({
      name,
      userType: userTypeText,
      companyName: config.companyName,
      resetUrl
    });

    const mailOptions: nodemailer.SendMailOptions = {
      from: `"${config.companyName}" <noreply@${config.domain}>`,
      to,
      subject: template.subject,
      text: template.text,
      html: template.html,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–∏—Å–µ–º
      priority: 'high',
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏
      headers: {
        'X-Priority': '1',
        'X-MSMail-Priority': 'High',
        'Importance': 'high'
      }
    };

    return await sendEmailWithRetry(transporter, mailOptions, config.maxRetries);
    
  } catch (error) {
    console.error('‚ùå Error in sendPasswordResetEmail:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
export async function sendPasswordChangedNotification({
  to,
  name,
  userType,
  timestamp
}: {
  to: string;
  name: string;
  userType: 'staff' | 'member';
  timestamp: Date;
}): Promise<EmailResult> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validationError = validateEmailData(to, name);
  if (validationError) {
    return {
      success: false,
      error: validationError
    };
  }

  try {
    const transporter = await createTransporter();
    const config = getEmailConfig();
    const userTypeText = userType === 'staff' ? '–ø–µ—Ä—Å–æ–Ω–∞–ª–∞' : '—É—á–∞—Å—Ç–Ω–∏–∫–∞';
    const formattedTime = timestamp.toLocaleString('ru-RU');

    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
          .alert { background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω</h1>
            <p>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è ${userTypeText}</p>
          </div>
          
          <div class="content">
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</h2>
            
            <div class="alert">
              <strong>üîê –í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω</strong><br>
              –í—Ä–µ–º—è: ${formattedTime}
            </div>
            
            <p>–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.</p>
            
            <p>–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</p>
            <ul>
              <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ</li>
              <li>–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∏–∫—Ç–æ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π –ø–æ—á—Ç–µ</li>
              <li>–í–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞</li>
            </ul>
          </div>
          
          <div class="footer">
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã ${config.companyName}</p>
            <p>¬© ${new Date().getFullYear()} ${config.companyName}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const mailOptions: nodemailer.SendMailOptions = {
      from: `"${config.companyName}" <noreply@${config.domain}>`,
      to,
      subject: `‚úÖ –ü–∞—Ä–æ–ª—å ${userTypeText} –∏–∑–º–µ–Ω–µ–Ω - ${config.companyName}`,
      html: htmlContent
    };

    return await sendEmailWithRetry(transporter, mailOptions, config.maxRetries);

  } catch (error) {
    console.error('‚ùå Error sending password change notification:', error);
    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email –≤ development
export async function testEmailConnection(): Promise<boolean> {
  try {
    console.log('üîß Testing email connection...');
    const transporter = await createTransporter();
    const config = getEmailConfig();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ „Äê182-3„Äë
    await transporter.verify();
    console.log('‚úÖ Email connection verified successfully');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    const testInfo = await transporter.sendMail({
      from: `"Test ${config.companyName}" <test@${config.domain}>`,
      to: 'test@example.com',
      subject: `üß™ Test Email Connection - ${config.companyName}`,
      text: 'This is a test email to verify the email connection is working properly.',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h1 style="color: #28a745;">üß™ Test Email Connection</h1>
          <p>This is a test email to verify that the email connection is working properly.</p>
          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <strong>‚úÖ Connection Status:</strong> Successfully connected and email sent!
          </div>
          <p style="color: #666; font-size: 12px;">
            Sent at: ${new Date().toLocaleString('ru-RU')}<br>
            Environment: ${process.env.NODE_ENV || 'unknown'}
          </p>
        </div>
      `
    });
    
    console.log('üìß Test email sent successfully:', testInfo.messageId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ Ethereal (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (process.env.NODE_ENV === 'development') {
      const previewUrl = nodemailer.getTestMessageUrl(testInfo);
      if (previewUrl) {
        console.log('üëÄ Preview test email at:', previewUrl);
      }
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Email connection test failed:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
export function getEmailMetrics(): EmailMetrics {
  return EmailMetricsCollector.getMetrics();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫
export function resetEmailMetrics(): void {
  EmailMetricsCollector.reset();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export function clearEmailCache(): void {
  cachedTransporter = null;
  cachedTestAccount = null;
  console.log('üßπ Email cache cleared');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export type { PasswordResetEmailData, EmailResult, EmailMetrics };
