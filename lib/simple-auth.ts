// lib/simple-auth.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø VERCEL
import { UserRole } from '@/lib/permissions';

export interface User {
  id: string;
  email: string;
  phone?: string;
  role: UserRole;
  name: string;
  avatar?: string;
  avatarUrl?: string;
  isVerified?: boolean;
  rating?: number;
  createdAt: Date;
  updatedAt: Date;
  lastLoginAt?: Date;
  photoUrl?: string;
}

export interface Session {
  id: string;
  email: string;
  user: User;
  createdAt: Date;
  expiresAt: Date;
  lastAccessed: Date;
  rating: number;
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø VERCEL: –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã –≤–º–µ—Å—Ç–æ in-memory —Å–µ—Å—Å–∏–π
import { SignJWT, jwtVerify } from 'jose';

const JWT_SECRET = new TextEncoder().encode(
  process.env.JWT_SECRET || 'fallback-secret-key-change-in-production'
);

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –≤–º–µ—Å—Ç–æ —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏
export const createSession = async (user: User): Promise<string> => {
  const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const now = new Date();
  
  const session: Session = {
    id: sessionId,
    email: user.email,
    user,
    createdAt: now,
    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
    lastAccessed: now,
    rating: user.rating || 0,
  };

  // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏
  const token = await new SignJWT({ 
    sessionData: session,
    userId: user.id,
    userRole: user.role,
    userEmail: user.email
  })
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(JWT_SECRET);

  console.log(`‚úÖ Session: —Å–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω –¥–ª—è ${user.email} (${user.role})`);
  return token;
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
export const getSession = async (sessionToken: string): Promise<Session | null> => {
  try {
    console.log(`üîç getSession: –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...`);
    
    if (!sessionToken) {
      console.log('‚ùå getSession: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return null;
    }

    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const { payload } = await jwtVerify(sessionToken, JWT_SECRET);
    
    if (!payload.sessionData) {
      console.log('‚ùå getSession: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞');
      return null;
    }

    const session = payload.sessionData as Session;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (new Date(session.expiresAt) < new Date()) {
      console.log('‚è∞ getSession: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
      return null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–Ω–æ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–π —Ä–∞–∑)
    session.lastAccessed = new Date();

    console.log(`‚úÖ getSession: —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${session.user.email} (${session.user.role})`);
    return session;

  } catch (error) {
    console.error('‚ùå getSession: –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT:', error);
    return null;
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
export const updateSession = async (sessionToken: string, updatedSession: Session): Promise<string | null> => {
  try {
    console.log(`üîÑ updateSession: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    const currentSession = await getSession(sessionToken);
    if (!currentSession) {
      console.log(`‚ùå updateSession: –∏—Å—Ö–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newToken = await new SignJWT({ 
      sessionData: {
        ...updatedSession,
        lastAccessed: new Date()
      },
      userId: updatedSession.user.id,
      userRole: updatedSession.user.role,
      userEmail: updatedSession.user.email
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('7d')
      .sign(JWT_SECRET);

    console.log(`‚úÖ updateSession: JWT —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${updatedSession.user.email}`);
    return newToken;

  } catch (error) {
    console.error('‚ùå updateSession: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JWT:', error);
    return null;
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
export const updateSessionUser = async (sessionToken: string, updatedUser: Partial<User>): Promise<string | null> => {
  try {
    console.log(`üîÑ updateSessionUser: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JWT —Ç–æ–∫–µ–Ω–µ...`);
    
    const session = await getSession(sessionToken);
    if (!session) {
      console.log(`‚ùå updateSessionUser: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedSession = {
      ...session,
      user: {
        ...session.user,
        ...updatedUser,
        updatedAt: new Date()
      },
      lastAccessed: new Date()
    };

    return await updateSession(sessionToken, updatedSession);

  } catch (error) {
    console.error('‚ùå updateSessionUser: –æ—à–∏–±–∫–∞:', error);
    return null;
  }
};

// ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω)
export const authenticate = async (email: string, password: string): Promise<{ session: Session; token: string } | null> => {
  console.log(`üîê Auth: –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${email}`);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
  if (email === 'romangulanyan@gmail.com' && password === 'Hovik-1970') {
    const superAdminUser: User = {
      id: 'super-admin-1',
      email: 'romangulanyan@gmail.com',
      role: 'super-admin',
      name: 'Roman Gulanyan',
      avatar: '/avatars/super-admin.jpg',
      isVerified: true,
      rating: 5.0,
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date()
    };
    
    const token = await createSession(superAdminUser);
    const session = await getSession(token);
    
    if (session) {
      console.log(`‚úÖ Auth: —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
      return { session, token };
    }
  }
  
  console.log('‚ùå Auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ simple-auth (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ Convex)');
  return null;
};

// ‚úÖ –î–û–ë–ê–í–ò–ú –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
export const authenticateSync = (email: string, password: string): { user: User; id: string } | null => {
  console.log(`üîê AuthSync: –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${email}`);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
  if (email === 'romangulanyan@gmail.com' && password === 'Hovik-1970') {
    const superAdminUser: User = {
      id: 'super-admin-1',
      email: 'romangulanyan@gmail.com',
      role: 'super-admin',
      name: 'Roman Gulanyan',
      avatar: '/avatars/super-admin.jpg',
      isVerified: true,
      rating: 5.0,
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date()
    };
    
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log(`‚úÖ AuthSync: —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
    return { 
      user: superAdminUser,
      id: sessionId
    };
  }
  
  console.log('‚ùå AuthSync: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ simple-auth (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ Convex)');
  return null;
};

// ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (JWT —Ç–æ–∫–µ–Ω—ã –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –Ω–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ blacklist)
export const logout = (sessionToken: string): boolean => {
  console.log('üëã Auth: –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (JWT —Ç–æ–∫–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)');
  return true;
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
export const getUserById = (userId: string): User | null => {
  if (userId === 'super-admin-1') {
    return {
      id: 'super-admin-1',
      email: 'romangulanyan@gmail.com',
      role: 'super-admin',
      name: 'Roman Gulanyan',
      avatar: '/avatars/super-admin.jpg',
      isVerified: true,
      rating: 5.0,
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date()
    };
  }
  return null;
};

export const getUserByEmail = (email: string): User | null => {
  if (email === 'romangulanyan@gmail.com') {
    return {
      id: 'super-admin-1',
      email: 'romangulanyan@gmail.com',
      role: 'super-admin',
      name: 'Roman Gulanyan',
      avatar: '/avatars/super-admin.jpg',
      isVerified: true,
      rating: 5.0,
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date()
    };
  }
  return null;
};

export const getAllUsers = (): User[] => {
  console.log(`üìã getAllUsers: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ Convex)`);
  const superAdmin = getUserByEmail('romangulanyan@gmail.com');
  return superAdmin ? [superAdmin] : [];
};

export const getUsersByRole = (role: UserRole): User[] => {
  if (role === 'super-admin') {
    const superAdmin = getUserByEmail('romangulanyan@gmail.com');
    return superAdmin ? [superAdmin] : [];
  }
  return [];
};

export const isValidRole = (role: string): role is UserRole => {
  return ['super-admin', 'admin', 'manager', 'trainer', 'member', 'client'].includes(role);
};

export const changePassword = (userId: string, oldPassword: string, newPassword: string): boolean => {
  console.log(`üîë Auth: —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (—Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞)`);
  
  if (newPassword.length < 6) {
    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  return true;
};

export const resetPassword = (email: string): string | null => {
  console.log(`üîÑ Auth: —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è ${email} (—Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞)`);
  
  if (email === 'romangulanyan@gmail.com') {
    const tempPassword = Math.random().toString(36).substr(2, 10);
    console.log(`üîÑ Auth: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞: ${tempPassword}`);
    return tempPassword;
  }
  
  return null;
};

export const isSessionActive = async (sessionToken: string): Promise<boolean> => {
  const session = await getSession(sessionToken);
  return session !== null;
};

export const extendSession = async (sessionToken: string, hours: number = 24): Promise<string | null> => {
  try {
    const session = await getSession(sessionToken);
    if (!session) {
      return null;
    }

    const extendedSession = {
      ...session,
      expiresAt: new Date(Date.now() + hours * 60 * 60 * 1000)
    };

    const newToken = await updateSession(sessionToken, extendedSession);
    console.log(`‚è∞ Auth: —Å–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ ${hours} —á–∞—Å–æ–≤`);
    return newToken;
  } catch (error) {
    console.error('‚ùå extendSession: –æ—à–∏–±–∫–∞:', error);
    return null;
  }
};

// ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
export const debugSessionAccess = async (sessionToken: string) => {
  console.log(`üîç Debug: –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...`);
  
  try {
    const session = await getSession(sessionToken);
    console.log(`üìã Debug: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:`, !!session);
    
    if (session) {
      console.log(`üë§ Debug: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, {
        id: session.user.id,
        email: session.user.email,
        role: session.user.role,
        name: session.user.name
      });
      console.log(`‚è∞ Debug: –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:`, session.createdAt);
      console.log(`‚è∞ Debug: –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:`, session.expiresAt);
      console.log(`‚è∞ Debug: –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø:`, session.lastAccessed);
      console.log(`‚úÖ Debug: —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞:`, new Date(session.expiresAt) > new Date());
    }
    
    return session;
  } catch (error) {
    console.error('‚ùå Debug: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
};

export const getAuthStats = () => {
  return {
    totalUsers: 1,
    usersByRole: {
      'super-admin': 1,
      admin: 0,
      manager: 0,
      trainer: 0,
      member: 0,
      client: 0
    },
    activeSessions: 'N/A (JWT tokens)',
    totalSessions: 'N/A (JWT tokens)',
    note: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel serverless'
  };
};