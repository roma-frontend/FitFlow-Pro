import { SignJWT } from 'jose';
import { cookies } from 'next/headers';
import jwt from 'jsonwebtoken';
import { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import CredentialsProvider from "next-auth/providers/credentials";
import { ConvexHttpClient } from "convex/browser";
import bcrypt from "bcryptjs";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export const authOptions: NextAuthOptions = {
  debug: true,
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code"
        }
      }
    }),

    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        try {
          const user = await convex.query("users:getByEmail", {
            email: credentials.email
          });

          if (!user || !user.isActive) {
            return null;
          }

          const isPasswordValid = await bcrypt.compare(
            credentials.password,
            user.password
          );

          if (!isPasswordValid) {
            return null;
          }

          return {
            id: user._id,
            email: user.email,
            name: user.name,
            role: user.role,
            image: user.avatar || user.photoUrl
          };
        } catch (error) {
          console.error("Auth error:", error);
          return null;
        }
      }
    })
  ],

  callbacks: {
    async signIn({ user, account, profile }) {
      // –ü—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google
      if (account?.provider === "google") {
        try {
          console.log("üîç Google Sign In - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.email);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º createOrUpdateGoogleUser –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          const userId = await convex.mutation("users:createOrUpdateGoogleUser", {
            email: user.email!.toLowerCase(),
            name: user.name || "Google User",
            googleId: account.providerAccountId,
            photoUrl: user.image || undefined,
            role: undefined // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è role –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è
          });

          console.log("‚úÖ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω:", userId);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –¥–ª—è staff-login
          if (typeof window !== 'undefined' && 
              window.location.pathname.includes('staff-login')) {
            const dbUser = await convex.query("users:getByEmail", {
              email: user.email!
            });
            
            const staffRoles = ['admin', 'super-admin', 'manager', 'trainer'];
            if (dbUser && !staffRoles.includes(dbUser.role)) {
              console.log("‚ùå –ù–µ staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ staff-login");
              return '/auth/error?error=AccessDenied';
            }
          }

          return true;
        } catch (error) {
          console.error("‚ùå Google sign in error:", error);
          return false;
        }
      }

      return true;
    },

    async jwt({ token, user, account, trigger }) {
      // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–∫–µ–Ω
      if (user) {
        token.userId = user.id;
        token.email = user.email || "";
        token.role = (user as any).role || "member";
        token.name = user.name || user.email || "User";
      }

      // –ï—Å–ª–∏ —ç—Ç–æ Google –≤—Ö–æ–¥ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
      if ((account?.provider === "google" || trigger === "update") && token.email) {
        try {
          const dbUser = await convex.query("users:getByEmail", {
            email: token.email as string
          });
          if (dbUser) {
            token.role = dbUser.role;
            token.userId = dbUser._id;
            token.name = dbUser.name || token.name;
          }
        } catch (error) {
          console.error("Error fetching user data:", error);
        }
      }

      return token;
    },

    async session({ session, token }) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é
      return {
        ...session,
        user: {
          ...session.user,
          id: token.userId as string,
          role: token.role as string,
          email: token.email as string,
          name: token.name as string || session.user?.name || "User",
        }
      };
    },

    async redirect({ url, baseUrl }) {
      console.log("üîÑ NextAuth redirect callback:", { url, baseUrl });
      
      // –ï—Å–ª–∏ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å
      if (url.startsWith("/")) {
        return `${baseUrl}${url}`;
      }
      
      // –ï—Å–ª–∏ URL —Å —Ç–æ–≥–æ –∂–µ origin
      else if (new URL(url).origin === baseUrl) {
        return url;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º callbackUrl –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const urlObj = new URL(url);
      const callbackUrl = urlObj.searchParams.get("callbackUrl");
      
      if (callbackUrl?.startsWith("/")) {
        return `${baseUrl}${callbackUrl}`;
      }

      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      return baseUrl;
    }
  },

  pages: {
    signIn: "/auth/signin",
    error: "/auth/error",
  },

  session: {
    strategy: "jwt",
    maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
  },

  jwt: {
    secret: process.env.JWT_SECRET || process.env.NEXTAUTH_SECRET,
  },

  secret: process.env.NEXTAUTH_SECRET,
};

export interface UserJwtPayload {
  jti: string;
  iat: number;
  exp: number;
  userId: string;
  name: string;
  email?: string;
  role: string;
}

export function setAuthCookie(token: string): void {
  console.warn('setAuthCookie –≤—ã–∑–≤–∞–Ω–∞, –Ω–æ cookies –¥–æ–ª–∂–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ NextResponse');
}

export function setRoleCookie(role: string): void {
  console.warn('setRoleCookie –≤—ã–∑–≤–∞–Ω–∞, –Ω–æ cookies –¥–æ–ª–∂–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ NextResponse');
}

export function createToken(payload: any): string {
  if (!process.env.JWT_SECRET) {
    throw new Error('JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '24h' });
}

export async function verifyToken(token: string): Promise<any> {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω...');
    console.log('üîë JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.JWT_SECRET);

    if (!process.env.JWT_SECRET) {
      throw new Error('JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decoded);
    return decoded;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT:', error);
    throw new Error(`Invalid token: ${error}`);
  }
}

export async function signToken(payload: any) {
  try {
    if (!process.env.JWT_SECRET) {
      throw new Error('JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    console.log('signToken: —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è:', payload);

    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const token = await new SignJWT(payload)
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('7d')
      .sign(secret);

    console.log('signToken: —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return token;
  } catch (error) {
    console.error('signToken: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    throw error;
  }
}

export async function getCurrentUser() {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('auth_token')?.value;

    console.log("–¢–æ–∫–µ–Ω –∏–∑ cookies:", token ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω");

    if (!token) {
      return null;
    }

    const payload = await verifyToken(token);
    console.log("Payload –∏–∑ —Ç–æ–∫–µ–Ω–∞:", payload);

    return {
      id: payload.userId,
      name: payload.name,
      email: payload.email,
      role: payload.role,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ getCurrentUser:", error);
    return null;
  }
}

export async function clearAuthCookies(): Promise<void> {
  try {
    const cookieStore = await cookies();
    cookieStore.delete('auth_token');
    cookieStore.delete('user_role');
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ cookies:", error);
  }
}
