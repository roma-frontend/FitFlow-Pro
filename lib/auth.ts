import { SignJWT } from 'jose';
import { cookies } from 'next/headers';
import jwt from 'jsonwebtoken';
import { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import CredentialsProvider from "next-auth/providers/credentials";
import { ConvexHttpClient } from "convex/browser";
import bcrypt from "bcryptjs";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export const authOptions: NextAuthOptions = {
  debug: true,
  providers: [
    // Google OAuth Provider
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code"
        }
      }
    }),

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π Credentials Provider –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        try {
          const user = await convex.query("users:getByEmail", {
            email: credentials.email
          });

          if (!user || !user.isActive) {
            return null;
          }

          const isPasswordValid = await bcrypt.compare(
            credentials.password,
            user.password
          );

          if (!isPasswordValid) {
            return null;
          }

          return {
            id: user._id,
            email: user.email,
            name: user.name,
            role: user.role,
            image: user.avatar || user.photoUrl
          };
        } catch (error) {
          console.error("Auth error:", error);
          return null;
        }
      }
    })
  ],

  callbacks: {
    async signIn({ user, account, profile }) {
      // –ü—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google
      if (account?.provider === "google") {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          let existingUser = await convex.query("users:getByEmail", {
            email: user.email!
          });

          if (existingUser) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å staff
            const staffRoles = ['admin', 'super-admin', 'manager', 'trainer'];
            const isStaff = staffRoles.includes(existingUser.role);

            if (typeof window !== 'undefined' &&
              window.location.pathname.includes('staff-login') &&
              !isStaff) {
              return '/auth/error?error=AccessDenied';
            }
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = await convex.mutation("users:create", {
              email: user.email!.toLowerCase(),
              name: user.name || "Google User",
              googleId: account.providerAccountId,
              avatar: user.image || "",
              role: "member", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é member
              isActive: true,
              isVerified: true, // Google –∞–∫–∫–∞—É–Ω—Ç—ã —Å—á–∏—Ç–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
              createdAt: Date.now(),
              updatedAt: Date.now(),
              // –î–ª—è Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
              password: await bcrypt.hash(Math.random().toString(36), 10) // –°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            });

            console.log("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ Google:", userId);
          } else {

            if (typeof window !== 'undefined' &&
              window.location.pathname.includes('staff-login')) {
              return false;
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!existingUser.googleId) {
              await convex.mutation("users:update", {
                userId: existingUser._id,
                updates: {
                  googleId: account.providerAccountId,
                  avatar: existingUser.avatar || user.image || "",
                  isVerified: true,
                  updatedAt: Date.now()
                }
              });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await convex.mutation("users:updateLastLogin", {
              userId: existingUser._id,
              timestamp: Date.now()
            });
          }

          return true;
        } catch (error) {
          console.error("Google sign in error:", error);
          return false;
        }
      }

      return true;
    },

    async jwt({ token, user, account }) {
      // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–∫–µ–Ω
      if (user) {
        token.userId = user.id;
        token.email = user.email || "";
        token.role = (user as any).role || "member";
        token.name = user.name || user.email || "User";
      }

      // –ï—Å–ª–∏ —ç—Ç–æ Google –≤—Ö–æ–¥, –ø–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î
      if (account?.provider === "google" && token.email) {
        try {
          const dbUser = await convex.query("users:getByEmail", {
            email: token.email as string
          });
          if (dbUser) {
            token.role = dbUser.role;
            token.userId = dbUser._id;
          }
        } catch (error) {
          console.error("Error fetching user role:", error);
        }
      }

      return token;
    },

    async session({ session, token }) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é
      return {
        ...session,
        user: {
          ...session.user,
          id: token.userId as string,
          role: token.role as string,
          email: token.email as string,
          name: token.name as string || session.user?.name || "User",
        }
      };
    },

    async redirect({ url, baseUrl }) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      if (url.startsWith("/")) return `${baseUrl}${url}`;
      else if (new URL(url).origin === baseUrl) return url;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ —Ä–æ–ª–∏
      const callbackUrl = new URL(url).searchParams.get("callbackUrl");
      if (callbackUrl?.startsWith("/")) return `${baseUrl}${callbackUrl}`;

      return baseUrl;
    }
  },

  pages: {
    signIn: "/auth/signin",
    error: "/auth/error",
  },

  session: {
    strategy: "jwt",
    maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
  },

  jwt: {
    secret: process.env.JWT_SECRET || process.env.NEXTAUTH_SECRET,
  },

  secret: process.env.NEXTAUTH_SECRET,
};

export interface UserJwtPayload {
  jti: string;
  iat: number;
  exp: number;
  userId: string;
  name: string;
  email?: string;
  role: string;
}

export function setAuthCookie(token: string): void {
  console.warn('setAuthCookie –≤—ã–∑–≤–∞–Ω–∞, –Ω–æ cookies –¥–æ–ª–∂–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ NextResponse');
}

export function setRoleCookie(role: string): void {
  console.warn('setRoleCookie –≤—ã–∑–≤–∞–Ω–∞, –Ω–æ cookies –¥–æ–ª–∂–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ NextResponse');
}

export function createToken(payload: any): string {
  if (!process.env.JWT_SECRET) {
    throw new Error('JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '24h' });
}

export async function verifyToken(token: string): Promise<any> {
  try {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω...');
    console.log('üîë JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.JWT_SECRET);

    if (!process.env.JWT_SECRET) {
      throw new Error('JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decoded);
    return decoded;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT:', error);
    throw new Error(`Invalid token: ${error}`);
  }
}

export async function signToken(payload: any) {
  try {
    if (!process.env.JWT_SECRET) {
      throw new Error('JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    console.log('signToken: —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è:', payload);

    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const token = await new SignJWT(payload)
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('7d')
      .sign(secret);

    console.log('signToken: —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return token;
  } catch (error) {
    console.error('signToken: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    throw error;
  }
}

export async function getCurrentUser() {
  try {
    const cookieStore = await cookies();
    const token = cookieStore.get('auth_token')?.value;

    console.log("–¢–æ–∫–µ–Ω –∏–∑ cookies:", token ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω");

    if (!token) {
      return null;
    }

    const payload = await verifyToken(token);
    console.log("Payload –∏–∑ —Ç–æ–∫–µ–Ω–∞:", payload);

    return {
      id: payload.userId,
      name: payload.name,
      email: payload.email,
      role: payload.role,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ getCurrentUser:", error);
    return null;
  }
}

export async function clearAuthCookies(): Promise<void> {
  try {
    const cookieStore = await cookies();
    cookieStore.delete('auth_token');
    cookieStore.delete('user_role');
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ cookies:", error);
  }
}
