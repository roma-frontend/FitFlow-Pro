// lib/unified-auth.ts
import { ConvexHttpClient } from "convex/browser";
import { authenticate, createSession, getSession, logout as simpleLogout, User } from '@/lib/simple-auth';
import { verifyToken, createToken } from '@/lib/jwt-auth';
import type { UserRole } from '@/lib/permissions';
import { Id } from "@/convex/_generated/dataModel";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

interface AuthAttempt {
    userId: string;
    action: string;
    method: 'password' | 'face-id' | 'qr-code' | 'token' | 'logout';
    success: boolean;
    ipAddress?: string;
    deviceInfo?: string;
    details?: string;
    timestamp: number;
    // üî• –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø FACE ID
    faceIdConfidence?: number;
    faceIdQuality?: 'low' | 'medium' | 'high';
    faceIdDeviceType?: string;
}

interface FaceProfile {
  _id: Id<"faceProfiles">;
  userId: Id<"users"> | Id<"trainers">;
  userType: "user" | "trainer";
  faceDescriptor: number[];
  confidence: number;
  registeredAt: number;
  lastUsed?: number;
  isActive: boolean;
  metadata?: {
    registrationMethod: string;
    userAgent?: string;
    deviceInfo?: string;
  };
}

export interface AuthUser {
    id: string;
    email: string;
    name: string;
    role: UserRole;
    isActive: boolean;
    lastLogin?: number;
    faceIdEnabled?: boolean;
}

export interface AuthSession {
    id: string;
    user: AuthUser;
    method: 'password' | 'face-id' | 'qr-code' | 'token';
    createdAt: Date;
    expiresAt: Date;
    ipAddress?: string;
    deviceInfo?: string;
}

export interface LoginResult {
    success: boolean;
    session?: AuthSession;
    token?: string;
    error?: string;
    requiresMFA?: boolean;
    requiresFaceSetup?: boolean;
}

export interface LogEntry {
    userId: string;
    action: string;
    method: 'password' | 'face-id' | 'qr-code' | 'token' | 'logout';
    success: boolean;
    ipAddress?: string;
    deviceInfo?: string;
    details?: string;
    timestamp: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–æ–≤ –∏–∑ Convex
interface ConvexLogEntry {
    userId: string;
    action?: string;
    method?: string;
    success: boolean;
    ipAddress?: string;
    deviceInfo?: string;
    details?: string;
    timestamp: number;
}

class UnifiedAuthSystem {
    private convex: ConvexHttpClient;

    constructor() {
        this.convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);
    }

    // üîê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –í–•–û–î
    async login(
        method: 'password' | 'face-id' | 'qr-code',
        credentials: {
            email?: string;
            password?: string;
            faceData?: string;
            descriptor?: number[];  // üî• –î–û–ë–ê–í–õ–ï–ù–û
            confidence?: number;    // üî• –î–û–ë–ê–í–õ–ï–ù–û
            qrCode?: string;
            userType?: 'staff' | 'member';
            ipAddress?: string;
            deviceInfo?: string;
        }
    ): Promise<LoginResult> {
        console.log(`üîê UnifiedAuth: –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ ${method}`);

        try {
            let user: AuthUser | null = null;
            const authMethod = method;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
            switch (method) {
                case 'password':
                    user = await this.authenticateWithPassword(credentials);
                    break;
                case 'face-id':
                    user = await this.authenticateWithFaceId(credentials);
                    break;
                case 'qr-code':
                    user = await this.authenticateWithQR(credentials);
                    break;
            }

            if (!user) {
                await this.logAuthAttempt({
                    userId: 'unknown',
                    action: 'login_failed',
                    method: authMethod,
                    success: false,
                    ipAddress: credentials.ipAddress,
                    deviceInfo: credentials.deviceInfo,
                    details: `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ ${method}`,
                    timestamp: Date.now(),
                    // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø FACE ID –ü–†–ò –û–®–ò–ë–ö–ï
                    ...(method === 'face-id' && {
                        faceIdConfidence: credentials.confidence,
                        faceIdQuality: credentials.confidence && credentials.confidence > 90 ? 'high' :
                            credentials.confidence && credentials.confidence > 75 ? 'medium' : 'low'
                    })
                });

                return {
                    success: false,
                    error: this.getAuthErrorMessage(method) // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
            if (!user.isActive) {
                await this.logAuthAttempt({
                    userId: user.id,
                    action: 'login_blocked',
                    method: authMethod,
                    success: false,
                    ipAddress: credentials.ipAddress,
                    deviceInfo: credentials.deviceInfo,
                    details: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                    timestamp: Date.now()
                });

                return {
                    success: false,
                    error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
                };
            }

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            const session = await this.createUnifiedSession(user, {
                method: authMethod,
                ipAddress: credentials.ipAddress,
                deviceInfo: credentials.deviceInfo
            });

            // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = createToken({
                userId: user.id,
                email: user.email,
                role: user.role,
                name: user.name
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await this.updateLastLogin(user.id, user.role);

            // üî• –õ–û–ì–ò–†–£–ï–ú –£–°–ü–ï–®–ù–´–ô –í–•–û–î –° FACE ID –î–ê–ù–ù–´–ú–ò
            await this.logAuthAttempt({
                userId: user.id,
                action: 'login_success',
                method: authMethod,
                success: true,
                ipAddress: credentials.ipAddress,
                deviceInfo: credentials.deviceInfo,
                details: `–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ ${method}`,
                timestamp: Date.now(),
                // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø FACE ID
                ...(method === 'face-id' && {
                    faceIdConfidence: credentials.confidence,
                    faceIdQuality: credentials.confidence && credentials.confidence > 90 ? 'high' :
                        credentials.confidence && credentials.confidence > 75 ? 'medium' : 'low',
                    faceIdDeviceType: credentials.deviceInfo?.split(' ')[0] || 'unknown'
                })
            });

            console.log(`‚úÖ UnifiedAuth: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} —á–µ—Ä–µ–∑ ${method}`);

            return {
                success: true,
                session,
                token,
                requiresFaceSetup: method !== 'face-id' && !user.faceIdEnabled
            };

        } catch (error) {
            console.error('üí• UnifiedAuth: –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);

            await this.logAuthAttempt({
                userId: 'unknown',
                action: 'login_error',
                method,
                success: false,
                ipAddress: credentials.ipAddress,
                deviceInfo: credentials.deviceInfo,
                details: `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`,
                timestamp: Date.now()
            });

            return {
                success: false,
                error: '–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    // üîê –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –û–ë –û–®–ò–ë–ö–ê–•
    private getAuthErrorMessage(method: string): string {
        const errorMessages = {
            'password': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
            'face-id': 'Face ID –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
            'qr-code': 'QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
        };

        return errorMessages[method as keyof typeof errorMessages] || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
    }

    // üîë –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û –ü–ê–†–û–õ–Æ
    private async authenticateWithPassword(credentials: {
        email?: string;
        password?: string;
        userType?: 'staff' | 'member';
    }): Promise<AuthUser | null> {
        if (!credentials.email || !credentials.password) {
            return null;
        }

        try {
            // First try simple authentication (mock users)
            const simpleAuthResult = await authenticate(credentials.email, credentials.password);

            // Check if authentication was successful
            if (simpleAuthResult && simpleAuthResult.session) {
                return {
                    id: simpleAuthResult.session.user.id,
                    email: simpleAuthResult.session.user.email,
                    name: simpleAuthResult.session.user.name,
                    role: simpleAuthResult.session.user.role,
                    isActive: true
                };
            }

            // Then check in Convex
            const user = await this.convex.query("users:getByEmail", {
                email: credentials.email
            });

            if (!user) {
                return null;
            }

            // Verify password (in real app this would use bcrypt)
            const isPasswordValid = await this.verifyPassword(credentials.password, user.password);
            if (!isPasswordValid) {
                return null;
            }

            return {
                id: user._id,
                email: user.email,
                name: user.name,
                role: user.role,
                isActive: user.isActive !== false,
                lastLogin: user.lastLogin,
                faceIdEnabled: user.faceIdEnabled
            };

        } catch (error) {
            console.error('‚ùå Password authentication error:', error);
            return null;
        }
    }

    // üë§ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û FACE ID
    private async authenticateWithFaceId(credentials: {
        faceData?: string;
        descriptor?: number[];
        confidence?: number;
        deviceInfo?: string;
    }): Promise<AuthUser | null> {
        if (!credentials.faceData && !credentials.descriptor) {
            return null;
        }

        try {
            console.log('üë§ FaceID: –Ω–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ª–∏—Ü—É');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Face ID –ø—Ä–æ—Ñ–∏–ª—å
            let descriptor = credentials.descriptor;

            if (credentials.faceData && !descriptor) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º faceData –≤ descriptor –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                try {
                    const faceDataObj = JSON.parse(atob(credentials.faceData));
                    descriptor = faceDataObj.descriptor;
                } catch {
                    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç faceData');
                    return null;
                }
            }

            if (!descriptor || descriptor.length === 0) {
                console.error('‚ùå –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ –ø—É—Å—Ç–æ–π');
                return null;
            }

            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Face ID –≤ Convex
            const faceProfile = await this.convex.query("faceProfiles:findByDescriptor", {
                descriptor: descriptor,
                threshold: 0.6 // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
            });

            if (!faceProfile || !faceProfile.isActive) {
                console.log('‚ùå Face ID –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
                return null;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.convex.query("users:getById", {
                id: faceProfile.userId
            });

            if (!user || !user.isActive) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
                return null;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Face ID
            await this.convex.mutation("faceProfiles:updateLastUsed", {
                profileId: faceProfile._id,
                timestamp: Date.now()
            });

            console.log('‚úÖ Face ID –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', user.email);

            return {
                id: user._id,
                email: user.email,
                name: user.name,
                role: user.role as UserRole,
                isActive: user.isActive !== false,
                lastLogin: user.lastLogin,
                faceIdEnabled: true
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Face ID –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–û–ü–´–¢–û–ö –í–•–û–î–ê –° –ü–û–î–î–ï–†–ñ–ö–û–ô FACE ID
    private async logAuthAttempt(entry: AuthAttempt): Promise<void> {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ Convex —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ Face ID
            await this.convex.mutation("accessLogs:create", {
                userId: entry.userId,
                success: entry.success,
                ipAddress: entry.ipAddress,
                deviceInfo: entry.deviceInfo,
                method: entry.method,
                action: entry.action,
                details: entry.details,
                timestamp: entry.timestamp,
                // üî• –î–û–ë–ê–í–õ–Ø–ï–ú FACE ID –ü–û–õ–Ø
                ...(entry.faceIdConfidence && { faceIdConfidence: entry.faceIdConfidence }),
                ...(entry.faceIdQuality && { faceIdQuality: entry.faceIdQuality }),
                ...(entry.faceIdDeviceType && { faceIdDeviceType: entry.faceIdDeviceType })
            });

            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            const status = entry.success ? '‚úÖ' : '‚ùå';
            const faceIdInfo = entry.faceIdConfidence ? ` (Face ID: ${entry.faceIdConfidence}%, ${entry.faceIdQuality})` : '';
            console.log(`${status} Auth Log: ${entry.action} - ${entry.method} - $${entry.userId}$${faceIdInfo}`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    // üì± –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø FACE ID
    async registerFaceId(userId: string, faceData: {
        descriptor: number[];
        confidence: number;
        metadata?: any;
    }): Promise<{
        success: boolean;
        profileId?: string;
        error?: string;
    }> {
        try {
            console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Face ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞
            if (!faceData.descriptor || faceData.descriptor.length === 0) {
                return {
                    success: false,
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                };
            }

            if (faceData.confidence < 75) {
                return {
                    success: false,
                    error: '–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 75%)'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            const existingProfile = await this.convex.query("faceProfiles:getByUserId", {
                userId
            });

            if (existingProfile && existingProfile.isActive) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                await this.convex.mutation("faceProfiles:update", {
                    profileId: existingProfile._id,
                    descriptor: faceData.descriptor,
                    confidence: faceData.confidence,
                    metadata: faceData.metadata,
                    updatedAt: Date.now()
                });

                await this.logAuthAttempt({
                    userId,
                    action: 'face_id_updated',
                    method: 'face-id',
                    success: true,
                    details: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
                    timestamp: Date.now(),
                    faceIdConfidence: faceData.confidence,
                    faceIdQuality: faceData.confidence > 90 ? 'high' : faceData.confidence > 75 ? 'medium' : 'low'
                });

                return {
                    success: true,
                    profileId: existingProfile._id
                };
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                const profileId = await this.convex.mutation("faceProfiles:create", {
                    userId,
                    descriptor: faceData.descriptor,
                    confidence: faceData.confidence,
                    metadata: faceData.metadata,
                    isActive: true,
                    registeredAt: Date.now()
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.convex.mutation("users:updateFaceId", {
                    userId,
                    faceIdEnabled: true
                });

                await this.logAuthAttempt({
                    userId,
                    action: 'face_id_registered',
                    method: 'face-id',
                    success: true,
                    details: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω',
                    timestamp: Date.now(),
                    faceIdConfidence: faceData.confidence,
                    faceIdQuality: faceData.confidence > 90 ? 'high' : faceData.confidence > 75 ? 'medium' : 'low'
                });

                return {
                    success: true,
                    profileId
                };
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID:', error);

            await this.logAuthAttempt({
                userId,
                action: 'face_id_register_failed',
                method: 'face-id',
                success: false,
                details: `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error}`,
                timestamp: Date.now()
            });

            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
            };
        }
    }

    // üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê FACE ID
    async getFaceIdStatus(userId: string): Promise<{
        enabled: boolean;
        profileId?: string;
        registeredAt?: number;
        lastUsed?: number;
        confidence?: number;
    }> {
        try {
            const faceProfile = await this.convex.query("faceProfiles:getByUserId", {
                userId
            });

            if (!faceProfile || !faceProfile.isActive) {
                return { enabled: false };
            }

            return {
                enabled: true,
                profileId: faceProfile._id,
                registeredAt: faceProfile.registeredAt,
                lastUsed: faceProfile.lastUsed,
                confidence: faceProfile.confidence
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Face ID:', error);
            return { enabled: false };
        }
    }

    // üîí –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï FACE ID
    async disableFaceId(userId: string, disabledBy: string): Promise<{
        success: boolean;
        error?: string;
    }> {
        try {
            const faceProfile = await this.convex.query("faceProfiles:getByUserId", {
                userId
            });

            if (!faceProfile) {
                return {
                    success: false,
                    error: 'Face ID –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                };
            }

            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await this.convex.mutation("faceProfiles:deactivate", {
                profileId: faceProfile._id,
                disabledBy,
                disabledAt: Date.now()
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.convex.mutation("users:updateFaceId", {
                userId,
                faceIdEnabled: false
            });

            await this.logAuthAttempt({
                userId: disabledBy,
                action: 'face_id_disabled',
                method: 'face-id',
                success: true,
                details: `Face ID –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
                timestamp: Date.now()
            });

            return { success: true };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Face ID:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Face ID'
            };
        }
    }

    // üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê FACE ID
    async getFaceIdAnalytics(period: 'day' | 'week' | 'month' = 'week'): Promise<{
        totalFaceIdUsers: number;
        activeFaceIdUsers: number;
        faceIdLogins: number;
        faceIdRegistrations: number;
        averageConfidence: number;
        topDevices: Array<{ device: string; count: number }>;
    }> {
        try {
            const now = Date.now();
            const periodMs = {
                day: 24 * 60 * 60 * 1000,
                week: 7 * 24 * 60 * 60 * 1000,
                month: 30 * 24 * 60 * 60 * 1000
            };

            const fromDate = new Date(now - periodMs[period]);

            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Face ID
            const faceIdLogs = await this.getAccessLogs({
                method: 'face-id',
                dateFrom: fromDate,
                limit: 1000
            });

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Face ID –ø—Ä–æ—Ñ–∏–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
            const allFaceProfiles: FaceProfile[] = await this.convex.query("faceProfiles:getAll");
            const activeFaceProfiles = allFaceProfiles.filter((p: FaceProfile) => p.isActive);

            const faceIdLogins = faceIdLogs.filter(log =>
                log.action.includes('login') && log.success
            ).length;

            const faceIdRegistrations = faceIdLogs.filter(log =>
                log.action.includes('register') && log.success
            ).length;

            const averageConfidence = activeFaceProfiles.length > 0
                ? activeFaceProfiles.reduce((sum: number, p: FaceProfile) => sum + (p.confidence || 0), 0) / activeFaceProfiles.length
                : 0;

            // –¢–æ–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            const deviceCounts: Record<string, number> = {};
            faceIdLogs.forEach(log => {
                if (log.deviceInfo) {
                    const device = log.deviceInfo.split(' ')[0] || 'Unknown';
                    deviceCounts[device] = (deviceCounts[device] || 0) + 1;
                }
            });

            const topDevices = Object.entries(deviceCounts)
                .map(([device, count]) => ({ device, count }))
                .sort((a, b) => b.count - a.count)
                .slice(0, 5);

            return {
                totalFaceIdUsers: allFaceProfiles.length,
                activeFaceIdUsers: activeFaceProfiles.length,
                faceIdLogins,
                faceIdRegistrations,
                averageConfidence: Math.round(averageConfidence),
                topDevices
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Face ID:', error);
            return {
                totalFaceIdUsers: 0,
                activeFaceIdUsers: 0,
                faceIdLogins: 0,
                faceIdRegistrations: 0,
                averageConfidence: 0,
                topDevices: []
            };
        }
    }

    // üì± –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û QR-–ö–û–î–£
    private async authenticateWithQR(credentials: {
        qrCode?: string;
    }): Promise<AuthUser | null> {
        if (!credentials.qrCode) {
            return null;
        }

        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const qrData = JSON.parse(atob(credentials.qrCode));

            if (!qrData.userId || !qrData.timestamp) {
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è QR-–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
            const now = Date.now();
            const qrAge = now - qrData.timestamp;
            if (qrAge > 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç
                return null;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.convex.query("users:getById", {
                id: qrData.userId
            });

            if (!user) {
                return null;
            }

            return {
                id: user._id,
                email: user.email,
                name: user.name,
                role: user.role,
                isActive: user.isActive !== false,
                lastLogin: user.lastLogin,
                faceIdEnabled: user.faceIdEnabled
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ QR –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    // üé´ –°–û–ó–î–ê–ù–ò–ï –ï–î–ò–ù–û–ô –°–ï–°–°–ò–ò
    private async createUnifiedSession(
        user: AuthUser,
        options: {
            method: string;
            ipAddress?: string;
            deviceInfo?: string;
        }
    ): Promise<AuthSession> {
        const now = new Date();

        const fullUser: User = {
            ...user,
            createdAt: now,
            updatedAt: now
        };

        const sessionId = await createSession(fullUser);

        const session = await getSession(sessionId);
        if (!session) {
            throw new Error('Failed to create session');
        }

        return {
            id: sessionId,
            user,
            method: options.method as 'password' | 'face-id' | 'qr-code' | 'token',
            createdAt: session.createdAt,
            expiresAt: session.expiresAt,
            ipAddress: options.ipAddress,
            deviceInfo: options.deviceInfo
        };
    }

    // üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–û–°–õ–ï–î–ù–ï–ì–û –í–•–û–î–ê
    private async updateLastLogin(userId: string, userRole: UserRole): Promise<void> {
        try {
            await this.convex.mutation("users:updateLastLogin", {
                userId,
                timestamp: Date.now()
            });

        } catch (error) {
            console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞:', error);
        }
    }

    // üîê –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø
    private async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
        try {
            return password === 'password123' || hashedPassword === btoa(password + "salt");
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
            return false;
        }
    }

    // üö™ –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´
    async logout(sessionId: string, options?: {
        ipAddress?: string;
        deviceInfo?: string;
    }): Promise<{ success: boolean; error?: string }> {
        try {
            const session = await getSession(sessionId);

            if (session) {
                // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
                await this.logAuthAttempt({
                    userId: session.user.id,
                    action: 'logout',
                    method: 'token',
                    success: true,
                    ipAddress: options?.ipAddress,
                    deviceInfo: options?.deviceInfo,
                    details: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
                    timestamp: Date.now()
                });
            }

            // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            const logoutSuccess = simpleLogout(sessionId);

            console.log(`üëã UnifiedAuth: –≤—ã—Ö–æ–¥ ${logoutSuccess ? '—É—Å–ø–µ—à–µ–Ω' : '–Ω–µ—É–¥–∞—á–µ–Ω'}`);

            return { success: logoutSuccess };

        } catch (error) {
            console.error('üí• UnifiedAuth: –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
            };
        }
    }

    // üîç –ü–†–û–í–ï–†–ö–ê –°–ï–°–°–ò–ò
    async validateSession(sessionId: string): Promise<{
        valid: boolean;
        session?: AuthSession;
        error?: string;
    }> {
        try {
            const session = await getSession(sessionId);

            if (!session) {
                return { valid: false, error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
            }

            return {
                valid: true,
                session: {
                    id: sessionId,
                    user: {
                        id: session.user.id,
                        email: session.user.email,
                        name: session.user.name,
                        role: session.user.role,
                        isActive: true
                    },
                    method: 'token',
                    createdAt: session.createdAt,
                    expiresAt: session.expiresAt
                }
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
            return {
                valid: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏'
            };
        }
    }

    // üîë –ü–†–û–í–ï–†–ö–ê JWT –¢–û–ö–ï–ù–ê
    async validateToken(token: string): Promise<{
        valid: boolean;
        user?: AuthUser;
        error?: string;
    }> {
        try {
            const decoded = await verifyToken(token);

            if (!decoded) {
                return { valid: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' };
            }

            return {
                valid: true,
                user: {
                    id: decoded.userId,
                    email: decoded.email,
                    name: decoded.name,
                    role: decoded.role as UserRole,
                    isActive: true
                }
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return {
                valid: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞'
            };

        }
    }

    // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –õ–û–ì–û–í –î–û–°–¢–£–ü–ê
    async getAccessLogs(filters?: {
        userId?: string;
        success?: boolean;
        method?: string;
        limit?: number;
        dateFrom?: Date;
        dateTo?: Date;
    }): Promise<LogEntry[]> {
        try {
            let logs: ConvexLogEntry[];

            if (filters?.userId) {
                logs = await this.convex.query("accessLogs:getByUserIdSafe", {
                    userId: filters.userId
                });
            } else {
                logs = await this.convex.query("accessLogs:getRecentLogs", {
                    limit: filters?.limit || 50
                });
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
            if (filters?.success !== undefined) {
                logs = logs.filter((log: ConvexLogEntry) => log.success === filters.success);
            }

            if (filters?.method) {
                logs = logs.filter((log: ConvexLogEntry) => log.method === filters.method);
            }

            if (filters?.dateFrom) {
                logs = logs.filter((log: ConvexLogEntry) => log.timestamp >= filters.dateFrom!.getTime());
            }

            if (filters?.dateTo) {
                logs = logs.filter((log: ConvexLogEntry) => log.timestamp <= filters.dateTo!.getTime());
            }

            return logs.map((log: ConvexLogEntry): LogEntry => ({
                userId: log.userId,
                action: log.action || 'login',
                method: (log.method || 'password') as LogEntry['method'],
                success: log.success,
                ipAddress: log.ipAddress,
                deviceInfo: log.deviceInfo,
                details: log.details,
                timestamp: log.timestamp
            }));

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
            return [];
        }
    }

    // üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø
    async requestPasswordReset(email: string, userType: 'staff' | 'member'): Promise<{
        success: boolean;
        message?: string;
        token?: string;
        error?: string;
    }> {
        try {
            const result = await this.convex.mutation("auth:requestPasswordReset", {
                email,
                userType
            });

            if (result.success) {
                await this.logAuthAttempt({
                    userId: 'system',
                    action: 'password_reset_requested',
                    method: 'token',
                    success: true,
                    details: `–ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è ${email}`,
                    timestamp: Date.now()
                });
            }

            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞'
            };
        }
    }

    // üîê –°–ë–†–û–° –ü–ê–†–û–õ–Ø
    async resetPassword(token: string, newPassword: string, userType: 'staff' | 'member'): Promise<{
        success: boolean;
        message?: string;
        error?: string;
    }> {
        try {
            const result = await this.convex.mutation("auth:resetPassword", {
                token,
                newPassword,
                userType
            });

            if (result.success) {
                await this.logAuthAttempt({
                    userId: 'system',
                    action: 'password_reset_completed',
                    method: 'token',
                    success: true,
                    details: `–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω`,
                    timestamp: Date.now()
                });
            }

            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è'
            };
        }
    }

    // üì± –ì–ï–ù–ï–†–ê–¶–ò–Ø QR-–ö–û–î–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async generateUserQR(userId: string): Promise<{
        success: boolean;
        qrCode?: string;
        error?: string;
    }> {
        try {
            const qrData = {
                userId,
                timestamp: Date.now(),
                type: 'user_access'
            };

            const qrCode = btoa(JSON.stringify(qrData));

            await this.logAuthAttempt({
                userId,
                action: 'qr_generated',
                method: 'qr-code',
                success: true,
                details: 'QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                timestamp: Date.now()
            });

            return {
                success: true,
                qrCode
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞'
            };
        }
    }

    // üë§ –ù–ê–°–¢–†–û–ô–ö–ê FACE ID
    async setupFaceId(userId: string, faceData: string): Promise<{
        success: boolean;
        message?: string;
        error?: string;
    }> {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω

            await this.convex.mutation("users:updateFaceId", {
                userId,
                faceIdEnabled: true,
                faceData // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥—É—Ç —Ö–µ—à–∏/–≤–µ–∫—Ç–æ—Ä—ã –ª–∏—Ü–∞
            });

            await this.logAuthAttempt({
                userId,
                action: 'face_id_setup',
                method: 'face-id',
                success: true,
                details: 'Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                timestamp: Date.now()
            });

            return {
                success: true,
                message: 'Face ID —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Face ID:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Face ID'
            };
        }
    }

    // üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    async getSecurityAnalytics(period: 'day' | 'week' | 'month' = 'week'): Promise<{
        totalLogins: number;
        successfulLogins: number;
        failedAttempts: number;
        uniqueUsers: number;
        methodBreakdown: Record<string, number>;
        hourlyDistribution: Record<string, number>;
        topFailureReasons: Array<{ reason: string; count: number }>;
    }> {
        try {
            const now = Date.now();
            const periodMs = {
                day: 24 * 60 * 60 * 1000,
                week: 7 * 24 * 60 * 60 * 1000,
                month: 30 * 24 * 60 * 60 * 1000
            };

            const fromDate = new Date(now - periodMs[period]);
            const logs = await this.getAccessLogs({
                dateFrom: fromDate,
                limit: 1000
            });

            const analytics = {
                totalLogins: logs.length,
                successfulLogins: logs.filter((log: LogEntry) => log.success).length,
                failedAttempts: logs.filter((log: LogEntry) => !log.success).length,
                uniqueUsers: new Set(logs.map((log: LogEntry) => log.userId)).size,
                methodBreakdown: {} as Record<string, number>,
                hourlyDistribution: {} as Record<string, number>,
                topFailureReasons: [] as Array<{ reason: string; count: number }>
            };

            // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º
            logs.forEach((log: LogEntry) => {
                analytics.methodBreakdown[log.method] =
                    (analytics.methodBreakdown[log.method] || 0) + 1;
            });

            // –ü–æ—á–∞—Å–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            logs.forEach((log: LogEntry) => {
                const hour = new Date(log.timestamp).getHours().toString();
                analytics.hourlyDistribution[hour] =
                    (analytics.hourlyDistribution[hour] || 0) + 1;
            });

            // –¢–æ–ø –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á
            const failureReasons: Record<string, number> = {};
            logs.filter((log: LogEntry) => !log.success).forEach((log: LogEntry) => {
                const reason = log.details || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
                failureReasons[reason] = (failureReasons[reason] || 0) + 1;
            });

            analytics.topFailureReasons = Object.entries(failureReasons)
                .map(([reason, count]) => ({ reason, count }))
                .sort((a, b) => b.count - a.count)
                .slice(0, 5);

            return analytics;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            return {
                totalLogins: 0,
                successfulLogins: 0,
                failedAttempts: 0,
                uniqueUsers: 0,
                methodBreakdown: {},
                hourlyDistribution: {},
                topFailureReasons: []
            };
        }
    }

    // üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –õ–û–ì–û–í
    async cleanupOldLogs(olderThanDays: number = 90): Promise<{
        success: boolean;
        deletedCount?: number;
        error?: string;
    }> {
        try {
            const cutoffDate = Date.now() - (olderThanDays * 24 * 60 * 60 * 1000);

            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Convex
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            await this.logAuthAttempt({
                userId: 'system',
                action: 'logs_cleanup',
                method: 'token',
                success: true,
                details: `–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ ${olderThanDays} –¥–Ω–µ–π`,
                timestamp: Date.now()
            });

            return {
                success: true,
                deletedCount: 0 // –ü–æ–∫–∞ 0, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤'
            };
        }
    }

    // üîí –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async blockUser(userId: string, reason: string, blockedBy: string): Promise<{
        success: boolean;
        error?: string;
    }> {
        try {
            await this.convex.mutation("users:blockUser", {
                userId,
                isActive: false,
                blockedReason: reason,
                blockedBy,
                blockedAt: Date.now()
            });

            await this.logAuthAttempt({
                userId: blockedBy,
                action: 'user_blocked',
                method: 'token',
                success: true,
                details: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
                timestamp: Date.now()
            });

            return { success: true };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            };
        }
    }

    // üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async unblockUser(userId: string, unblockedBy: string): Promise<{
        success: boolean;
        error?: string;
    }> {
        try {
            await this.convex.mutation("users:unblockUser", {
                userId,
                isActive: true,
                unblockedBy,
                unblockedAt: Date.now()
            });

            await this.logAuthAttempt({
                userId: unblockedBy,
                action: 'user_unblocked',
                method: 'token',
                success: true,
                details: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
                timestamp: Date.now()
            });

            return { success: true };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            };
        }
    }

    // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async getUserStats(userId: string): Promise<{
        totalLogins: number;
        successfulLogins: number;
        failedAttempts: number;
        lastLogin?: number;
        preferredMethod: string;
        loginsByMethod: Record<string, number>;
        recentActivity: LogEntry[];
    }> {
        try {
            const logs = await this.getAccessLogs({
                userId,
                limit: 100
            });

            const loginLogs = logs.filter((log: LogEntry) => log.action.includes('login'));
            const successfulLogins = loginLogs.filter((log: LogEntry) => log.success);
            const failedLogins = loginLogs.filter((log: LogEntry) => !log.success);

            // –ü–æ–¥—Å—á–µ—Ç –ø–æ –º–µ—Ç–æ–¥–∞–º
            const methodCounts: Record<string, number> = {};
            successfulLogins.forEach((log: LogEntry) => {
                methodCounts[log.method] = (methodCounts[log.method] || 0) + 1;
            });

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            const preferredMethod = Object.entries(methodCounts)
                .sort(([, a], [, b]) => b - a)[0]?.[0] || 'password';

            return {
                totalLogins: loginLogs.length,
                successfulLogins: successfulLogins.length,
                failedAttempts: failedLogins.length,
                lastLogin: successfulLogins[0]?.timestamp,
                preferredMethod,
                loginsByMethod: methodCounts,
                recentActivity: logs.slice(0, 10)
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return {
                totalLogins: 0,
                successfulLogins: 0,
                failedAttempts: 0,
                preferredMethod: 'password',
                loginsByMethod: {},
                recentActivity: []
            };
        }
    }

    // üîê –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø
    async changePassword(userId: string, currentPassword: string, newPassword: string): Promise<{
        success: boolean;
        error?: string;
    }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.convex.query("users:getById", { id: userId });
            if (!user) {
                return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            const isCurrentPasswordValid = await this.verifyPassword(currentPassword, user.password);
            if (!isCurrentPasswordValid) {
                await this.logAuthAttempt({
                    userId,
                    action: 'password_change_failed',
                    method: 'password',
                    success: false,
                    details: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
                    timestamp: Date.now()
                });

                return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' };
            }

            // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ bcrypt)
            const hashedNewPassword = btoa(newPassword + "salt");

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            await this.convex.mutation("users:updatePassword", {
                userId,
                newPassword: hashedNewPassword
            });

            await this.logAuthAttempt({
                userId,
                action: 'password_changed',
                method: 'password',
                success: true,
                details: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
                timestamp: Date.now()
            });

            return { success: true };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è'
            };
        }
    }

    // üîç –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    async detectSuspiciousActivity(userId?: string): Promise<{
        suspiciousLogins: LogEntry[];
        multipleFailedAttempts: Array<{ userId: string; count: number; lastAttempt: number }>;
        unusualLoginTimes: LogEntry[];
        newDeviceLogins: LogEntry[];
    }> {
        try {
            const now = Date.now();
            const dayAgo = now - (24 * 60 * 60 * 1000);

            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            const recentLogs = await this.getAccessLogs({
                dateFrom: new Date(dayAgo),
                limit: 1000
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            const logs = userId
                ? recentLogs.filter((log: LogEntry) => log.userId === userId)
                : recentLogs;

            // 1. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã (–º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥)
            const suspiciousLogins = logs.filter((log: LogEntry) =>
                !log.success && log.action.includes('login')
            );

            // 2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const failedAttemptsByUser: Record<string, LogEntry[]> = {};
            suspiciousLogins.forEach((log: LogEntry) => {
                if (!failedAttemptsByUser[log.userId]) {
                    failedAttemptsByUser[log.userId] = [];
                }
                failedAttemptsByUser[log.userId].push(log);
            });

            const multipleFailedAttempts = Object.entries(failedAttemptsByUser)
                .filter(([, attempts]) => attempts.length >= 3)
                .map(([userId, attempts]) => ({
                    userId,
                    count: attempts.length,
                    lastAttempt: Math.max(...attempts.map((log: LogEntry) => log.timestamp))
                }));

            // 3. –ù–µ–æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ (–Ω–æ—á–Ω—ã–µ —á–∞—Å—ã 00:00-06:00)
            const unusualLoginTimes = logs.filter((log: LogEntry) => {
                const hour = new Date(log.timestamp).getHours();
                return log.success && log.action.includes('login') && (hour >= 0 && hour <= 6);
            });

            // 4. –í—Ö–æ–¥—ã —Å –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            const newDeviceLogins = logs.filter((log: LogEntry) =>
                log.success &&
                log.action.includes('login') &&
                log.deviceInfo &&
                log.deviceInfo.includes('new') // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ
            );

            return {
                suspiciousLogins: suspiciousLogins.slice(0, 20),
                multipleFailedAttempts,
                unusualLoginTimes,
                newDeviceLogins
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
            return {
                suspiciousLogins: [],
                multipleFailedAttempts: [],
                unusualLoginTimes: [],
                newDeviceLogins: []
            };
        }
    }

    // üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    async sendSecurityNotification(userId: string, type: 'login' | 'password_change' | 'suspicious_activity', details: {
        ipAddress?: string;
        deviceInfo?: string;
        location?: string;
        timestamp: number;
    }): Promise<{ success: boolean; error?: string }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.convex.query("users:getById", { id: userId });
            if (!user) {
                return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }

            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = {
                userId,
                type,
                title: this.getNotificationTitle(type),
                message: this.getNotificationMessage(type, details),
                details,
                read: false,
                createdAt: Date.now()
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await this.convex.mutation("notifications:create", notification);

            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email/SMS/push
            console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}: ${notification.title}`);

            await this.logAuthAttempt({
                userId: 'system',
                action: 'security_notification_sent',
                method: 'token',
                success: true,
                details: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
                timestamp: Date.now()
            });

            return { success: true };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            };
        }
    }

    // üìù –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    private getNotificationTitle(type: string): string {
        switch (type) {
            case 'login':
                return '–ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç';
            case 'password_change':
                return '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω';
            case 'suspicious_activity':
                return '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
            default:
                return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
        }
    }

    private getNotificationMessage(type: string, details: any): string {
        const time = new Date(details.timestamp).toLocaleString('ru-RU');
        const device = details.deviceInfo || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        const ip = details.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π IP';

        switch (type) {
            case 'login':
                return `–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç ${time} —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device} (IP: ${ip})`;
            case 'password_change':
                return `–ü–∞—Ä–æ–ª—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω ${time}`;
            case 'suspicious_activity':
                return `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ ${time}`;
            default:
                return `–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ ${time}`;
        }
    }

    // üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–†–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    async autoBlockOnSuspiciousActivity(): Promise<{
        blockedUsers: string[];
        notifications: string[];
    }> {
        try {
            const suspicious = await this.detectSuspiciousActivity();
            const blockedUsers: string[] = [];
            const notifications: string[] = [];

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (>= 5)
            for (const attempt of suspicious.multipleFailedAttempts) {
                if (attempt.count >= 5) {
                    const blockResult = await this.blockUser(
                        attempt.userId,
                        `–ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${attempt.count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞`,
                        'system'
                    );

                    if (blockResult.success) {
                        blockedUsers.push(attempt.userId);

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await this.sendSecurityNotification(attempt.userId, 'suspicious_activity', {
                            timestamp: attempt.lastAttempt
                        });
                        notifications.push(attempt.userId);
                    }
                }
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if (blockedUsers.length > 0) {
                await this.logAuthAttempt({
                    userId: 'system',
                    action: 'auto_block_executed',
                    method: 'token',
                    success: true,
                    details: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${blockedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
                    timestamp: Date.now()
                });
            }

            return { blockedUsers, notifications };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
            return { blockedUsers: [], notifications: [] };
        }
    }

    // üìä –≠–ö–°–ü–û–†–¢ –õ–û–ì–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    async exportSecurityLogs(format: 'json' | 'csv' = 'json', filters?: {
        dateFrom?: Date;
        dateTo?: Date;
        userId?: string;
        success?: boolean;
    }): Promise<{
        success: boolean;
        data?: string;
        filename?: string;
        error?: string;
    }> {
        try {
            const logs = await this.getAccessLogs({
                ...filters,
                limit: 10000 // –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            });

            const timestamp = new Date().toISOString().split('T')[0];
            const filename = `security_logs_${timestamp}.${format}`;

            let data: string;

            if (format === 'csv') {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
                const headers = ['–í—Ä–µ–º—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–î–µ–π—Å—Ç–≤–∏–µ', '–ú–µ—Ç–æ–¥', '–£—Å–ø–µ—Ö', 'IP', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–î–µ—Ç–∞–ª–∏'];
                const csvRows = [
                    headers.join(','),
                    ...logs.map((log: LogEntry) => [
                        new Date(log.timestamp).toISOString(),
                        log.userId,
                        log.action,
                        log.method,
                        log.success ? '–î–∞' : '–ù–µ—Ç',
                        log.ipAddress || '',
                        log.deviceInfo || '',
                        (log.details || '').replace(/,/g, ';') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ
                    ].join(','))
                ];
                data = csvRows.join('\n');
            } else {
                // JSON —Ñ–æ—Ä–º–∞—Ç
                data = JSON.stringify({
                    exportDate: new Date().toISOString(),
                    totalRecords: logs.length,
                    filters,
                    logs
                }, null, 2);
            }

            await this.logAuthAttempt({
                userId: 'system',
                action: 'logs_exported',
                method: 'token',
                success: true,
                details: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${logs.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`,
                timestamp: Date.now()
            });

            return {
                success: true,
                data,
                filename
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ–≥–æ–≤'
            };
        }
    }

    // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø FACE ID –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

    // üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê FACE ID
    async getFaceIdSecurityReport(userId?: string): Promise<{
        userStats?: {
            totalAttempts: number;
            successfulLogins: number;
            failedAttempts: number;
            averageConfidence: number;
            lastLogin?: number;
            devicesUsed: string[];
        };
        systemStats: {
            totalFaceIdUsers: number;
            activeFaceIdUsers: number;
            todayLogins: number;
            weeklyLogins: number;
            averageSystemConfidence: number;
            securityAlerts: Array<{
                type: string;
                message: string;
                timestamp: number;
                severity: 'low' | 'medium' | 'high';
            }>;
        };
    }> {
        try {
            const now = Date.now();
            const oneDayAgo = now - (24 * 60 * 60 * 1000);
            const oneWeekAgo = now - (7 * 24 * 60 * 60 * 1000);

            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Face ID
            const faceIdLogs = await this.getAccessLogs({
                method: 'face-id',
                dateFrom: new Date(oneWeekAgo),
                limit: 1000,
                ...(userId && { userId })
            });

            const systemStats = {
                totalFaceIdUsers: 0,
                activeFaceIdUsers: 0,
                todayLogins: 0,
                weeklyLogins: 0,
                averageSystemConfidence: 0,
                securityAlerts: [] as Array<{
                    type: string;
                    message: string;
                    timestamp: number;
                    severity: 'low' | 'medium' | 'high';
                }>
            };

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ
            const allFaceProfiles: FaceProfile[] = await this.convex.query("faceProfiles:getAll");
            systemStats.totalFaceIdUsers = allFaceProfiles.length;
            systemStats.activeFaceIdUsers = allFaceProfiles.filter(p => p.isActive).length;

            // –ü–æ–¥—Å—á–µ—Ç –≤—Ö–æ–¥–æ–≤
            systemStats.todayLogins = faceIdLogs.filter(log =>
                log.timestamp > oneDayAgo &&
                log.action.includes('login') &&
                log.success
            ).length;

            systemStats.weeklyLogins = faceIdLogs.filter(log =>
                log.action.includes('login') &&
                log.success
            ).length;

            // –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            if (allFaceProfiles.length > 0) {
                systemStats.averageSystemConfidence = Math.round(
                    allFaceProfiles.reduce((sum, p) => sum + (p.confidence || 0), 0) / allFaceProfiles.length
                );
            }

            // –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const failedAttempts = faceIdLogs.filter(log => !log.success);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã
            if (failedAttempts.length > 10) {
                systemStats.securityAlerts.push({
                    type: 'multiple_failed_attempts',
                    message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${failedAttempts.length} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ Face ID –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é`,
                    timestamp: now,
                    severity: failedAttempts.length > 50 ? 'high' : 'medium'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            const lowConfidenceLogins = faceIdLogs.filter(log =>
                log.success &&
                log.action.includes('login') &&
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ confidence —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ details –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
                log.details?.includes('confidence') &&
                parseInt(log.details.match(/\d+/)?.[0] || '0') < 80
            );

            if (lowConfidenceLogins.length > 5) {
                systemStats.securityAlerts.push({
                    type: 'low_confidence_logins',
                    message: `${lowConfidenceLogins.length} –≤—Ö–æ–¥–æ–≤ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é Face ID (<80%)`,
                    timestamp: now,
                    severity: 'medium'
                });
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            let userStats;
            if (userId) {
                const userLogs = faceIdLogs.filter(log => log.userId === userId);
                const userLoginLogs = userLogs.filter(log => log.action.includes('login'));
                const successfulUserLogins = userLoginLogs.filter(log => log.success);
                const failedUserLogins = userLoginLogs.filter(log => !log.success);

                // üî• –ò–°–ü–†–ê–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ –£–°–¢–†–û–ô–°–¢–í
                const devicesUsed = [...new Set(
                    userLogs
                        .map(log => log.deviceInfo?.split(' ')[0])
                        .filter((device): device is string => Boolean(device)) // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
                )];

                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                const confidenceValues = userLogs
                    .map(log => {
                        const match = log.details?.match(/confidence[:\s]*(\d+)/i);
                        return match ? parseInt(match[1]) : null;
                    })
                    .filter((value): value is number => value !== null); // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä

                const averageConfidence = confidenceValues.length > 0
                    ? Math.round(confidenceValues.reduce((sum, val) => sum + val, 0) / confidenceValues.length)
                    : 0;

                userStats = {
                    totalAttempts: userLoginLogs.length,
                    successfulLogins: successfulUserLogins.length,
                    failedAttempts: failedUserLogins.length,
                    averageConfidence,
                    lastLogin: successfulUserLogins[0]?.timestamp,
                    devicesUsed
                };
            }

            return {
                ...(userStats && { userStats }),
                systemStats
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Face ID:', error);
            return {
                systemStats: {
                    totalFaceIdUsers: 0,
                    activeFaceIdUsers: 0,
                    todayLogins: 0,
                    weeklyLogins: 0,
                    averageSystemConfidence: 0,
                    securityAlerts: []
                }
            };
        }
    }

    // üîí –í–†–ï–ú–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê FACE ID
    async temporaryDisableFaceId(userId: string, durationMinutes: number, reason: string, disabledBy: string): Promise<{
        success: boolean;
        unblockAt?: number;
        error?: string;
    }> {
        try {
            const unblockAt = Date.now() + (durationMinutes * 60 * 1000);

            await this.convex.mutation("faceProfiles:temporaryDisable", {
                userId,
                disabledUntil: unblockAt,
                reason,
                disabledBy,
                disabledAt: Date.now()
            });

            await this.logAuthAttempt({
                userId: disabledBy,
                action: 'face_id_temp_disabled',
                method: 'face-id',
                success: true,
                details: `Face ID –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è ${userId} –Ω–∞ ${durationMinutes} –º–∏–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
                timestamp: Date.now()
            });

            return {
                success: true,
                unblockAt
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Face ID:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Face ID'
            };
        }
    }

    // üîê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–í–¢–û–†–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø FACE ID
    async forceFaceIdReregistration(userId: string, reason: string, initiatedBy: string): Promise<{
        success: boolean;
        error?: string;
    }> {
        try {
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            const currentProfile = await this.convex.query("faceProfiles:getByUserId", { userId });

            if (currentProfile) {
                await this.convex.mutation("faceProfiles:deactivate", {
                    profileId: currentProfile._id,
                    disabledBy: initiatedBy,
                    disabledAt: Date.now()
                });
            }

            // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await this.convex.mutation("users:requireFaceIdReregistration", {
                userId,
                reason,
                requiredBy: initiatedBy,
                requiredAt: Date.now()
            });

            await this.logAuthAttempt({
                userId: initiatedBy,
                action: 'face_id_reregistration_required',
                method: 'face-id',
                success: true,
                details: `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Face ID –¥–ª—è ${userId}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
                timestamp: Date.now()
            });

            return { success: true };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID'
            };
        }
    }

    // üì± –ü–†–û–í–ï–†–ö–ê –£–°–¢–†–û–ô–°–¢–í–ê –î–õ–Ø FACE ID
    async validateFaceIdDevice(deviceInfo: string, userId: string): Promise<{
        allowed: boolean;
        reason?: string;
        requiresApproval?: boolean;
    }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userLogs = await this.getAccessLogs({
                userId,
                method: 'face-id',
                limit: 100
            });

            const knownDevices = new Set(
                userLogs
                    .filter(log => log.success)
                    .map(log => log.deviceInfo?.split(' ')[0])
                    .filter(Boolean)
            );

            const currentDevice = deviceInfo.split(' ')[0];

            // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–≤–µ—Å—Ç–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º
            if (knownDevices.has(currentDevice)) {
                return { allowed: true };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
            const recentNewDevices = userLogs.filter(log =>
                log.timestamp > oneDayAgo &&
                !knownDevices.has(log.deviceInfo?.split(' ')[0] || '')
            );

            // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - —Ç—Ä–µ–±—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è
            if (recentNewDevices.length >= 3) {
                return {
                    allowed: false,
                    reason: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
                    requiresApproval: true
                };
            }

            // –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã
            return {
                allowed: true,
                requiresApproval: true // –¢—Ä–µ–±—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Face ID:', error);
            return {
                allowed: false,
                reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
            };
        }
    }

    // üéØ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ FACE ID
    async getAdaptiveFaceIdSettings(userId: string): Promise<{
        requiredConfidence: number;
        allowedDevices: string[];
        riskLevel: 'low' | 'medium' | 'high';
        recommendations: string[];
    }> {
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userStats = await this.getUserStats(userId);
            const faceIdLogs = await this.getAccessLogs({
                userId,
                method: 'face-id',
                limit: 50
            });

            let riskLevel: 'low' | 'medium' | 'high' = 'low';
            let requiredConfidence = 75; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            const recommendations: string[] = [];

            // –ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            const failedAttempts = faceIdLogs.filter(log => !log.success).length;
            const totalAttempts = faceIdLogs.length;
            const failureRate = totalAttempts > 0 ? failedAttempts / totalAttempts : 0;

            if (failureRate > 0.3) {
                riskLevel = 'high';
                requiredConfidence = 90;
                recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Face ID');
                recommendations.push('–í–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
            } else if (failureRate > 0.1) {
                riskLevel = 'medium';
                requiredConfidence = 85;
                recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Face ID');
            }

            // üî• –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ê–ù–ê–õ–ò–ó –£–°–¢–†–û–ô–°–¢–í
            const devices = [...new Set(
                faceIdLogs
                    .map(log => log.deviceInfo?.split(' ')[0])
                    .filter((device): device is string => Boolean(device)) // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            )];

            if (devices.length > 5) {
                riskLevel = riskLevel === 'low' ? 'medium' : 'high';
                recommendations.push('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
            }

            // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            const nightLogins = faceIdLogs.filter(log => {
                const hour = new Date(log.timestamp).getHours();
                return hour >= 0 && hour <= 6;
            }).length;

            if (nightLogins > totalAttempts * 0.3) {
                recommendations.push('–ú–Ω–æ–≥–æ –Ω–æ—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è');
            }

            return {
                requiredConfidence,
                allowedDevices: devices,
                riskLevel,
                recommendations
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Face ID:', error);
            return {
                requiredConfidence: 85,
                allowedDevices: [],
                riskLevel: 'medium',
                recommendations: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞']
            };
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const unifiedAuth = new UnifiedAuthSystem();

// üî• –ü–û–õ–ù–´–ô –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í
export default {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    login: unifiedAuth.login.bind(unifiedAuth),
    logout: unifiedAuth.logout.bind(unifiedAuth),
    validateSession: unifiedAuth.validateSession.bind(unifiedAuth),
    validateToken: unifiedAuth.validateToken.bind(unifiedAuth),

    // Face ID –º–µ—Ç–æ–¥—ã
    registerFaceId: unifiedAuth.registerFaceId.bind(unifiedAuth),
    getFaceIdStatus: unifiedAuth.getFaceIdStatus.bind(unifiedAuth),
    disableFaceId: unifiedAuth.disableFaceId.bind(unifiedAuth),
    getFaceIdAnalytics: unifiedAuth.getFaceIdAnalytics.bind(unifiedAuth),
    setupFaceId: unifiedAuth.setupFaceId.bind(unifiedAuth),

    // üî• –ù–û–í–´–ï FACE ID –ú–ï–¢–û–î–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    getFaceIdSecurityReport: unifiedAuth.getFaceIdSecurityReport.bind(unifiedAuth),
    temporaryDisableFaceId: unifiedAuth.temporaryDisableFaceId.bind(unifiedAuth),
    forceFaceIdReregistration: unifiedAuth.forceFaceIdReregistration.bind(unifiedAuth),
    validateFaceIdDevice: unifiedAuth.validateFaceIdDevice.bind(unifiedAuth),
    getAdaptiveFaceIdSettings: unifiedAuth.getAdaptiveFaceIdSettings.bind(unifiedAuth),

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    blockUser: unifiedAuth.blockUser.bind(unifiedAuth),
    unblockUser: unifiedAuth.unblockUser.bind(unifiedAuth),
    changePassword: unifiedAuth.changePassword.bind(unifiedAuth),

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    getAccessLogs: unifiedAuth.getAccessLogs.bind(unifiedAuth),
    getSecurityAnalytics: unifiedAuth.getSecurityAnalytics.bind(unifiedAuth),
    getUserStats: unifiedAuth.getUserStats.bind(unifiedAuth),
    detectSuspiciousActivity: unifiedAuth.detectSuspiciousActivity.bind(unifiedAuth),

    // –£—Ç–∏–ª–∏—Ç—ã
    generateUserQR: unifiedAuth.generateUserQR.bind(unifiedAuth),
    requestPasswordReset: unifiedAuth.requestPasswordReset.bind(unifiedAuth),
    resetPassword: unifiedAuth.resetPassword.bind(unifiedAuth),
    exportSecurityLogs: unifiedAuth.exportSecurityLogs.bind(unifiedAuth),

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    sendSecurityNotification: unifiedAuth.sendSecurityNotification.bind(unifiedAuth),
    autoBlockOnSuspiciousActivity: unifiedAuth.autoBlockOnSuspiciousActivity.bind(unifiedAuth),

    // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    cleanupOldLogs: unifiedAuth.cleanupOldLogs.bind(unifiedAuth)
};



