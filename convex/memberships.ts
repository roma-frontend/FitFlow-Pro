import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserMemberships = query({
  args: { userId: v.id("users") },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", args.userId);

    const memberships = await ctx.db.query("memberships")
      .filter((q) => q.and(
        q.eq(q.field("userId"), args.userId),
        q.eq(q.field("isActive"), true)
      ))
      .order("desc")
      .collect();

    console.log("‚úÖ Convex Query: –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:", memberships.length);
    return memberships;
  },
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getCurrentMembership = query({
  args: { userId: v.id("users") },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.userId);

    const now = Date.now();

    const membership = await ctx.db.query("memberships")
      .filter((q) => q.and(
        q.eq(q.field("userId"), args.userId),
        q.eq(q.field("isActive"), true),
        q.gt(q.field("expiresAt"), now)
      ))
      .order("desc")
      .first();

    if (membership) {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
      const remainingDays = Math.max(0, Math.ceil((membership.expiresAt - now) / (1000 * 60 * 60 * 24)));

      console.log("‚úÖ Convex Query: –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:", remainingDays);

      return {
        ...membership,
        remainingDays,
        status: remainingDays > 0 ? 'active' : 'expired'
      };
    }

    console.log("‚ùå Convex Query: –ê–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return null;
  },
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
export const getPlans = query({
  handler: async (ctx) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");

    const plans = await ctx.db.query("membershipPlans")
      .filter((q) => q.eq(q.field("isActive"), true))
      .order("asc")
      .collect();

    console.log("‚úÖ Convex Query: –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤:", plans.length);
    return plans;
  },
});

export const createFromOrder = mutation({
  args: {
    orderData: v.object({
      _id: v.id("membershipOrders"),
      userId: v.id("users"),
      planId: v.id("membershipPlans"),
      planType: v.string(),
      planName: v.string(),
      price: v.number(),
      duration: v.number(),
      autoRenew: v.boolean(),
      userEmail: v.string(),
      userName: v.string(),
      userPhone: v.optional(v.string()),
      paymentIntentId: v.string(),
      paymentId: v.string(),
      paidAt: v.number(),
    }),
    paymentIntentId: v.string(),
  },
  handler: async (ctx, args) => {
    // –û—á–∏—â–∞–µ–º orderData –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
    const src = args.orderData as any;
    const orderData = {
      _id: src._id,
      userId: src.userId,
      planId: src.planId,
      planType: src.planType,
      planName: src.planName,
      price: src.price,
      duration: src.duration,
      autoRenew: src.autoRenew,
      userEmail: src.userEmail,
      userName: src.userName,
      userPhone: src.userPhone,
      paymentIntentId: src.paymentIntentId,
      paymentId: src.paymentId,
      paidAt: src.paidAt,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingMembership = await ctx.db
      .query("memberships")
      .filter((q) =>
        q.and(
          q.eq(q.field("userId"), orderData.userId),
          q.eq(q.field("status"), "active")
        )
      )
      .unique();

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    if (existingMembership) {
      await ctx.db.patch(existingMembership._id, {
        status: "replaced",
        updatedAt: Date.now(),
      });
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã
    const startDate = Date.now();
    const expiresAt = startDate + (orderData.duration * 24 * 60 * 60 * 1000);
    const remainingDays = Math.ceil((expiresAt - startDate) / (24 * 60 * 60 * 1000));

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    const membershipData = {
      userId: orderData.userId,
      planId: orderData.planId,
      type: orderData.planType,
      status: "active" as const,
      startDate,
      expiresAt,
      remainingDays,
      price: orderData.price,
      autoRenew: orderData.autoRenew,
      isActive: true,
      paymentIntentId: orderData.paymentIntentId,
      paymentId: orderData.paymentId,
      paidAt: orderData.paidAt,
      orderId: orderData._id,
      userEmail: orderData.userEmail,
      userName: orderData.userName,
      userPhone: orderData.userPhone,
      usageStats: {
        visitsThisMonth: 0,
        totalVisits: 0,
        favoriteTime: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
      },
      createdAt: Date.now(),
      updatedAt: Date.now(),
    };

    const membershipId = await ctx.db.insert("memberships", membershipData);
    return await ctx.db.get(membershipId);
  },
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–æ ID
export const getPlanById = query({
  args: {
    planId: v.optional(v.id("membershipPlans")),
    id: v.optional(v.id("membershipPlans")),
  },
  handler: async (ctx, args) => {
    const planId = args.planId ?? args.id;
    if (!planId) throw new Error("planId is required");
    return await ctx.db.get(planId);
  },
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (–ø–æ–∫—É–ø–∫–∞)
export const create = mutation({
  args: {
    userId: v.id("users"),
    planId: v.id("membershipPlans"),
    trainerId: v.optional(v.id("trainers")),
    autoRenew: v.optional(v.boolean()),
    paymentIntentId: v.optional(v.string()),
    paymentMethod: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –°–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", args.userId);

    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
    const plan = await ctx.db.get(args.planId);
    if (!plan) {
      throw new Error("–ü–ª–∞–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
    const existingMemberships = await ctx.db.query("memberships")
      .filter((q) => q.and(
        q.eq(q.field("userId"), args.userId),
        q.eq(q.field("isActive"), true)
      ))
      .collect();

    for (const membership of existingMemberships) {
      await ctx.db.patch(membership._id, { isActive: false });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    const now = Date.now();
    const expiresAt = now + (plan.duration * 24 * 60 * 60 * 1000); // duration –≤ –¥–Ω—è—Ö

    const membershipId = await ctx.db.insert("memberships", {
      userId: args.userId,
      planId: args.planId,
      trainerId: args.trainerId,
      type: plan.type,
      price: plan.price,
      startDate: now,
      expiresAt: expiresAt,
      isActive: true,
      syncVersion: 1,
      lastSyncTime: now,
      isDirty: false,
      autoRenew: args.autoRenew || false,
      paymentIntentId: args.paymentIntentId || undefined,
      status: "active",
      orderId: undefined,
      paymentMethod: args.paymentMethod || undefined,
      // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userEmail: "",
      userName: "",
      userPhone: "",
      usageStats: {
        visitsThisMonth: 0,
        totalVisits: 0,
        favoriteTime: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
      },
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      createdAt: now,
      updatedAt: now,
    });

    console.log("‚úÖ Convex Mutation: –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID:", membershipId);
    return membershipId;
  },
});

// –ü—Ä–æ–¥–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç
export const renew = mutation({
  args: {
    membershipId: v.id("memberships"),
    planId: v.id("membershipPlans"),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.membershipId);

    const membership = await ctx.db.get(args.membershipId);
    if (!membership) {
      throw new Error("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const plan = await ctx.db.get(args.planId);
    if (!plan) {
      throw new Error("–ü–ª–∞–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const now = Date.now();
    const currentExpiry = membership.expiresAt;
    const baseDate = currentExpiry > now ? currentExpiry : now;
    const newExpiresAt = baseDate + (plan.duration * 24 * 60 * 60 * 1000);

    await ctx.db.patch(args.membershipId, {
      isActive: true,
      freezeData: undefined,
      syncVersion: (membership.syncVersion || 0) + 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    console.log("‚úÖ Convex Mutation: –ê–±–æ–Ω–µ–º–µ–Ω—Ç –ø—Ä–æ–¥–ª–µ–Ω –¥–æ:", new Date(newExpiresAt));
    return { success: true, newExpiresAt };
  },
});

// –û—Ç–º–µ–Ω–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç
export const cancel = mutation({
  args: {
    membershipId: v.id("memberships"),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –û—Ç–º–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.membershipId);

    const membership = await ctx.db.get(args.membershipId);
    if (!membership) {
      throw new Error("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    await ctx.db.patch(args.membershipId, {
      isActive: false,
      status: "cancelled",
      freezeData: undefined,
      syncVersion: (membership.syncVersion || 0) + 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    console.log("‚úÖ Convex Mutation: –ê–±–æ–Ω–µ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–µ–Ω");
    return { success: true };
  },
});

export const freeze = mutation({
  args: {
    membershipId: v.id("memberships"),
    freezeDays: v.number(),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.membershipId);

    const membership = await ctx.db.get(args.membershipId);
    if (!membership) {
      throw new Error("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const freezeEndDate = Date.now() + (args.freezeDays * 24 * 60 * 60 * 1000);

    await ctx.db.patch(args.membershipId, {
      isActive: false,
      freezeData: {
        isFreezed: true,
        freezeStartDate: new Date().toISOString(),
        freezeEndDate: new Date(freezeEndDate).toISOString(),
        freezeDays: args.freezeDays,
      },
      syncVersion: (membership.syncVersion || 0) + 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    console.log("‚úÖ Convex Mutation: –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ:", new Date(freezeEndDate));
    return { success: true, freezeEndDate };
  },
});

export const unfreeze = mutation({
  args: {
    membershipId: v.id("memberships"),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.membershipId);

    const membership = await ctx.db.get(args.membershipId);
    if (!membership) {
      throw new Error("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω
    if (
      !membership.freezeData ||
      !membership.freezeData.freezeEndDate ||
      new Date(membership.freezeData.freezeEndDate) <= new Date()
    ) {
      throw new Error("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏–ª–∏ —É–∂–µ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω");
    }

    // –£–¥–∞–ª—è–µ–º freezeData
    await ctx.db.patch(args.membershipId, {
      isActive: true,
      freezeData: undefined, // –≤–º–µ—Å—Ç–æ null
      syncVersion: (membership.syncVersion || 0) + 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    console.log("‚úÖ Convex Mutation: –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω");
    return { success: true };
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserHistory = query({
  args: {
    userId: v.id("users"),
    includeExpired: v.optional(v.boolean())
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:", args.userId);

    let query = ctx.db.query("memberships")
      .filter((q) => q.eq(q.field("userId"), args.userId));

    if (!args.includeExpired) {
      query = query.filter((q) => q.eq(q.field("isActive"), true));
    }

    const memberships = await query.order("desc").collect();

    console.log("‚úÖ Convex Query: –ù–∞–π–¥–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏:", memberships.length);
    return memberships;
  },
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã (–¥–ª—è cron job)
export const checkExpiredMemberships = mutation({
  handler: async (ctx) => {
    console.log("üîÑ Convex Mutation: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");

    const now = Date.now();

    const expiredMemberships = await ctx.db.query("memberships")
      .filter((q) => q.and(
        q.eq(q.field("isActive"), true),
        q.lt(q.field("expiresAt"), now)
      ))
      .collect();

    let deactivatedCount = 0;

    for (const membership of expiredMemberships) {
      await ctx.db.patch(membership._id, {
        isActive: false,
        syncVersion: (membership.syncVersion || 0) + 1,
        lastSyncTime: now,
        isDirty: false
      });
      deactivatedCount++;
    }

    console.log("‚úÖ Convex Mutation: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:", deactivatedCount);
    return { deactivatedCount };
  },
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
export const getStats = query({
  handler: async (ctx) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");

    const allMemberships = await ctx.db.query("memberships").collect();
    const now = Date.now();

    const stats = {
      total: allMemberships.length,
      active: allMemberships.filter(m => m.isActive && m.expiresAt > now).length,
      expired: allMemberships.filter(m => !m.isActive || m.expiresAt <= now).length,
      basic: allMemberships.filter(m => m.type === 'basic').length,
      premium: allMemberships.filter(m => m.type === 'premium').length,
      vip: allMemberships.filter(m => m.type === 'vip').length,
      unlimited: allMemberships.filter(m => m.type === 'unlimited').length,
    };

    console.log("‚úÖ Convex Query: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:", stats);
    return stats;
  },
});

// –û–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç
export const update = mutation({
  args: {
    id: v.id("memberships"),
    type: v.optional(v.string()),
    price: v.optional(v.number()),
    expiresAt: v.optional(v.number()),
    isActive: v.optional(v.boolean()),
    trainerId: v.optional(v.id("trainers")),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.id);

    const { id, ...updateData } = args;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    const existingMembership = await ctx.db.get(id);
    if (!existingMembership) {
      throw new Error("–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    await ctx.db.patch(id, {
      ...updateData,
      syncVersion: (existingMembership.syncVersion || 0) + 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    const updatedMembership = await ctx.db.get(id);
    console.log("‚úÖ Convex: –ê–±–æ–Ω–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedMembership);

    return updatedMembership;
  },
});

// CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
export const createPlan = mutation({
  args: {
    name: v.string(),
    type: v.string(),
    duration: v.number(), // –≤ –¥–Ω—è—Ö
    price: v.number(),
    description: v.optional(v.string()),
    features: v.array(v.string()),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.name);

    const planId = await ctx.db.insert("membershipPlans", {
      ...args,
      isActive: true,
      createdAt: Date.now(),
      syncVersion: 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    console.log("‚úÖ Convex Mutation: –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —Å ID:", planId);
    return planId;
  },
});

export const updatePlan = mutation({
  args: {
    id: v.id("membershipPlans"),
    name: v.optional(v.string()),
    type: v.optional(v.string()),
    duration: v.optional(v.number()),
    price: v.optional(v.number()),
    description: v.optional(v.string()),
    features: v.optional(v.array(v.string())),
    isActive: v.optional(v.boolean()),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.id);

    const { id, ...updateData } = args;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    const existingPlan = await ctx.db.get(id);
    if (!existingPlan) {
      throw new Error("–ü–ª–∞–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
    await ctx.db.patch(id, {
      ...updateData,
      syncVersion: (existingPlan.syncVersion || 0) + 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    const updatedPlan = await ctx.db.get(id);
    console.log("‚úÖ Convex: –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedPlan);

    return updatedPlan;
  },
});

export const deletePlan = mutation({
  args: { id: v.id("membershipPlans") },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", args.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º –ø–ª–∞–Ω–æ–º
    const activeMemberships = await ctx.db.query("memberships")
      .filter((q) => q.and(
        q.eq(q.field("type"), args.id),
        q.eq(q.field("isActive"), true)
      ))
      .first();

    if (activeMemberships) {
      throw new Error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏");
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
    await ctx.db.patch(args.id, {
      isActive: false,
      syncVersion: 1,
      lastSyncTime: Date.now(),
      isDirty: false
    });

    console.log("‚úÖ Convex Mutation: –ü–ª–∞–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
    return { success: true };
  },
});