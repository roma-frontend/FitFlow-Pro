// convex/faceProfiles.js
import { query, mutation } from "./_generated/server";
import { v } from "convex/values";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
function calculateCosineSimilarity(desc1: number[], desc2: number[]): number {
  if (!desc1 || !desc2 || desc1.length !== desc2.length) return 0;
  
  let dotProduct = 0;
  let norm1 = 0;
  let norm2 = 0;
  
  for (let i = 0; i < desc1.length; i++) {
    dotProduct += desc1[i] * desc2[i];
    norm1 += desc1[i] * desc1[i];
    norm2 += desc2[i] * desc2[i];
  }
  
  norm1 = Math.sqrt(norm1);
  norm2 = Math.sqrt(norm2);
  
  if (norm1 === 0 || norm2 === 0) return 0;
  
  // –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1], –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
  const cosineSimilarity = dotProduct / (norm1 * norm2);
  return (cosineSimilarity + 1) / 2;
}

// –°–æ–∑–¥–∞–Ω–∏–µ Face ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
export const create = mutation({
  args: {
    userId: v.id("users"),
    faceDescriptor: v.array(v.number()),
    confidence: v.number(),
    registeredAt: v.number(),
    isActive: v.boolean(),
    metadata: v.optional(v.object({
      registrationMethod: v.string(),
      userAgent: v.optional(v.string()),
      deviceInfo: v.optional(v.string())
    }))
  },
  handler: async (ctx, args) => {
    console.log('üîß faceProfiles:create –¥–ª—è userId:', args.userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await ctx.db.get(args.userId);
    
    if (!user) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –°–æ–∑–¥–∞–µ–º Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å userType
    const profileId = await ctx.db.insert("faceProfiles", {
      userId: args.userId,
      userType: "user", // This is the critical addition
      faceDescriptor: args.faceDescriptor,
      confidence: args.confidence,
      registeredAt: args.registeredAt,
      isActive: args.isActive,
      metadata: args.metadata,
      lastUsed: args.registeredAt
    });
    
    console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', profileId);
    return profileId;
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const getByUserId = query({
  args: {
    userId: v.string(),
    userType: v.optional(v.union(v.literal("user"), v.literal("trainer")))
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("faceProfiles")
      .filter(q => q.eq(q.field("userId"), args.userId));

    if (args.userType) {
      query = query.filter(q => q.eq(q.field("userType"), args.userType));
    }

    return await query
      .filter(q => q.eq(q.field("isActive"), true))
      .first();
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
export const listActive = query({
  args: {},
  handler: async (ctx, args) => {
    console.log('üìã faceProfiles:listActive - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π');

    const profiles = await ctx.db
      .query("faceProfiles")
      .withIndex("by_active", (q) => q.eq("isActive", true))
      .collect();

    console.log('üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:', profiles.length);
    return profiles;
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
export const getAllForComparison = query({
  handler: async (ctx) => {
    const profiles = await ctx.db.query("faceProfiles")
      .withIndex("by_active", q => q.eq("isActive", true))
      .collect();

    return await Promise.all(profiles.map(async (profile) => {
      let user;
      if (profile.userType === "user") {
        user = await ctx.db.get(profile.userId);
      } else {
        user = await ctx.db.get(profile.userId);
      }

      return {
        id: profile._id,
        userId: profile.userId,
        userType: profile.userType,
        name: user?.name || 'Unknown',
        email: user?.email || '',
        faceDescriptor: profile.faceDescriptor,
        confidence: profile.confidence,
        lastUsed: profile.lastUsed
      };
    }));
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const updateLastUsed = mutation({
  args: {
    profileId: v.id("faceProfiles"),
    timestamp: v.number()
  },
  handler: async (ctx, args) => {
    console.log('üîÑ faceProfiles:updateLastUsed –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', args.profileId);

    try {
      await ctx.db.patch(args.profileId, {
        lastUsed: args.timestamp
      });

      console.log('‚úÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ –ª–∏—Ü–∞
export const updateFaceDescriptor = mutation({
  args: {
    profileId: v.id("faceProfiles"),
    faceDescriptor: v.array(v.number()),
    confidence: v.number()
  },
  handler: async (ctx, args) => {
    console.log('üîÑ faceProfiles:updateFaceDescriptor –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', args.profileId);

    try {
      await ctx.db.patch(args.profileId, {
        faceDescriptor: args.faceDescriptor,
        confidence: args.confidence
      });

      console.log('‚úÖ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞:', error);
      throw error;
    }
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ Face ID –ø—Ä–æ—Ñ–∏–ª—è (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
export const deactivate = mutation({
  args: { profileId: v.id("faceProfiles") },
  handler: async (ctx, args) => {
    console.log('üóëÔ∏è faceProfiles:deactivate –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', args.profileId);

    try {
      await ctx.db.patch(args.profileId, {
        isActive: false
      });

      console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }
});

// –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export const deleteProfile = mutation({
  args: { profileId: v.id("faceProfiles") },
  handler: async (ctx, args) => {
    console.log('üóëÔ∏è faceProfiles:deleteProfile –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', args.profileId);

    try {
      await ctx.db.delete(args.profileId);

      console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID
export const getById = query({
  args: { profileId: v.id("faceProfiles") },
  handler: async (ctx, args) => {
    console.log('üîç faceProfiles:getById –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', args.profileId);

    try {
      const profile = await ctx.db.get(args.profileId);

      if (!profile) {
        console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω');
      return profile;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return null;
    }
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
export const getStats = query({
  args: {},
  handler: async (ctx) => {
    console.log('üìä faceProfiles:getStats - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

    const [totalProfiles, activeProfiles, inactiveProfiles] = await Promise.all([
      ctx.db.query("faceProfiles").collect(),
      ctx.db.query("faceProfiles").withIndex("by_active", (q) => q.eq("isActive", true)).collect(),
      ctx.db.query("faceProfiles").withIndex("by_active", (q) => q.eq("isActive", false)).collect()
    ]);

    const stats = {
      total: totalProfiles.length,
      active: activeProfiles.length,
      inactive: inactiveProfiles.length,
      recentlyUsed: activeProfiles.filter(p =>
        p.lastUsed && (Date.now() - p.lastUsed) < 7 * 24 * 60 * 60 * 1000 // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      ).length
    };

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:', stats);
    return stats;
  }
});

// –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
export const search = query({
  args: {
    userId: v.optional(v.union(v.id("users"), v.id("trainers"))),
    isActive: v.optional(v.boolean()),
    registrationMethod: v.optional(v.string())
  },
  handler: async (ctx, args) => {
    let query = ctx.db.query("faceProfiles");

    if (args.userId) {
      // Filter using both userId and userType (inferred from the ID)
      query = query.filter((q) => 
        q.eq(q.field("userId"), args.userId)
      );
    }

    // Rest of the filters remain the same
    if (args.isActive !== undefined) {
      query = query.filter((q) => q.eq(q.field("isActive"), args.isActive));
    }

    if (args.registrationMethod) {
      query = query.filter((q) =>
        q.eq(q.field("metadata.registrationMethod"), args.registrationMethod)
      );
    }

    return await query.collect();
  }
});

// –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É –¥–ª—è –≤—Ö–æ–¥–∞
export const findByDescriptor = query({
  args: {
    descriptor: v.array(v.number()),
    threshold: v.optional(v.number())
  },
  handler: async (ctx, args) => {
    console.log('üîç faceProfiles:findByDescriptor - –ø–æ–∏—Å–∫ –ø–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É');
    
    const similarityThreshold = args.threshold || 0.6;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    const profiles = await ctx.db
      .query("faceProfiles")
      .withIndex("by_active", (q) => q.eq("isActive", true))
      .collect();
    
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`);
    
    let bestMatch = null;
    let highestSimilarity = 0;
    
    for (const profile of profiles) {
      if (!profile.faceDescriptor || profile.faceDescriptor.length !== args.descriptor.length) {
        continue;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
      const similarity = calculateCosineSimilarity(args.descriptor, profile.faceDescriptor);
      
      if (similarity > similarityThreshold && similarity > highestSimilarity) {
        highestSimilarity = similarity;
        bestMatch = profile;
      }
    }
    
    if (bestMatch) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(highestSimilarity * 100).toFixed(1)}% —Å—Ö–æ–∂–µ—Å—Ç–∏`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user;
      if (bestMatch.userType === "user") {
        user = await ctx.db.get(bestMatch.userId);
      } else {
        user = await ctx.db.get(bestMatch.userId);
      }
      
      return {
        profile: bestMatch,
        similarity: highestSimilarity,
        user: user
      };
    }
    
    console.log('‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return null;
  }
});

// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
export const bulkUpdate = mutation({
  args: {
    profileIds: v.array(v.id("faceProfiles")),
    updates: v.object({
      isActive: v.optional(v.boolean()),
      confidence: v.optional(v.number())
    })
  },
  handler: async (ctx, args) => {
    console.log('üîÑ faceProfiles:bulkUpdate –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', args.profileIds.length);

    const updatePromises = args.profileIds.map(profileId =>
      ctx.db.patch(profileId, args.updates)
    );

    await Promise.all(updatePromises);

    console.log('‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return { success: true, updatedCount: args.profileIds.length };
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
export const getByUserIds = query({
  args: { userIds: v.array(v.id("users")) },
  handler: async (ctx, args) => {
    console.log('üîç faceProfiles:getByUserIds –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', args.userIds.length);

    const profiles = await Promise.all(
      args.userIds.map(async (userId) => {
        return await ctx.db
          .query("faceProfiles")
          .withIndex("by_user", (q) => q.eq("userId", userId))
          .filter((q) => q.eq(q.field("isActive"), true))
          .first();
      })
    );

    const validProfiles = profiles.filter(profile => profile !== null);
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π:', validProfiles.length);
    return validProfiles;
  }
});