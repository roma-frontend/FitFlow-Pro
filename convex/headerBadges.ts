// convex/headerBadges.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import type { Doc, Id } from "./_generated/dataModel";

// ‚úÖ –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const badgeConditionsSchema = v.object({
  requireAuth: v.optional(v.boolean()),
  minUserLevel: v.optional(v.number()),
  showOnlyOnce: v.optional(v.boolean()),
  hideAfterClick: v.optional(v.boolean()),
});

const badgeAnalyticsSchema = v.object({
  impressions: v.number(),
  clicks: v.number(),
  clickedUsers: v.array(v.string()),
  lastShown: v.optional(v.number()),
});

const createBadgeSchema = v.object({
  navigationItemHref: v.string(),
  badgeVariant: v.string(),
  badgeText: v.optional(v.string()),
  badgeEnabled: v.boolean(),
  priority: v.number(),
  validFrom: v.optional(v.number()),
  validTo: v.optional(v.number()),
  targetRoles: v.optional(v.array(v.string())),
  targetDevices: v.optional(v.array(v.string())),
  conditions: v.optional(badgeConditionsSchema),
  createdBy: v.string(),
});

const updateBadgeSchema = v.object({
  navigationItemHref: v.optional(v.string()),
  badgeVariant: v.optional(v.string()),
  badgeText: v.optional(v.string()),
  badgeEnabled: v.optional(v.boolean()),
  priority: v.optional(v.number()),
  validFrom: v.optional(v.number()),
  validTo: v.optional(v.number()),
  targetRoles: v.optional(v.array(v.string())),
  targetDevices: v.optional(v.array(v.string())),
  conditions: v.optional(badgeConditionsSchema),
  updatedBy: v.string(),
});

// ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function isSettingActive(setting: Doc<"headerBadgeSettings">): boolean {
  const now = Date.now();
  
  if (!setting.badgeEnabled) return false;
  if (setting.validFrom && setting.validFrom > now) return false;
  if (setting.validTo && setting.validTo < now) return false;
  
  return true;
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
export const getAllBadgeSettings = query({
  args: {},
  handler: async (ctx) => {
    const settings = await ctx.db.query("headerBadgeSettings").collect();
    
    return settings.map((setting: Doc<"headerBadgeSettings">) => ({
      ...setting,
      isActive: isSettingActive(setting),
    }));
  },
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const getActiveBadgeSettings = query({
  args: {
    userRole: v.optional(v.string()),
    deviceType: v.optional(v.string()),
  },
  handler: async (ctx, { userRole, deviceType }) => {
    console.log('üîç Convex: getActiveBadgeSettings', { userRole, deviceType });
    
    const allSettings = await ctx.db.query("headerBadgeSettings").collect();
    const now = Date.now();
    
    const activeSettings = allSettings.filter((setting) => {
      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (!setting.badgeEnabled) {
        return false;
      }
      
      if (setting.validFrom && setting.validFrom > now) {
        return false;
      }
      
      if (setting.validTo && setting.validTo < now) {
        return false;
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è super-admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ badge
      if (userRole === 'super-admin') {
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π - –µ—Å–ª–∏ targetRoles –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–º
      if (setting.targetRoles && setting.targetRoles.length > 0) {
        // –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º badge —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ —Ä–æ–ª—è–º
        if (!userRole) {
          return false;
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ
        if (!setting.targetRoles.includes(userRole)) {
          return false;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –µ—Å–ª–∏ targetDevices –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      if (setting.targetDevices && setting.targetDevices.length > 0) {
        if (!deviceType || !setting.targetDevices.includes(deviceType)) {
          return false;
        }
      }
      
      return true;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    return activeSettings.sort((a, b) => a.priority - b.priority);
  },
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ badge –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
export const getBadgeForNavItem = query({
  args: {
    href: v.string(),
    userRole: v.optional(v.string()),
    deviceType: v.optional(v.string()),
  },
  handler: async (ctx, { href, userRole, deviceType }) => {
    // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ handler —Ñ—É–Ω–∫—Ü–∏–∏
    const allSettings = await ctx.db.query("headerBadgeSettings").collect();
    const now = Date.now();
    
    const activeSettings = allSettings.filter((setting: Doc<"headerBadgeSettings">) => {
      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (!setting.badgeEnabled) return false;
      if (setting.validFrom && setting.validFrom > now) return false;
      if (setting.validTo && setting.validTo < now) return false;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
      if (setting.targetRoles && setting.targetRoles.length > 0) {
        if (!userRole || !setting.targetRoles.includes(userRole)) return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (setting.targetDevices && setting.targetDevices.length > 0) {
        if (!deviceType || !setting.targetDevices.includes(deviceType)) return false;
      }
      
      return true;
    }).sort((a: Doc<"headerBadgeSettings">, b: Doc<"headerBadgeSettings">) => a.priority - b.priority);

    return activeSettings.find((setting: Doc<"headerBadgeSettings">) => setting.navigationItemHref === href) || null;
  },
});

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export const createBadgeSetting = mutation({
  args: createBadgeSchema,
  handler: async (ctx, args) => {
    const now = Date.now();
    
    const newSetting = await ctx.db.insert("headerBadgeSettings", {
      ...args,
      isActive: true,
      createdAt: now,
      updatedAt: now,
    });
    
    return newSetting;
  },
});

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export const updateBadgeSetting = mutation({
  args: {
    id: v.id("headerBadgeSettings"),
    updates: updateBadgeSchema,
  },
  handler: async (ctx, { id, updates }) => {
    const { updatedBy, ...updateData } = updates;
    
    await ctx.db.patch(id, {
      ...updateData,
      updatedBy,
      updatedAt: Date.now(),
    });
    
    return id;
  },
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export const deleteBadgeSetting = mutation({
  args: {
    id: v.id("headerBadgeSettings"),
  },
  handler: async (ctx, { id }) => {
    await ctx.db.delete(id);
    return { success: true };
  },
});

// ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –ø–æ badge
export const trackBadgeClick = mutation({
  args: {
    badgeId: v.id("headerBadgeSettings"),
    userId: v.optional(v.string()),
  },
  handler: async (ctx, { badgeId, userId }) => {
    const setting = await ctx.db.get(badgeId);
    if (!setting) return;
    
    const analytics = setting.analytics || { impressions: 0, clicks: 0, clickedUsers: [] };
    const clickedUsers = userId && !analytics.clickedUsers.includes(userId)
      ? [...analytics.clickedUsers, userId]
      : analytics.clickedUsers;
    
    await ctx.db.patch(badgeId, {
      analytics: {
        ...analytics,
        clicks: analytics.clicks + 1,
        clickedUsers,
      },
    });
  },
});

// ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ badge
export const trackBadgeImpression = mutation({
  args: {
    badgeId: v.id("headerBadgeSettings"),
  },
  handler: async (ctx, { badgeId }) => {
    const setting = await ctx.db.get(badgeId);
    if (!setting) return;
    
    const analytics = setting.analytics || { impressions: 0, clicks: 0, clickedUsers: [] };
    
    await ctx.db.patch(badgeId, {
      analytics: {
        ...analytics,
        impressions: analytics.impressions + 1,
        lastShown: Date.now(),
      },
    });
  },
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const getBadgeStats = query({
  args: {},
  handler: async (ctx) => {
    const allSettings = await ctx.db.query("headerBadgeSettings").collect();
    
    const totalBadges = allSettings.length;
    const activeBadges = allSettings.filter((s: Doc<"headerBadgeSettings">) => s.badgeEnabled && isSettingActive(s)).length;
    const totalClicks = allSettings.reduce((sum: number, s: Doc<"headerBadgeSettings">) => sum + (s.analytics?.clicks || 0), 0);
    const totalImpressions = allSettings.reduce((sum: number, s: Doc<"headerBadgeSettings">) => sum + (s.analytics?.impressions || 0), 0);
    const averageCTR = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;
    
    return {
      totalBadges,
      activeBadges,
      totalClicks,
      totalImpressions,
      averageCTR,
    };
  },
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ badge (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
export const getBadgeTemplates = query({
  args: {},
  handler: async (ctx) => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    return [
      {
        _id: "template-1" as Id<"badgeTemplates">,
        _creationTime: Date.now(),
        name: "–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
        description: "–î–ª—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        variant: "neural-new",
        defaultText: "NEW",
        category: "feature",
        isSystemTemplate: true,
        usageCount: 0,
        createdBy: "system",
        createdAt: Date.now(),
        presetData: {
          priority: 1,
          targetRoles: [],
          targetDevices: [],
          conditions: {
            requireAuth: false,
            minUserLevel: 0,
            showOnlyOnce: false,
            hideAfterClick: false,
          }
        }
      },
      {
        _id: "template-2" as Id<"badgeTemplates">,
        _creationTime: Date.now(),
        name: "–ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        description: "–î–ª—è –∞–∫—Ü–∏–π –∏ —Å–∫–∏–¥–æ–∫",
        variant: "cosmic",
        defaultText: "HOT",
        category: "promotion",
        isSystemTemplate: true,
        usageCount: 0,
        createdBy: "system",
        createdAt: Date.now(),
        presetData: {
          priority: 2,
          targetRoles: [],
          targetDevices: [],
          conditions: {
            requireAuth: false,
            minUserLevel: 0,
            showOnlyOnce: false,
            hideAfterClick: true,
          }
        }
      },
      {
        _id: "template-3" as Id<"badgeTemplates">,
        _creationTime: Date.now(),
        name: "–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è",
        description: "–¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        variant: "quantum-ai",
        defaultText: "PRO",
        category: "premium",
        isSystemTemplate: true,
        usageCount: 0,
        createdBy: "system",
        createdAt: Date.now(),
        presetData: {
          priority: 1,
          targetRoles: ["admin", "premium"],
          targetDevices: [],
          conditions: {
            requireAuth: true,
            minUserLevel: 5,
            showOnlyOnce: false,
            hideAfterClick: false,
          }
        }
      }
    ];
  },
});
