// components/admin/QuickActions.tsx - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏
"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { usePersonalizedActions } from '@/hooks/usePersonalizedActions';
import { useAuth } from '@/hooks/useAuth';
import { useRoleTexts } from '@/lib/roleTexts';
import { FaceIdSetup } from "@/components/face-id/FaceIdSetup";
import { toast } from "@/hooks/use-toast";
import { faceIdUtils } from "@/utils/faceIdUtils"; // ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
import {
  Zap,
  Plus,
  BarChart3,
  Settings,
  MessageSquare,
  ChevronRight,
  Star,
  Clock,
  Users,
  Calendar,
  Target,
  Activity,
  UserPlus,
  FileText,
  TrendingUp,
  CreditCard,
  Shield,
  AlertTriangle,
  DollarSign,
  CalendarPlus,
  Camera,
  X,
  Trash2
} from "lucide-react";

// –¢–∏–ø—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ...
interface FaceIdAction {
  id: string;
  label: string;
  description: string;
  icon: string;
  category: string;
  priority: 'high' | 'medium' | 'low';
  roleSpecific: boolean;
}

type AnyAction = FaceIdAction | any;
type ActionsByCategory = Record<string, AnyAction[]>;

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫
const iconMap = {
  Shield, Activity, BarChart3, AlertTriangle, UserPlus, DollarSign,
  CreditCard, TrendingUp, Calendar, Users, Settings, MessageSquare,
  CalendarPlus, FileText, Target, Clock, Plus, Star, Camera
};

interface QuickActionsProps {
  variant?: 'compact' | 'expanded';
  showCategories?: boolean;
  maxActions?: number;
}

export function QuickActions({
  variant = 'expanded',
  showCategories = true,
  maxActions = 6
}: QuickActionsProps) {
  const { user } = useAuth();
  const userRole = user?.role;
  const roleTexts = useRoleTexts(userRole);
  const { actions, actionsByCategory, recommendedActions, executeAction } = usePersonalizedActions();
  const [selectedCategory, setSelectedCategory] = useState<string>('create');

  // ‚úÖ Face ID —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Ç–∏–ª–∏—Ç
  const [showFaceIdSetup, setShowFaceIdSetup] = useState(false);
  const [faceIdStatus, setFaceIdStatus] = useState(() => faceIdUtils.getStatus());

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const status = faceIdUtils.getStatus();
    setFaceIdStatus(status);
    console.log('üîç Face ID —Å—Ç–∞—Ç—É—Å:', status);
  }, []);

  // ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π Face ID Setup
  if (showFaceIdSetup) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Camera className="h-5 w-5 text-blue-600" />
              {faceIdStatus.enabled ? '–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Face ID' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Face ID'}
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowFaceIdSetup(false)}
              className="h-8 w-8 p-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω */}
          {faceIdStatus.enabled && faceIdStatus.profile && (
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-yellow-800">
                  –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => {
                    faceIdUtils.removeProfile();
                    setFaceIdStatus(faceIdUtils.getStatus());
                    toast({
                      title: "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω",
                      description: "Face ID –æ—Ç–∫–ª—é—á–µ–Ω",
                    });
                  }}
                  className="h-6 w-6 p-0 text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
              <p className="text-xs text-yellow-700">
                ID: {faceIdStatus.profile.id}<br />
                –°–æ–∑–¥–∞–Ω: {new Date(faceIdStatus.profile.created).toLocaleDateString()}
                {faceIdStatus.profile.lastUsed && (
                  <><br />–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {new Date(faceIdStatus.profile.lastUsed).toLocaleDateString()}</>
                )}
              </p>
            </div>
          )}

          <FaceIdSetup
            onComplete={(success: boolean, data?: any) => {
              console.log('üéØ Face ID Setup —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { success, data });

              if (success && data) {
                // ‚úÖ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                const profile = {
                  id: data.profileId || `face_${Date.now()}`,
                  userId: user?.id || 'unknown',
                  created: new Date().toISOString(),
                  lastUsed: new Date().toISOString()
                };

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
                faceIdUtils.saveProfile(profile);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                setFaceIdStatus(faceIdUtils.getStatus());
                setShowFaceIdSetup(false);

                toast({
                  title: "Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üéâ",
                  description: `–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${profile.id.slice(0, 8)}...`,
                });
              } else {
                toast({
                  variant: "destructive",
                  title: "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Face ID",
                  description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                });
              }
            }}
          />

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div className="mt-4 space-y-3">
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-700">
                üí° <strong>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</strong>
              </p>
              <ol className="text-xs text-blue-600 mt-2 space-y-1">
                <li>1. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ</li>
                <li>2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É</li>
                <li>3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Ü–∞</li>
                <li>4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</li>
              </ol>
            </div>

            {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ */}
            {!faceIdUtils.isSupported() && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-sm text-red-700">
                  ‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  const getIcon = (iconName: string) => {
    return iconMap[iconName as keyof typeof iconMap] || Plus;
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'create': return 'bg-green-100 text-green-700 border-green-200';
      case 'manage': return 'bg-blue-100 text-blue-700 border-blue-200';
      case 'analyze': return 'bg-purple-100 text-purple-700 border-purple-200';
      case 'communicate': return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'security': return 'bg-indigo-100 text-indigo-700 border-indigo-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  const getCategoryName = (category: string) => {
    switch (category) {
      case 'create': return '–°–æ–∑–¥–∞–Ω–∏–µ';
      case 'manage': return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
      case 'analyze': return '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞';
      case 'communicate': return '–û–±—â–µ–Ω–∏–µ';
      case 'security': return '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å';
      default: return '–î—Ä—É–≥–æ–µ';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  // ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Face ID
  const handleFaceIdAction = () => {
    if (!faceIdUtils.isSupported()) {
      toast({
        variant: "destructive",
        title: "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        description: "–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ",
      });
      return;
    }

    setShowFaceIdSetup(true);
  };

  // ‚úÖ –°–æ–∑–¥–∞–µ–º Face ID –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
  const faceIdAction: FaceIdAction = {
    id: 'setup-face-id',
    label: faceIdStatus.enabled ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Face ID' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Face ID',
    description: faceIdStatus.enabled
      ? `–ü—Ä–æ—Ñ–∏–ª—å: ${faceIdStatus.profile?.id.slice(0, 8)}...`
      : '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Face ID',
    icon: 'Camera',
    category: 'security',
    priority: 'medium',
    roleSpecific: true
  };

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  if (!user || !userRole) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5 text-yellow-500" />
            –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8 text-gray-500">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π...</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
  // —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω—è–µ–º faceIdEnabled –Ω–∞ faceIdStatus.enabled
  // –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞

  const extendedRecommendedActions: AnyAction[] = faceIdStatus.enabled
    ? recommendedActions
    : [faceIdAction, ...recommendedActions];

  const extendedActionsByCategory: ActionsByCategory = {
    ...actionsByCategory,
    security: [faceIdAction, ...(actionsByCategory.security || [])]
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Zap className="h-5 w-5 text-yellow-500" />
          {roleTexts.quickActionsTitle || '–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è'}
        </CardTitle>
        <p className="text-sm text-gray-600">
          –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å Face ID */}
        {faceIdStatus.enabled && faceIdStatus.profile && (
          <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Camera className="h-4 w-4 text-green-600" />
                <span className="text-sm font-medium text-green-900">
                  Face ID –∞–∫—Ç–∏–≤–µ–Ω
                </span>
              </div>
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                {faceIdStatus.profile.id.slice(0, 8)}...
              </Badge>
            </div>
            <p className="text-xs text-green-700 mt-1">
              –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {faceIdStatus.profile.lastUsed
                ? new Date(faceIdStatus.profile.lastUsed).toLocaleString()
                : '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'
              }
            </p>
          </div>
        )}

        {/* –û—Å—Ç–∞–ª—å–Ω–æ–π JSX –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ faceIdStatus.enabled */}

        {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        {extendedRecommendedActions.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <Star className="h-4 w-4 text-yellow-500" />
              <h3 className="font-medium text-gray-900">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ</h3>
            </div>
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-3">
              {extendedRecommendedActions.map((action: AnyAction) => {
                const Icon = getIcon(action.icon);
                const isFaceId = action.id === 'setup-face-id';

                return (
                  <div
                    key={action.id}
                    className={`p-4 border rounded-lg transition-colors cursor-pointer group ${isFaceId
                        ? faceIdStatus.enabled
                          ? 'border-green-200 bg-green-50 hover:bg-green-100'
                          : 'border-blue-200 bg-blue-50 hover:bg-blue-100'
                        : 'border-yellow-200 bg-yellow-50 hover:bg-yellow-100'
                      }`}
                    onClick={() => isFaceId ? handleFaceIdAction() : executeAction(action.id)}
                  >
                    <div className="flex items-start justify-between mb-2">
                      <Icon className={`h-5 w-5 ${isFaceId
                          ? faceIdStatus.enabled ? 'text-green-600' : 'text-blue-600'
                          : 'text-yellow-600'
                        }`} />
                      <Badge variant="outline" className={`text-xs ${isFaceId
                          ? faceIdStatus.enabled
                            ? 'bg-green-100 text-green-700 border-green-300'
                            : 'bg-blue-100 text-blue-700 border-blue-300'
                          : 'bg-yellow-100 text-yellow-700 border-yellow-300'
                        }`}>
                        {isFaceId ? (faceIdStatus.enabled ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å') : '–í–∞–∂–Ω–æ'}
                      </Badge>
                    </div>
                    <h4 className={`font-medium mb-1 transition-colors ${isFaceId
                        ? faceIdStatus.enabled
                          ? 'text-gray-900 group-hover:text-green-800'
                          : 'text-gray-900 group-hover:text-blue-800'
                        : 'text-gray-900 group-hover:text-yellow-800'
                      }`}>
                      {action.label}
                    </h4>
                    <p className="text-xs text-gray-600 line-clamp-2">
                      {action.description}
                    </p>
                    <div className="flex items-center justify-end mt-3">
                      <ChevronRight className={`h-4 w-4 group-hover:translate-x-1 transition-transform ${isFaceId
                          ? faceIdStatus.enabled ? 'text-green-600' : 'text-blue-600'
                          : 'text-yellow-600'
                        }`} />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏... */}
        <div className="pt-4 border-t">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 sm:gap-0 text-sm text-gray-600">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-green-600 rounded-full"></div>
              <span>–î–æ—Å—Ç—É–ø–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {actions.length + 1}</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4" />
              <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ</span>
            </div>
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
        {showCategories && Object.keys(extendedActionsByCategory).length > 0 && (
          <div>
            <h3 className="font-medium text-gray-900 mb-3">–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>

            <div className="flex flex-wrap gap-2 mb-4">
              {Object.keys(extendedActionsByCategory).map((category: string) => (
                <Button
                  key={category}
                  variant={selectedCategory === category ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(category)}
                  className={`${selectedCategory === category ? '' : getCategoryColor(category)}`}
                >
                  {getCategoryName(category)}
                  <Badge variant="secondary" className="ml-2 text-xs">
                    {extendedActionsByCategory[category]?.length || 0}
                  </Badge>
                </Button>
              ))}
            </div>

            {extendedActionsByCategory[selectedCategory] && (
              <div className="space-y-3">
                {extendedActionsByCategory[selectedCategory].map((action: AnyAction) => {
                  const Icon = getIcon(action.icon);
                  const isFaceId = action.id === 'setup-face-id';

                  return (
                    <div
                      key={action.id}
                      className="flex items-center gap-4 p-3 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer group"
                      onClick={() => isFaceId ? handleFaceIdAction() : executeAction(action.id)}
                    >
                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getCategoryColor(selectedCategory)}`}>
                        <Icon className="h-5 w-5" />
                      </div>

                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium text-gray-900 group-hover:text-blue-700 transition-colors">
                            {action.label}
                          </h4>
                          {action.priority === 'high' && (
                            <Badge variant="destructive" className="text-xs">
                              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            </Badge>
                          )}
                          {action.roleSpecific && (
                            <Badge variant="outline" className="text-xs">
                              –î–ª—è {roleTexts.roleDisplayName}
                            </Badge>
                          )}
                          {isFaceId && faceIdStatus.enabled && (
                            <Badge variant="secondary" className="text-xs bg-green-100 text-green-800">
                              –ê–∫—Ç–∏–≤–µ–Ω
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 line-clamp-1">
                          {action.description}
                        </p>
                      </div>

                      <div className="flex items-center gap-2">
                        <div className={`w-2 h-2 rounded-full ${getPriorityColor(action.priority)}`} />
                        <ChevronRight className="h-4 w-4 text-gray-400 group-hover:text-blue-600 group-hover:translate-x-1 transition-all" />
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        )}

        {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
        {actions.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <Zap className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <h3 className="text-lg font-medium mb-2">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</h3>
            <p className="text-sm">
              –î–µ–π—Å—Ç–≤–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            </p>
          </div>
        )}

        {/* –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
        {userRole && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <div className="flex items-start gap-2">
              <Star className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
              <div className="text-sm">
                <div className="font-medium text-blue-900 mb-1">
                  –°–æ–≤–µ—Ç –¥–ª—è {roleTexts.roleDisplayName}
                </div>
                <div className="text-blue-700">
                  {userRole === 'super-admin' && '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Face ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏'}
                  {userRole === 'admin' && '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Face ID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}
                  {userRole === 'manager' && 'Face ID –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}
                  {userRole === 'trainer' && '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Face ID –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º'}
                  {userRole === 'member' && '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'}
                  {userRole === 'client' && '–û–±—Å—É–∂–¥–∞–π—Ç–µ —Ü–µ–ª–∏ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏ –≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'}
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
