// components/ai-agent/hooks/useChatLogic.ts

import { useCallback, useState } from 'react';
import { knowledgeBase } from '../config/knowledgeBase';
import { recoveryKnowledgeBase } from '../config/recoveryKnowledge';
import type { Message, AudioConfig, RecoveryData, ActivityData, Link, NutritionData, Trainer } from '../types';
import { Heart, Dumbbell, Zap, Target, Users, Star, Moon, Droplet, AlertCircle, Activity, Calendar, User, ShoppingBag, CreditCard } from 'lucide-react';
import { useAIShopStore } from '@/stores/aiShopStore';
import { ShopProduct } from '@/types/shopAI';

interface UseChatLogicProps {
  audioConfig: AudioConfig;
  recoveryData: RecoveryData;
  setRecoveryData: React.Dispatch<React.SetStateAction<RecoveryData>>;
  setActivityData: React.Dispatch<React.SetStateAction<ActivityData | null>>;
  connectAppleHealth: () => Promise<boolean>;
}

export const useChatLogic = ({
  audioConfig,
  recoveryData,
  setRecoveryData,
  setActivityData,
  connectAppleHealth
}: UseChatLogicProps) => {
  const [currentContext, setCurrentContext] = useState<{
    trainer?: any;
    program?: any;
  }>({});
  
  // –î–æ–±–∞–≤–ª—è–µ–º shop store
  const { 
    analyzeUserGoals, 
    findProductsByQuery, 
    compareProducts,
    setRecommendations,
    currentProducts 
  } = useAIShopStore();

  const voiceRssKey = process.env.NEXT_PUBLIC_VOICERSS_KEY || '';
  const nutritionixAppId = process.env.NEXT_PUBLIC_NUTRITIONIX_APP_ID || '';
  const nutritionixAppKey = process.env.NEXT_PUBLIC_NUTRITIONIX_APP_KEY || '';

  const resetContext = useCallback(() => {
    setCurrentContext({});
  }, []);

  // Text-to-speech function
  const speak = useCallback(async (text: string) => {
    if (!audioConfig.enabled || !text.trim() || !voiceRssKey) return;

    try {
      const audio = new Audio();
      const url = `https://api.voicerss.org/?key=${voiceRssKey}&hl=ru-ru&v=${audioConfig.voice}&src=${encodeURIComponent(text)}`;
      audio.src = url;
      await audio.play();
    } catch (error) {
      console.error("Audio playback error:", error);
    }
  }, [audioConfig, voiceRssKey]);

  // Calculate recovery score
  const calculateRecoveryScore = useCallback(() => {
    const now = new Date();
    const sleepQuality = Math.min(1, recoveryData.sleepHours / 8) * 40;

    const hoursSinceWorkout = recoveryData.lastWorkout
      ? (now.getTime() - recoveryData.lastWorkout.getTime()) / (1000 * 60 * 60)
      : 48;
    const workoutRecovery = (Math.min(hoursSinceWorkout, 72) / 72) * 30;

    const hoursSinceMeal = recoveryData.lastMeal
      ? (now.getTime() - recoveryData.lastMeal.getTime()) / (1000 * 60 * 60)
      : 3;
    const nutritionFactor = (1 - Math.min(hoursSinceMeal, 6) / 6) * 15;

    const waterFactor = (Math.min(recoveryData.waterIntake, 3000) / 3000) * 10;
    const stressFactor = (1 - (recoveryData.stressLevel - 1) / 4) * 5;

    const score = Math.round(Math.min(100,
      sleepQuality + workoutRecovery + nutritionFactor + waterFactor + stressFactor
    ));

    setRecoveryData(prev => ({ ...prev, recoveryScore: score }));
    return score;
  }, [recoveryData, setRecoveryData]);

  // Get recovery emoji
  const getRecoveryEmoji = (score: number): string => {
    return score < 30 ? "üò´" :
      score < 50 ? "üòü" :
        score < 70 ? "üòê" : "üòä";
  };

  // Get recovery tips
  const getRecoveryTips = (data: RecoveryData): string => {
    const tips = [];

    if (data.sleepHours < 7) tips.push("‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Ç—å 7-9 —á–∞—Å–æ–≤");
    if (data.waterIntake < 2000) tips.push(`‚Ä¢ –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã, —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${data.waterIntake}–º–ª`);
    if (data.stressLevel > 3) tips.push("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞");

    return tips.length ? tips.join('\n') : "–í—ã –æ—Ç–ª–∏—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ—Å—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
  };

  // Get nutrition info
  const getNutritionInfo = useCallback(async (query: string): Promise<NutritionData | null> => {
    if (!nutritionixAppId || !nutritionixAppKey || nutritionixAppId === 'your_id' || nutritionixAppKey === 'your_key') {
      console.warn("Nutritionix API keys not configured, using fallback data");
      return null;
    }

    const foodDictionary: Record<string, string> = {
      '—è–±–ª–æ–∫–æ': 'apple',
      '—è–±–ª–æ–∫–∏': 'apples',
      '–±–∞–Ω–∞–Ω': 'banana',
      '–±–∞–Ω–∞–Ω—ã': 'bananas',
      '–≥—Ä–µ—á–∫–∞': 'buckwheat',
      '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': 'chicken breast',
      '–∫—É—Ä–∏—Ü–∞': 'chicken',
      '–≥–æ–≤—è–¥–∏–Ω–∞': 'beef',
      '—Ä–∏—Å': 'rice',
      '–æ–≤—Å—è–Ω–∫–∞': 'oatmeal',
      '–æ–≤—Å—è–Ω–∞—è –∫–∞—à–∞': 'oatmeal',
      '—Ç–≤–æ—Ä–æ–≥': 'cottage cheese',
      '—è–π—Ü–æ': 'egg',
      '—è–π—Ü–∞': 'eggs',
    };

    const normalizedQuery = query.trim().toLowerCase();
    const englishQuery = foodDictionary[normalizedQuery] || normalizedQuery;

    try {
      const response = await fetch('https://trackapi.nutritionix.com/v2/natural/nutrients', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-app-id': nutritionixAppId,
          'x-app-key': nutritionixAppKey
        },
        body: JSON.stringify({
          query: englishQuery,
          timezone: "UTC"
        })
      });

      if (!response.ok) {
        console.error(`Nutrition API error: ${response.status} ${response.statusText}`);
        return null;
      }

      const data = await response.json();
      if (!data?.foods?.length) {
        return null;
      }

      return {
        ...data.foods[0],
        food_name: query
      };
    } catch (error) {
      console.error("Nutrition API error:", error);
      return null;
    }
  }, [nutritionixAppId, nutritionixAppKey]);

  // Find trainer by specialty
  const findTrainerBySpecialty = useCallback((text: string): Trainer | null => {
    const specialtyMap: Record<string, keyof typeof knowledgeBase.trainers> = {
      '–π–æ–≥–∞': 'anna-petrova',
      '–π–æ–≥—É': 'anna-petrova',
      '–π–æ–≥–µ': 'anna-petrova',
      '—Å—Ç—Ä–µ—Ç—á–∏–Ω–≥': 'anna-petrova',
      '—Ä–∞—Å—Ç—è–∂–∫–∞': 'anna-petrova',
      '—Ä–∞—Å—Ç—è–∂–∫—É': 'anna-petrova',
      '–≥–∏–±–∫–æ—Å—Ç—å': 'anna-petrova',
      '—Å–∏–ª–æ–≤': 'mikhail-volkov',
      '—Å–∏–ª—É': 'mikhail-volkov',
      '–º–∞—Å—Å': 'mikhail-volkov',
      '–º–∞—Å—Å—É': 'mikhail-volkov',
      '–º—ã—à—Ü': 'mikhail-volkov',
      '–º—ã—à–µ—á–Ω': 'mikhail-volkov',
      '–∫–∞—á–∞—Ç—å': 'mikhail-volkov',
      '–∫–∞—á–∞–ª–∫': 'mikhail-volkov',
      '–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥': 'mikhail-volkov',
      '–ø–æ—Ö—É–¥': 'elena-smirnova',
      '–ø–æ—Ö—É–¥–µ—Ç—å': 'elena-smirnova',
      '–ø–æ—Ö—É–¥–µ–Ω–∏–µ': 'elena-smirnova',
      '—Å–±—Ä–æ—Å': 'elena-smirnova',
      '—Å–±—Ä–æ—Å–∏—Ç—å': 'elena-smirnova',
      '–≤–µ—Å': 'elena-smirnova',
      '–∫–∞—Ä–¥–∏–æ': 'elena-smirnova',
      '–∂–∏—Ä': 'elena-smirnova',
      '–∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ': 'elena-smirnova',
      '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å': 'dmitriy-kozlov',
      '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π': 'dmitriy-kozlov',
      'trx': 'dmitriy-kozlov',
      '—Ä–µ–∞–±–∏–ª–∏—Ç': 'dmitriy-kozlov',
      '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ': 'dmitriy-kozlov',
      '—Ç—Ä–∞–≤–º': 'dmitriy-kozlov',
      '–≥—Ä—É–ø–ø': 'olga-ivanova',
      '–≥—Ä—É–ø–ø–æ–≤—ã–µ': 'olga-ivanova',
      '–≥—Ä—É–ø–ø–æ–≤—ã—Ö': 'olga-ivanova',
      '–∞—ç—Ä–æ–±': 'olga-ivanova',
      '–∑—É–º–±–∞': 'olga-ivanova',
      'zumba': 'olga-ivanova',
      '—Ç–∞–Ω—Ü': 'olga-ivanova'
    };

    for (const [key, trainerId] of Object.entries(specialtyMap)) {
      if (text.includes(key)) {
        return knowledgeBase.trainers[trainerId];
      }
    }
    return null;
  }, []);

  // Handle recovery command
  const handleRecoveryCommand = (command: string, params?: any): string => {
    switch (command) {
      case 'log_sleep':
        setRecoveryData(prev => ({
          ...prev,
          sleepHours: params?.hours || prev.sleepHours
        }));
        return `–ó–∞–ø–∏—Å–∞–ª —Å–æ–Ω: ${params?.hours || recoveryData.sleepHours} —á–∞—Å–æ–≤`;

      case 'log_water':
        setRecoveryData(prev => ({
          ...prev,
          waterIntake: prev.waterIntake + (params?.ml || 0)
        }));
        return `–î–æ–±–∞–≤–ª–µ–Ω–æ ${params?.ml} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${recoveryData.waterIntake + (params?.ml || 0)} –º–ª`;

      case 'start_stretching':
        return `–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞—Å—Ç—è–∂–∫–∏:\n${recoveryKnowledgeBase.stretchingPrograms[0].exercises
          .map(ex => `${ex.name} - ${ex.duration} –º–∏–Ω`)
          .join('\n')
          }`;

      case 'recovery_status':
        return `–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${recoveryData.recoveryScore}/100\n` +
          `${getRecoveryEmoji(recoveryData.recoveryScore)} ${recoveryData.recoveryScore < 30 ? "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å" :
            recoveryData.recoveryScore < 50 ? "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å" :
              recoveryData.recoveryScore < 70 ? "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å" : "–û—Ç–ª–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
          }`;

      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è";
    }
  };

  // Generate bot response - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
  const generateBotResponse = useCallback(async (text: string): Promise<Message> => {
    const generateId = () => `${Date.now()}-${Math.floor(Math.random() * 1000)}`;

    let responseText = "";
    let suggestions: string[] = [];
    let links: Link[] = [];

    // Shop-specific queries
    if (text.match(/(–º–∞–≥–∞–∑–∏–Ω|–∫—É–ø–∏—Ç—å|–ø—Ä–æ—Ç–µ–∏–Ω|—Å–ø–æ—Ä—Ç–ø–∏—Ç|–ø–∏—Ç–∞–Ω–∏–µ.*—Å–ø–æ—Ä—Ç|bcaa|–∫—Ä–µ–∞—Ç–∏–Ω|–≥–µ–π–Ω–µ—Ä|–¥–æ–±–∞–≤–∫|–≤–∏—Ç–∞–º–∏–Ω)/i)) {
      // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      if (text.match(/(–ø–æ–∫–∞–∂|–Ω–∞–π–¥|–µ—Å—Ç—å|–∫–∞–∫–∏–µ)/i)) {
        const searchQuery = text.replace(/(–ø–æ–∫–∞–∂–∏|–Ω–∞–π–¥–∏|–µ—Å—Ç—å|–∫–∞–∫–∏–µ|–≤ –º–∞–≥–∞–∑–∏–Ω–µ|–ø—Ä–æ–¥—É–∫—Ç—ã)/gi, '').trim();
        
        try {
          const foundProducts = await findProductsByQuery(searchQuery || '–≤—Å–µ');
          
          if (foundProducts.length > 0) {
            responseText = `üõí –ù–∞—à–µ–ª ${foundProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n`;
            
            foundProducts.slice(0, 5).forEach((product: ShopProduct) => {
              responseText += `**${product.name}**\n`;
              responseText += `üí∞ ${product.price.toLocaleString()}‚ÇΩ`;
              if (product.rating) responseText += ` ‚≠ê ${product.rating}`;
              responseText += `\nüì¶ –í –Ω–∞–ª–∏—á–∏–∏: ${product.inStock} —à—Ç.\n\n`;
            });
            
            suggestions = [
              "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã",
              "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å",
              "–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
              "–ß—Ç–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?"
            ];
          } else {
            responseText = "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫.";
            suggestions = ["–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"];
          }
        } catch (error) {
          responseText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
      }
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–ª—è–º
      else if (text.match(/(–¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è|–ø–æ—Ö—É–¥–µ—Ç—å|—Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å|–∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ)/i)) {
        try {
          const recommendations = await analyzeUserGoals(['–ø–æ—Ö—É–¥–µ–Ω–∏–µ']);
          setRecommendations(recommendations);
          
          responseText = "üéØ –î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n";
          recommendations.slice(0, 3).forEach(rec => {
            responseText += `**${rec.product.name}**\n`;
            responseText += `${rec.reason}\n`;
            responseText += `üí∞ ${rec.product.price.toLocaleString()}‚ÇΩ\n\n`;
          });
          
          suggestions = ["–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ", "–î—Ä—É–≥–∏–µ —Ü–µ–ª–∏"];
        } catch (error) {
          responseText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
      }
      else if (text.match(/(–¥–ª—è –º–∞—Å—Å—ã|–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É|–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã|–º—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞)/i)) {
        try {
          const recommendations = await analyzeUserGoals(['–Ω–∞–±–æ—Ä_–º–∞—Å—Å—ã']);
          setRecommendations(recommendations);
          
          responseText = "üí™ –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n";
          recommendations.slice(0, 3).forEach(rec => {
            responseText += `**${rec.product.name}**\n`;
            responseText += `${rec.reason}\n`;
            responseText += `üí∞ ${rec.product.price.toLocaleString()}‚ÇΩ\n\n`;
          });
          
          suggestions = ["–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–∏—Ç–∞–Ω–∏—è", "–°—Ö–µ–º–∞ –ø—Ä–∏–µ–º–∞"];
        } catch (error) {
          responseText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
      }
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
      else if (text.match(/(—Å—Ä–∞–≤–Ω–∏|—á—Ç–æ –ª—É—á—à–µ|–≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É)/i)) {
        responseText = "üîç –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:\n\n" +
          "1. –ù–∞–∑–æ–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n" +
          "2. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è\n\n" +
          "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°—Ä–∞–≤–Ω–∏ –ø—Ä–æ—Ç–µ–∏–Ω Gold Standard –∏ Syntha-6'";
        
        suggestions = ["–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ç–µ–∏–Ω—ã", "–°—Ä–∞–≤–Ω–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–Ω", "–õ—É—á—à–∏–µ BCAA"];
      }
      // –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –æ –º–∞–≥–∞–∑–∏–Ω–µ
      else {
        responseText = "üõí –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è:\n\n" +
          "üíä **–ü—Ä–æ—Ç–µ–∏–Ω—ã –∏ –≥–µ–π–Ω–µ—Ä—ã**\n" +
          "üî• **–ñ–∏—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª–∏ –∏ L-–∫–∞—Ä–Ω–∏—Ç–∏–Ω**\n" +
          "‚ö° **–ü—Ä–µ–¥—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã**\n" +
          "üí™ **–ö—Ä–µ–∞—Ç–∏–Ω –∏ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã**\n" +
          "üå± **–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã**\n\n" +
          "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤ –≤—ã–±–æ—Ä–µ?";
        
        links.push({
          title: "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
          url: "/shop",
          description: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º",
          icon: ShoppingBag
        });
        
        suggestions = [
          "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?",
          "–¢–æ–≤–∞—Ä—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã",
          "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
          "–ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º"
        ];
      }
    }
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    else if (text.match(/(–ø—Ä–æ—Ç–µ–∏–Ω|bcaa|–∫—Ä–µ–∞—Ç–∏–Ω|–≥–µ–π–Ω–µ—Ä|–∂–∏—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å|–≤–∏—Ç–∞–º–∏–Ω—ã|–æ–º–µ–≥–∞|–≥–ª—é—Ç–∞–º–∏–Ω)/i)) {
      const productType = text.match(/(–ø—Ä–æ—Ç–µ–∏–Ω|bcaa|–∫—Ä–µ–∞—Ç–∏–Ω|–≥–µ–π–Ω–µ—Ä|–∂–∏—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å|–≤–∏—Ç–∞–º–∏–Ω—ã|–æ–º–µ–≥–∞|–≥–ª—é—Ç–∞–º–∏–Ω)/i)?.[0] || '';
      
      responseText = `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${productType}:\n\n`;
      
      const productInfo: Record<string, string> = {
        '–ø—Ä–æ—Ç–µ–∏–Ω': '**–ü—Ä–æ—Ç–µ–∏–Ω** - –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –º—ã—à—Ü.\n\n' +
          '‚úÖ –°–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ä–æ—Å—Ç—É –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n' +
          '‚úÖ –£—Å–∫–æ—Ä—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n' +
          '‚úÖ –ü–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—à—Ü—ã –ø—Ä–∏ –ø–æ—Ö—É–¥–µ–Ω–∏–∏\n\n' +
          'üìã –ü—Ä–∏–Ω–∏–º–∞—Ç—å: 1-2 –ø–æ—Ä—Ü–∏–∏ –≤ –¥–µ–Ω—å (—É—Ç—Ä–æ–º –∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)',
          
        'bcaa': '**BCAA** - –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–µ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã.\n\n' +
          '‚úÖ –ó–∞—â–∏—â–∞—é—Ç –º—ã—à—Ü—ã –æ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è\n' +
          '‚úÖ –£–º–µ–Ω—å—à–∞—é—Ç —É—Å—Ç–∞–ª–æ—Å—Ç—å\n' +
          '‚úÖ –£—Å–∫–æ—Ä—è—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n' +
          'üìã –ü—Ä–∏–Ω–∏–º–∞—Ç—å: –¥–æ, –≤–æ –≤—Ä–µ–º—è –∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          
        '–∫—Ä–µ–∞—Ç–∏–Ω': '**–ö—Ä–µ–∞—Ç–∏–Ω** - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.\n\n' +
          '‚úÖ –ü–æ–≤—ã—à–∞–µ—Ç —Å–∏–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n' +
          '‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É\n' +
          '‚úÖ –£–ª—É—á—à–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å\n\n' +
          'üìã –ü—Ä–∏–Ω–∏–º–∞—Ç—å: 3-5–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
      };
      
      responseText += productInfo[productType.toLowerCase()] || 
        `${productType} - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –¥–æ–±–∞–≤–∫–∞. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?`;
      
      suggestions = [
        `–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ${productType}`,
        "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å?",
        "–°—Ö–µ–º–∞ –ø—Ä–∏–µ–º–∞",
        "–õ—É—á—à–∏–µ –±—Ä–µ–Ω–¥—ã"
      ];
    }
    // Quick recovery commands
    else if (text === '–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω' || text === '—Ç—Ä–µ–∫–µ—Ä —Å–Ω–∞') {
      responseText = "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Å–ø–∞–ª–∏? –ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –°–ø–∞–ª 7 —á–∞—Å–æ–≤\n‚Ä¢ –ü—Ä–æ—Å–ø–∞–ª 8.5 —á–∞—Å–æ–≤";
      suggestions = ["–°–ø–∞–ª 7 —á–∞—Å–æ–≤", "–°–ø–∞–ª 8 —á–∞—Å–æ–≤", "–°–ø–∞–ª 6.5 —á–∞—Å–æ–≤"];
    }
    else if (text === '–¥–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É' || text === '–ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º') {
      responseText = "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã –≤—ã–ø–∏–ª–∏? –ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –í—ã–ø–∏–ª 500 –º–ª\n‚Ä¢ –í—ã–ø–∏–ª 1 –ª–∏—Ç—Ä\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å 250 –º–ª –≤–æ–¥—ã";
      suggestions = ["–í—ã–ø–∏–ª 500 –º–ª", "–í—ã–ø–∏–ª 1 –ª–∏—Ç—Ä", "–í—ã–ø–∏–ª 250 –º–ª"];
    }
    else if (text === '–æ—Ü–µ–Ω–∏—Ç—å —Å—Ç—Ä–µ—Å—Å') {
      responseText = "–û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –æ—Ç 1 –¥–æ 5:\n‚Ä¢ 1 - –ø–æ–ª–Ω–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n‚Ä¢ 3 - —É–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å\n‚Ä¢ 5 - —Å–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å";
      suggestions = ["–ú–æ–π —Å—Ç—Ä–µ—Å—Å 2", "–ú–æ–π —Å—Ç—Ä–µ—Å—Å 3", "–ú–æ–π —Å—Ç—Ä–µ—Å—Å 4"];
    }
    else if (text === '–ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏' || text === '–Ω–∞—á–∞—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É') {
      const program = recoveryKnowledgeBase.stretchingPrograms[0];
      responseText = `üßò –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞—Å—Ç—è–∂–∫–∏:\n\n`;
      program.exercises.forEach((ex, i) => {
        responseText += `${i + 1}. **${ex.name}** (${ex.duration} –º–∏–Ω)\n   ${ex.instructions}\n\n`;
      });
      suggestions = ["–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É", "–°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å—Ç—è–∂–∫–µ", "–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"];
    }
    // Greetings
    else if (text.match(/(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä|—Ö–∞–π|hello|hi)/i)) {
      responseText = "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ FitFlow Pro! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Ç—Ä–µ–Ω–µ—Ä–∞—Ö, –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–µ. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?";
      suggestions = ["–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", "–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"];
    }
    // Thanks
    else if (text.match(/(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä|—Å–ø—Å|thanks)/i)) {
      responseText = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å. –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ FitFlow Pro! üí™";
      suggestions = ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã", "–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"];
    }
    // Nutrition queries
    else if (text.match(/(–∫–∞–ª–æ—Ä–∏|–∫–∫–∞–ª|–±–µ–ª–∫|–∂–∏—Ä|—É–≥–ª–µ–≤–æ–¥|–ø–∏—Ç–∞—Ç–µ–ª—å–Ω|–ø–∏—â–µ–≤|–Ω—É—Ç—Ä–∏–µ–Ω—Ç|—Å–æ—Å—Ç–∞–≤|—Å–∫–æ–ª—å–∫–æ.*–≤\s|—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫)/i)) {
      const foodMatch = text.match(/(?:–∫–∞–ª–æ—Ä–∏[–∏–π]?|–∫–∫–∞–ª|–±–µ–ª–∫[–∏–æ–≤]?|–∂–∏—Ä[—ã–æ–≤]?|—É–≥–ª–µ–≤–æ–¥[—ã–æ–≤]?|—Å–æ—Å—Ç–∞–≤|—Å–∫–æ–ª—å–∫–æ.*)?(?:\s+–≤\s+|\s+)([–∞-—è–ê-–Ø\s]+?)(?:\?|$)/i);
      const foodQuery = foodMatch ? foodMatch[1].trim() : text.replace(/(–∫–∞–ª–æ—Ä–∏[–∏–π]?|–∫–∫–∞–ª|–ø–∏—Ç–∞–Ω–∏–µ|–µ–¥–∞|—Å–∫–æ–ª—å–∫–æ|—Å–æ—Å—Ç–∞–≤|–ø–∏—â–µ–≤–∞—è|—Ü–µ–Ω–Ω–æ—Å—Ç—å|–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã|–≤)/gi, '').trim();

      if (foodQuery && foodQuery.length > 2) {
        const nutrition = await getNutritionInfo(foodQuery);

        if (nutrition) {
          responseText = `üçè –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å "${nutrition.food_name}":\n`
            + `üîπ –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(nutrition.nf_calories)} –∫–∫–∞–ª\n`
            + `üîπ –ë–µ–ª–∫–∏: ${Math.round(nutrition.nf_protein)}–≥\n`
            + `üîπ –ñ–∏—Ä—ã: ${Math.round(nutrition.nf_total_fat)}–≥\n`
            + `üîπ –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(nutrition.nf_total_carbohydrate)}–≥\n`
            + (nutrition.serving_weight_grams ?
              `üìä –ù–∞ 100–≥: ${Math.round(nutrition.nf_calories * 100 / nutrition.serving_weight_grams)} –∫–∫–∞–ª` :
              '');

          suggestions = ["–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π", "–ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è"];
        } else {
          // Fallback response with common foods nutrition data
          const commonFoods: Record<string, { calories: number; protein: number; fat: number; carbs: number }> = {
            '—è–±–ª–æ–∫–æ': { calories: 52, protein: 0.3, fat: 0.2, carbs: 14 },
            '–±–∞–Ω–∞–Ω': { calories: 89, protein: 1.1, fat: 0.3, carbs: 23 },
            '–≥—Ä–µ—á–∫–∞': { calories: 343, protein: 13, fat: 3.4, carbs: 72 },
            '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': { calories: 165, protein: 31, fat: 3.6, carbs: 0 },
            '—Ç–≤–æ—Ä–æ–≥': { calories: 98, protein: 11, fat: 4.3, carbs: 3.4 },
            '—è–π—Ü–æ': { calories: 155, protein: 13, fat: 11, carbs: 1.1 },
            '–æ–≤—Å—è–Ω–∫–∞': { calories: 389, protein: 17, fat: 7, carbs: 66 },
            '—Ä–∏—Å': { calories: 130, protein: 2.7, fat: 0.3, carbs: 28 }
          };

          const normalizedFood = foodQuery.toLowerCase();
          const foodData = commonFoods[normalizedFood];

          if (foodData) {
            responseText = `üçè –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å "${foodQuery}" (–Ω–∞ 100–≥):\n`
              + `üîπ –ö–∞–ª–æ—Ä–∏–∏: ${foodData.calories} –∫–∫–∞–ª\n`
              + `üîπ –ë–µ–ª–∫–∏: ${foodData.protein}–≥\n`
              + `üîπ –ñ–∏—Ä—ã: ${foodData.fat}–≥\n`
              + `üîπ –£–≥–ª–µ–≤–æ–¥—ã: ${foodData.carbs}–≥\n\n`
              + `‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã`;

            suggestions = ["–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π", "–ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "–ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"];
          } else {
            responseText = `üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ "${foodQuery}".\n\n`
              + `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:\n`
              + `‚Ä¢ –Ø–±–ª–æ–∫–æ, –±–∞–Ω–∞–Ω, –∞–ø–µ–ª—å—Å–∏–Ω\n`
              + `‚Ä¢ –ì—Ä–µ—á–∫–∞, —Ä–∏—Å, –æ–≤—Å—è–Ω–∫–∞\n`
              + `‚Ä¢ –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, –≥–æ–≤—è–¥–∏–Ω–∞, —Ä—ã–±–∞\n`
              + `‚Ä¢ –¢–≤–æ—Ä–æ–≥, –º–æ–ª–æ–∫–æ, —è–π—Ü–∞`;

            suggestions = ["–ö–∞–ª–æ—Ä–∏–∏ –≤ —è–±–ª–æ–∫–µ", "–ë–µ–ª–∫–∏ –≤ —Ç–≤–æ—Ä–æ–≥–µ", "–ö–∞–ª–æ—Ä–∏–∏ –≤ –≥—Ä–µ—á–∫–µ"];
          }
        }
      } else {
        responseText = "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏:\n"
          + "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –≤ –æ–≤—Å—è–Ω–∫–µ\n"
          + "‚Ä¢ –ë–µ–ª–∫–∏ –≤ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–µ\n"
          + "‚Ä¢ –°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —Ç–≤–æ—Ä–æ–≥–µ";
        suggestions = ["–ö–∞–ª–æ—Ä–∏–∏ –≤ –±–∞–Ω–∞–Ω–µ", "–ë–µ–ª–∫–∏ –≤ —è–π—Ü–µ", "–£–≥–ª–µ–≤–æ–¥—ã –≤ —Ä–∏—Å–µ"];
      }
    }
    // Trainer queries
    else if (text.match(/(—Ç—Ä–µ–Ω–µ—Ä|–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä|–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫|coach)/i)) {
      const trainer = findTrainerBySpecialty(text);

      if (trainer) {
        const trainerId = Object.keys(knowledgeBase.trainers).find(
          id => knowledgeBase.trainers[id as keyof typeof knowledgeBase.trainers] === trainer
        );

        const emoji: Record<string, string> = {
          'anna-petrova': 'üßò‚Äç‚ôÄÔ∏è',
          'mikhail-volkov': 'üí™',
          'elena-smirnova': 'üî•',
          'dmitriy-kozlov': 'üéØ',
          'olga-ivanova': 'üíÉ'
        };

        responseText = `${trainerId ? emoji[trainerId] : '‚≠ê'} –î–ª—è ${trainer.specialty.toLowerCase()} —Ä–µ–∫–æ–º–µ–Ω–¥—É—é ${trainer.name}!\n\n` +
          `${trainer.description}\n` +
          `üí∞ –¶–µ–Ω–∞: ${trainer.price}\n` +
          `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${trainer.rating}/5`;

        links.push({
          title: `${trainer.name}`,
          url: `/trainers/${trainerId}`,
          description: trainer.specialty,
          icon: trainer.specialty.includes('–π–æ–≥–∞') ? Heart :
            trainer.specialty.includes('—Å–∏–ª–æ–≤') ? Dumbbell :
              trainer.specialty.includes('–∫–∞—Ä–¥–∏–æ') ? Zap :
                trainer.specialty.includes('—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å') ? Target :
                  trainer.specialty.includes('–≥—Ä—É–ø–ø') ? Users : Star
        });

        suggestions = ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É", "–í—Å–µ —Ç—Ä–µ–Ω–µ—Ä—ã", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞"];
      } else {
        responseText = "üë• –£ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç 6 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π!\n\n" +
          "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞:\n" +
          "‚Ä¢ –ü–æ—Ö—É–¥–µ–Ω–∏–µ –∏ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ\n" +
          "‚Ä¢ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n" +
          "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏\n" +
          "‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥\n" +
          "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è";

        links.push({
          title: "–í—Å–µ —Ç—Ä–µ–Ω–µ—Ä—ã FitFlow Pro",
          url: "/trainers",
          description: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞",
          icon: Users
        });

        suggestions = ["–ü–æ—Ö—É–¥–µ—Ç—å", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ô–æ–≥–∞", "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è"];
      }
    }
    // Membership/subscription queries
    else if (text.match(/(–∞–±–æ–Ω–µ–º–µ–Ω—Ç|–ø–æ–¥–ø–∏—Å–∫|—á–ª–µ–Ω—Å—Ç–≤|—Ç–∞—Ä–∏—Ñ|membership|—Å—Ç–æ–∏–º–æ—Å—Ç—å.*–∞–±–æ–Ω–µ–º–µ–Ω—Ç)/i)) {
      responseText = "üí≥ –ù–∞—à–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n\n";

      knowledgeBase.memberships.forEach(membership => {
        const emoji = membership.popular ? 'üî•' : membership.discount ? 'üéØ' : '‚ú®';
        responseText += `${emoji} **${membership.name}** - ${membership.price.toLocaleString()}‚ÇΩ\n`;
        responseText += `   ${membership.description}`;
        if (membership.discount) responseText += ` (—Å–∫–∏–¥–∫–∞ ${membership.discount}%)`;
        responseText += '\n\n';
      });

      responseText += "üéÅ –ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ - –ë–ï–°–ü–õ–ê–¢–ù–û!";

      links.push({
        title: "–û—Ñ–æ—Ä–º–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
        url: "/memberships",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω",
        icon: CreditCard
      });

      suggestions = ["–ë–∞–∑–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç", "–ü—Ä–µ–º–∏—É–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç", "–ë–µ–∑–ª–∏–º–∏—Ç"];
    }
    // Programs queries  
    else if (text.match(/(–ø—Ä–æ–≥—Ä–∞–º|–∑–∞–Ω—è—Ç|—Ç—Ä–µ–Ω–∏—Ä–æ–≤|–∫–ª–∞—Å—Å|–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω)/i) && !text.match(/(–∑–∞–ø–∏—Å|–±—Ä–æ–Ω–∏—Ä)/i)) {
      const programs = knowledgeBase.programs;
      responseText = "üèÉ‚Äç‚ôÇÔ∏è –ù–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n";

      const programEmoji: Record<string, string> = {
        yoga: 'üßò‚Äç‚ôÄÔ∏è',
        strength: 'üí™',
        cardio: 'üî•',
        functional: 'üéØ'
      };

      Object.entries(programs).forEach(([key, program]) => {
        responseText += `${programEmoji[key]} **${program.name}**\n`;
        responseText += `   ${program.description}\n`;
        responseText += `   üí∞ ${program.price}\n\n`;
      });

      links.push({
        title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º",
        url: "/programs",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É",
        icon: Target
      });

      suggestions = ["–ô–æ–≥–∞", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ö–∞—Ä–¥–∏–æ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥"];
    }
    // Booking queries
    else if (text.match(/(–∑–∞–ø–∏—Å|–±—Ä–æ–Ω–∏—Ä|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|—Ä–µ–∑–µ—Ä–≤)/i)) {
      responseText = "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n" +
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É\n" +
        "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n" +
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n" +
        "üí° –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É!";

      links.push(
        {
          title: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É",
          url: "/trainers",
          description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –≤—Ä–µ–º—è",
          icon: Calendar
        },
        {
          title: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
          url: "/member-dashboard",
          description: "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å—è–º–∏ –æ–Ω–ª–∞–π–Ω",
          icon: User
        }
      );

      suggestions = ["–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"];
    }
    // Shop queries
    else if (text.match(/(–º–∞–≥–∞–∑–∏–Ω|–∫—É–ø–∏—Ç—å|–ø—Ä–æ—Ç–µ–∏–Ω|—Å–ø–æ—Ä—Ç–ø–∏—Ç|–ø–∏—Ç–∞–Ω–∏–µ.*—Å–ø–æ—Ä—Ç|bcaa|–∫—Ä–µ–∞—Ç–∏–Ω|–≥–µ–π–Ω–µ—Ä|–¥–æ–±–∞–≤–∫)/i)) {
      responseText = "üõí –í –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-–º–∞–≥–∞–∑–∏–Ω–µ:\n\n" +
        "üíä **–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ**\n" +
        "‚Ä¢ –ü—Ä–æ—Ç–µ–∏–Ω—ã –∏ –≥–µ–π–Ω–µ—Ä—ã\n" +
        "‚Ä¢ BCAA –∏ –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã\n" +
        "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–Ω –∏ –ø—Ä–µ–¥—Ç—Ä–µ–Ω–∏–∫–∏\n" +
        "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã\n\n" +
        "üèÉ‚Äç‚ôÇÔ∏è **–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã**\n" +
        "‚Ä¢ –ü–µ—Ä—á–∞—Ç–∫–∏ –∏ –ø–æ—è—Å–∞\n" +
        "‚Ä¢ –®–µ–π–∫–µ—Ä—ã –∏ –±—É—Ç—ã–ª–∫–∏\n" +
        "‚Ä¢ –≠—Å–ø–∞–Ω–¥–µ—Ä—ã –∏ —Ä–µ–∑–∏–Ω–∫–∏\n\n" +
        "üëï **–û–¥–µ–∂–¥–∞ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞**\n" +
        "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞\n" +
        "‚Ä¢ –û–±—É–≤—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n" +
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏!";

      links.push({
        title: "–§–∏—Ç–Ω–µ—Å-–º–∞–≥–∞–∑–∏–Ω",
        url: "/shop",
        description: "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        icon: ShoppingBag
      });

      suggestions = ["–ü—Ä–æ—Ç–µ–∏–Ω—ã", "–í–∏—Ç–∞–º–∏–Ω—ã", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"];
    }
    // Price queries
    else if (text.match(/(—Ü–µ–Ω|—Å—Ç–æ–∏–º–æ—Å—Ç|—Å–∫–æ–ª—å–∫–æ.*—Å—Ç–æ–∏—Ç|—Ç–∞—Ä–∏—Ñ|–ø—Ä–∞–π—Å)/i)) {
      responseText = "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\n" +
        "**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n" +
        "‚Ä¢ –ù–∞—á–∏–Ω–∞—é—â–∏–π —Ç—Ä–µ–Ω–µ—Ä: –æ—Ç 1800‚ÇΩ/—á–∞—Å\n" +
        "‚Ä¢ –û–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä: 2200-2500‚ÇΩ/—á–∞—Å\n" +
        "‚Ä¢ –≠–ª–∏—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä: –æ—Ç 5000‚ÇΩ/—á–∞—Å\n\n" +
        "**–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã:**\n" +
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–π: 2990‚ÇΩ/–º–µ—Å—è—Ü\n" +
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º: 4990‚ÇΩ/–º–µ—Å—è—Ü\n" +
        "‚Ä¢ VIP: 7990‚ÇΩ/–º–µ—Å—è—Ü\n" +
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –≥–æ–¥–æ–≤–æ–π: 39900‚ÇΩ (—Å–∫–∏–¥–∫–∞ 25%)\n\n" +
        "**–ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**\n" +
        "‚Ä¢ –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: 700-1000‚ÇΩ\n" +
        "‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü: –æ—Ç 4000‚ÇΩ\n\n" +
        "üéÅ –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –ë–ï–°–ü–õ–ê–¢–ù–û!";

      suggestions = ["–¶–µ–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"];
    }
    // Schedule queries
    else if (text.match(/(–≤—Ä–µ–º—è|–≥—Ä–∞—Ñ–∏–∫|—Ä–∞—Å–ø–∏—Å–∞–Ω|–∫–æ–≥–¥–∞.*—Ä–∞–±–æ—Ç|—Ä–µ–∂–∏–º)/i)) {
      responseText = "üïê –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã FitFlow Pro:\n\n" +
        "**–§–∏—Ç–Ω–µ—Å-–∫–ª—É–±:**\n" +
        "üåÖ –ü–Ω-–ü—Ç: 06:00 - 24:00\n" +
        "üåÑ –°–±-–í—Å: 08:00 - 22:00\n\n" +
        "**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n" +
        "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: 07:00 - 21:00\n\n" +
        "**–ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**\n" +
        "üèÉ‚Äç‚ôÇÔ∏è –£—Ç—Ä–æ: 07:00, 08:00, 09:00\n" +
        "‚òÄÔ∏è –î–µ–Ω—å: 12:00, 13:00\n" +
        "üåÜ –í–µ—á–µ—Ä: 18:00, 19:00, 20:00\n\n" +
        "üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã 24/7 –¥–ª—è VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤!";

      suggestions = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞"];
    }
    // Location queries
    else if (text.match(/(–≥–¥–µ|–∞–¥—Ä–µ—Å|–ª–æ–∫–∞—Ü|–º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω|–∫–∞–∫.*–¥–æ–±—Ä–∞—Ç—å|–Ω–∞—Ö–æ–¥–∏—Ç)/i)) {
      responseText = "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞!\n\n" +
        "üè¢ **–ê–¥—Ä–µ—Å:** –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –§–∏—Ç–Ω–µ—Å, 15\n" +
        "üöá **–ú–µ—Ç—Ä–æ:** –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è (5 –º–∏–Ω –ø–µ—à–∫–æ–º)\n" +
        "üöå **–ê–≤—Ç–æ–±—É—Å—ã:** ‚Ññ15, ‚Ññ27, ‚Ññ44\n\n" +
        "üÖøÔ∏è **–ü–∞—Ä–∫–æ–≤–∫–∞:**\n" +
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n" +
        "‚Ä¢ 50 –º–µ—Å—Ç\n" +
        "‚Ä¢ –û—Ö—Ä–∞–Ω—è–µ–º–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è\n\n" +
        "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**\n" +
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n" +
        "‚Ä¢ WhatsApp: +7 (925) 123-45-67\n" +
        "‚Ä¢ Email: info@fitflowpro.ru";

      links.push({
        title: "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
        url: "/contacts",
        description: "–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞",
        icon: Target
      });

      suggestions = ["–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ç—Ä–æ", "–ï—Å—Ç—å –ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∞", "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏"];
    }
    // Recovery queries
    else if (text.match(/(–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω|–æ—Ç–¥—ã—Ö|—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü|—É—Å—Ç–∞–ª|–±–æ–ª—è—Ç.*–º—ã—à—Ü|–∫—Ä–µ–ø–∞—Ç—É—Ä)/i) ||
      text.match(/(—Å–æ–Ω|—Å–ø–∞–ª|—Å–ø–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å.*—Å–æ–Ω)/i) ||
      text.match(/(–≤–æ–¥–∞|–≤–æ–¥[—ã—É]|–ø–∏—Ç—å|–≤—ã–ø–∏–ª|–≥–∏–¥—Ä–∞—Ç–∞—Ü|–¥–æ–±–∞–≤–∏—Ç—å.*–≤–æ–¥)/i) ||
      text.match(/(—Å—Ç—Ä–µ—Å—Å|–Ω–∞–ø—Ä—è–∂|—Ç—Ä–µ–≤–æ–≥|–±–µ—Å–ø–æ–∫–æ|–º–æ–π.*—Å—Ç—Ä–µ—Å—Å)/i) ||
      text.match(/(—Ä–∞—Å—Ç—è–∂–∫|—Å—Ç—Ä–µ—Ç—á|—Ä–∞–∑–º–∏–Ω|–ø—Ä–æ–≥—Ä–∞–º–º–∞.*—Ä–∞—Å—Ç—è–∂)/i)) {

      // Sleep logging
      if (text.match(/(–∑–∞–ø–∏—Å–∞—Ç—å.*—Å–æ–Ω|—Å–ø–∞–ª|–ø—Ä–æ—Å–ø–∞–ª|—Å–æ–Ω.*\d+)/i)) {
        const hoursMatch = text.match(/(\d+[,.]?\d*)\s*(?:—á–∞—Å|—á)?/i) || text.match(/(\d+[,.]?\d*)/);
        const hours = hoursMatch ? parseFloat(hoursMatch[1].replace(',', '.')) : null;

        if (hours && !isNaN(hours) && hours > 0 && hours < 24) {
          setRecoveryData(prev => ({ ...prev, sleepHours: hours }));
          calculateRecoveryScore();
          responseText = `‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤–∞—à —Å–æ–Ω: ${hours} —á–∞—Å–æ–≤\n\n`;

          if (hours < 7) {
            responseText += '‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ 7-9 —á–∞—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.';
          } else if (hours > 9) {
            responseText += 'üí° –í—ã —Ö–æ—Ä–æ—à–æ –≤—ã—Å–ø–∞–ª–∏—Å—å! –ù–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π —Å–æ–Ω –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≤—è–ª–æ—Å—Ç—å.';
          } else {
            responseText += 'üëç –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!';
          }

          suggestions = ["–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–°–æ–≤–µ—Ç—ã –ø–æ —Å–Ω—É", "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É"];
        } else {
          responseText = "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Å–ø–∞–ª–∏? –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –°–ø–∞–ª 7.5 —á–∞—Å–æ–≤\n‚Ä¢ –ü—Ä–æ—Å–ø–∞–ª 8 —á–∞—Å–æ–≤\n‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω 6 —á–∞—Å–æ–≤";
          suggestions = ["–°–ø–∞–ª 7 —á–∞—Å–æ–≤", "–°–ø–∞–ª 8.5 —á–∞—Å–æ–≤", "–°–ø–∞–ª 6 —á–∞—Å–æ–≤"];
        }
      }
      // Water logging
      else if (text.match(/(–≤—ã–ø–∏–ª.*–≤–æ–¥|–¥–æ–±–∞–≤.*–≤–æ–¥|–≤–æ–¥–∞.*\d+|–ø–∏–ª.*–≤–æ–¥|–≤–æ–¥[—ã—É].*\d+|\d+.*(?:–º–ª|ml|–ª–∏—Ç—Ä|–ª))/i)) {
        const mlMatch = text.match(/(\d+)\s*(?:–º–ª|ml)/i);
        const litersMatch = text.match(/(\d+[,.]?\d*)\s*(?:–ª–∏—Ç—Ä|–ª)(?!–∏—Ç—Ä)/i);
        const plainNumberMatch = text.match(/(\d+)/);

        let ml = 0;
        if (litersMatch) {
          ml = parseFloat(litersMatch[1].replace(',', '.')) * 1000;
        } else if (mlMatch) {
          ml = parseInt(mlMatch[1]);
        } else if (plainNumberMatch && text.match(/–≤–æ–¥/i)) {
          ml = parseInt(plainNumberMatch[1]);
        }

        if (ml && !isNaN(ml) && ml > 0) {
          const total = recoveryData.waterIntake + ml;
          setRecoveryData(prev => ({ ...prev, waterIntake: total }));
          calculateRecoveryScore();

          responseText = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${ml} –º–ª –≤–æ–¥—ã\nüíß –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${total} –º–ª\n\n`;

          if (total < 1500) {
            responseText += '‚ö†Ô∏è –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–ø–∏–≤–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å!';
          } else if (total < 2500) {
            responseText += 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–Ω–æ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏.';
          } else {
            responseText += 'üíØ –û—Ç–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í—ã —Ö–æ—Ä–æ—à–æ –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã!';
          }

          suggestions = ["–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–¥—É", "–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω"];
        } else {
          responseText = "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã –≤—ã–ø–∏–ª–∏? –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n‚Ä¢ –í—ã–ø–∏–ª 500 –º–ª –≤–æ–¥—ã\n‚Ä¢ –í—ã–ø–∏–ª 1 –ª–∏—Ç—Ä –≤–æ–¥—ã\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å 250 –º–ª";
          suggestions = ["–í—ã–ø–∏–ª 500 –º–ª", "–í—ã–ø–∏–ª 1 –ª–∏—Ç—Ä", "–í—ã–ø–∏–ª 250 –º–ª"];
        }
      }
      // Stress level
      else if ((text.match(/(—Å—Ç—Ä–µ—Å—Å|–Ω–∞–ø—Ä—è–∂–µ–Ω)/i) && text.match(/[1-5]|–æ–¥–∏–Ω|–¥–≤–∞|—Ç—Ä–∏|—á–µ—Ç—ã—Ä–µ|–ø—è—Ç—å/)) ||
        text.match(/(–º–æ–π.*—Å—Ç—Ä–µ—Å—Å|–æ—Ü–µ–Ω–∏—Ç—å.*—Å—Ç—Ä–µ—Å—Å|—É—Ä–æ–≤–µ–Ω—å.*—Å—Ç—Ä–µ—Å—Å)/i)) {
        let level = null;

        const numberMatch = text.match(/[1-5]/);
        if (numberMatch) {
          level = parseInt(numberMatch[0]);
        } else {
          const wordNumbers: Record<string, number> = {
            '–æ–¥–∏–Ω': 1, '–æ–¥–Ω–∞': 1,
            '–¥–≤–∞': 2, '–¥–≤–µ': 2,
            '—Ç—Ä–∏': 3,
            '—á–µ—Ç—ã—Ä–µ': 4,
            '–ø—è—Ç—å': 5
          };

          for (const [word, num] of Object.entries(wordNumbers)) {
            if (text.includes(word)) {
              level = num;
              break;
            }
          }
        }

        if (level && level >= 1 && level <= 5) {
          setRecoveryData(prev => ({ ...prev, stressLevel: level }));
          calculateRecoveryScore();

          responseText = `‚úÖ –ó–∞–ø–∏—Å–∞–ª —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${level}/5\n\n`;

          if (level >= 4) {
            responseText += 'üò∞ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞!\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é\n‚Ä¢ –ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ';
          } else if (level >= 3) {
            responseText += 'üòê –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏.';
          } else {
            responseText += 'üòä –•–æ—Ä–æ—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è.';
          }

          suggestions = ["–¢–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è", "–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏"];
        } else {
          responseText = "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –æ—Ç 1 –¥–æ 5:\n‚Ä¢ 1 - –ø–æ–ª–Ω–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n‚Ä¢ 3 - —É–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å\n‚Ä¢ 5 - —Å–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å";
          suggestions = ["–ú–æ–π —Å—Ç—Ä–µ—Å—Å 2", "–ú–æ–π —Å—Ç—Ä–µ—Å—Å 3", "–ú–æ–π —Å—Ç—Ä–µ—Å—Å 4"];
        }
      }
      // Recovery status
      else if (text.match(/(—Å—Ç–∞—Ç—É—Å.*–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω|–º–æ[–∏–π].*–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω|—É—Ä–æ–≤–µ–Ω—å.*–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)/i)) {
        calculateRecoveryScore();
        responseText = handleRecoveryCommand('recovery_status');
        responseText += `\n\n**–î–µ—Ç–∞–ª–∏:**\n`;
        responseText += `üò¥ –°–æ–Ω: ${recoveryData.sleepHours} —á–∞—Å–æ–≤\n`;
        responseText += `üíß –í–æ–¥–∞: ${recoveryData.waterIntake} –º–ª\n`;
        responseText += `üò∞ –°—Ç—Ä–µ—Å—Å: ${recoveryData.stressLevel}/5\n`;
        responseText += `\n${getRecoveryTips(recoveryData)}`;

        suggestions = ["–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω", "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏"];
      }
      // Sleep tips
      else if (text.match(/(—Å–æ–Ω|—Å–ø–∞—Ç—å|–±–µ—Å—Å–æ–Ω–Ω–∏—Ü)/i)) {
        const sleepData = recoveryKnowledgeBase.sleep;
        responseText = `üí§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞:\n\n` +
          `‚è∞ **–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:**\n` +
          `‚Ä¢ –õ–æ–∂–∏—Ç–µ—Å—å: 22:00-23:00\n` +
          `‚Ä¢ –í—Å—Ç–∞–≤–∞–π—Ç–µ: 6:00-7:00\n` +
          `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${sleepData.optimalHours} —á–∞—Å–æ–≤\n\n` +
          `üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:**\n` +
          sleepData.qualityTips.map(tip => `‚Ä¢ ${tip}`).join('\n') +
          `\n\nüìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
          `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–Ω: ${recoveryData.sleepHours} —á–∞—Å–æ–≤`;

        suggestions = ["–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω", "–¢–µ—Ö–Ω–∏–∫–∏ –∑–∞—Å—ã–ø–∞–Ω–∏—è", "–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"];
      }
      // Stretching
      else if (text.match(/(—Ä–∞—Å—Ç—è–∂–∫|—Å—Ç—Ä–µ—Ç—á|—Ä–∞–∑–º–∏–Ω)/i)) {
        const program = recoveryKnowledgeBase.stretchingPrograms[0];
        responseText = `üßò –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n`;

        program.exercises.forEach((ex, index) => {
          responseText += `${index + 1}. **${ex.name}** (${ex.duration} –º–∏–Ω)\n`;
          responseText += `   ${ex.instructions}\n\n`;
        });

        responseText += `üí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É:\n‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n‚Ä¢ –ü–µ—Ä–µ–¥ —Å–Ω–æ–º –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è\n‚Ä¢ –ü—Ä–∏ –º—ã—à–µ—á–Ω–æ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏`;

        links.push({
          title: "–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
          url: "/recovery/stretching",
          description: "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ —Ä–∞—Å—Ç—è–∂–∫–∏",
          icon: Activity
        });

        suggestions = ["–ù–∞—á–∞—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É", "–ô–æ–≥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–ú–∞—Å—Å–∞–∂ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"];
      }
      // Water/hydration
      else if (text.match(/(–≤–æ–¥[–∞—ã]|–≥–∏–¥—Ä–∞—Ç–∞—Ü|–ø–∏—Ç—å|–∂–∞–∂–¥)/i)) {
        responseText = `üíß –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n\n` +
          `**–ù–æ—Ä–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:**\n` +
          `‚Ä¢ –ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞: 30-35 –º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞\n` +
          `‚Ä¢ –ü—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö: +500-1000 –º–ª\n` +
          `‚Ä¢ –í –∂–∞—Ä—É: +500 –º–ª\n\n` +
          `**–ö–æ–≥–¥–∞ –ø–∏—Ç—å:**\n` +
          `‚Ä¢ –ó–∞ 2 —á–∞—Å–∞ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: 500 –º–ª\n` +
          `‚Ä¢ –í–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: 150-200 –º–ª –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω\n` +
          `‚Ä¢ –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: 500-700 –º–ª\n\n` +
          `üìä **–í–∞—à –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è:** ${recoveryData.waterIntake} –º–ª\n` +
          `${recoveryData.waterIntake < 2000 ? '‚ö†Ô∏è –ù—É–∂–Ω–æ –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã!' : '‚úÖ –•–æ—Ä–æ—à–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è!'}`;

        suggestions = ["–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É", "–ü–æ–ª—å–∑–∞ –≤–æ–¥—ã", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"];
      }
      // General recovery
      else {
        const method = recoveryKnowledgeBase.recoveryMethods[0];
        responseText = `üîÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n` +
          `**1. ${method.title}**\n${method.description}\n\n` +
          `üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n` +
          method.steps!.map((s, i) => `${i + 1}. ${s}`).join('\n') +
          `\n\n**2. –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:**\n` +
          `‚Ä¢ –ë–µ–ª–∫–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n` +
          `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: –¥–ª—è –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏\n` +
          `‚Ä¢ –í–æ–¥–∞: –º–∏–Ω–∏–º—É–º 2-3 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å\n\n` +
          `**3. –û—Ç–¥—ã—Ö:**\n` +
          `‚Ä¢ –°–æ–Ω 7-9 —á–∞—Å–æ–≤\n` +
          `‚Ä¢ –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏`;

        suggestions = ["–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏", "–ú–∞—Å—Å–∞–∂"];
      }

      // Add recovery action links
      if (!links.length) {
        links.push(
          {
            title: "–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞",
            url: "#",
            description: "–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞",
            icon: Moon
          },
          {
            title: "–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
            url: "#",
            description: "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É",
            icon: Droplet
          },
          {
            title: "–û—Ü–µ–Ω–∏—Ç—å —Å—Ç—Ä–µ—Å—Å",
            url: "#",
            description: "–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ 1-5",
            icon: AlertCircle
          }
        );
      }
    }
    // Default response with comprehensive help
    else {
      responseText = "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n" +
        "**üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n" +
        "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞\n" +
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n" +
        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ\n\n" +
        "**üí≥ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:**\n" +
        "‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å\n" +
        "‚Ä¢ –¶–µ–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤\n" +
        "‚Ä¢ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏\n\n" +
        "**üçè –ü–∏—Ç–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:**\n" +
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n" +
        "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n" +
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é\n\n" +
        "**üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ:**\n" +
        "‚Ä¢ –ê–¥—Ä–µ—Å –∏ –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è\n" +
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n" +
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n" +
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?";

      suggestions = ["–¢—Ä–µ–Ω–µ—Ä—ã", "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è"];
    }

    return {
      id: generateId(),
      text: responseText || "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.",
      isBot: true,
      timestamp: new Date(),
      suggestions,
      links
    };
  }, [
    findProductsByQuery, 
    analyzeUserGoals, 
    setRecommendations, 
    currentProducts,
    recoveryData,
    setRecoveryData,
    calculateRecoveryScore,
    getNutritionInfo,
    findTrainerBySpecialty,
    handleRecoveryCommand,
    getRecoveryTips,
    getRecoveryEmoji,
    recoveryKnowledgeBase,
    knowledgeBase
  ]);

  return {
    generateBotResponse,
    speak,
    calculateRecoveryScore,
    resetContext
  };
};