import { useCallback } from 'react';
import { knowledgeBase } from '../config/knowledgeBase';
import { recoveryKnowledgeBase } from '../config/recoveryKnowledge';
import type { Message, AudioConfig, RecoveryData, ActivityData, Link, NutritionData } from '../types';

interface UseChatLogicProps {
  audioConfig: AudioConfig;
  recoveryData: RecoveryData;
  setRecoveryData: React.Dispatch<React.SetStateAction<RecoveryData>>;
  setActivityData: React.Dispatch<React.SetStateAction<ActivityData | null>>;
  connectAppleHealth: () => Promise<boolean>;
}

export const useChatLogic = ({
  audioConfig,
  recoveryData,
  setRecoveryData,
  setActivityData,
  connectAppleHealth
}: UseChatLogicProps) => {
  const voiceRssKey = process.env.NEXT_PUBLIC_VOICERSS_KEY || '';
  const nutritionixAppId = process.env.NEXT_PUBLIC_NUTRITIONIX_APP_ID || '';
  const nutritionixAppKey = process.env.NEXT_PUBLIC_NUTRITIONIX_APP_KEY || '';

  // Text-to-speech function
  const speak = useCallback(async (text: string) => {
    if (!audioConfig.enabled || !text.trim() || !voiceRssKey) return;

    try {
      const audio = new Audio();
      const url = `https://api.voicerss.org/?key=${voiceRssKey}&hl=ru-ru&v=${audioConfig.voice}&src=${encodeURIComponent(text)}`;
      audio.src = url;
      await audio.play();
    } catch (error) {
      console.error("Audio playback error:", error);
    }
  }, [audioConfig, voiceRssKey]);

  // Calculate recovery score
  const calculateRecoveryScore = useCallback(() => {
    const now = new Date();
    const sleepQuality = Math.min(1, recoveryData.sleepHours / 8) * 40;
    
    const hoursSinceWorkout = recoveryData.lastWorkout
      ? (now.getTime() - recoveryData.lastWorkout.getTime()) / (1000 * 60 * 60)
      : 48;
    const workoutRecovery = (Math.min(hoursSinceWorkout, 72) / 72) * 30;

    const hoursSinceMeal = recoveryData.lastMeal
      ? (now.getTime() - recoveryData.lastMeal.getTime()) / (1000 * 60 * 60)
      : 3;
    const nutritionFactor = (1 - Math.min(hoursSinceMeal, 6) / 6) * 15;

    const waterFactor = (Math.min(recoveryData.waterIntake, 3000) / 3000) * 10;
    const stressFactor = (1 - (recoveryData.stressLevel - 1) / 4) * 5;

    const score = Math.round(Math.min(100,
      sleepQuality + workoutRecovery + nutritionFactor + waterFactor + stressFactor
    ));

    setRecoveryData(prev => ({ ...prev, recoveryScore: score }));
    return score;
  }, [recoveryData, setRecoveryData]);

  // Get nutrition info
  const getNutritionInfo = useCallback(async (query: string): Promise<NutritionData | null> => {
    if (!nutritionixAppId || !nutritionixAppKey) {
      console.error("Missing Nutritionix API keys");
      return null;
    }

    const foodDictionary: Record<string, string> = {
      '—è–±–ª–æ–∫–æ': 'apple',
      '–±–∞–Ω–∞–Ω': 'banana',
      '–≥—Ä–µ—á–∫–∞': 'buckwheat',
      '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': 'chicken breast',
      '–≥–æ–≤—è–¥–∏–Ω–∞': 'beef',
      '—Ä–∏—Å': 'rice',
      '–æ–≤—Å—è–Ω–∫–∞': 'oatmeal',
      '—Ç–≤–æ—Ä–æ–≥': 'cottage cheese',
      '—è–π—Ü–æ': 'egg',
      '–º–æ–ª–æ–∫–æ': 'milk'
    };

    const normalizedQuery = query.trim().toLowerCase();
    const englishQuery = foodDictionary[normalizedQuery] || normalizedQuery;

    try {
      const response = await fetch('https://trackapi.nutritionix.com/v2/natural/nutrients', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-app-id': nutritionixAppId,
          'x-app-key': nutritionixAppKey
        },
        body: JSON.stringify({
          query: englishQuery,
          timezone: "UTC"
        })
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      const data = await response.json();
      if (!data?.foods?.length) {
        return null;
      }

      return {
        ...data.foods[0],
        food_name: query
      };
    } catch (error) {
      console.error("Nutrition API error:", error);
      return null;
    }
  }, [nutritionixAppId, nutritionixAppKey]);

  // Find trainer by specialty
  const findTrainerBySpecialty = useCallback((text: string) => {
    const specialtyMap: Record<string, keyof typeof knowledgeBase.trainers> = {
      '–π–æ–≥–∞': 'anna-petrova',
      '—Å–∏–ª–æ–≤': 'mikhail-volkov',
      '–ø–æ—Ö—É–¥': 'elena-smirnova',
      '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å': 'dmitriy-kozlov',
      '–≥—Ä—É–ø–ø': 'olga-ivanova'
    };

    for (const [key, trainerId] of Object.entries(specialtyMap)) {
      if (text.includes(key)) {
        return knowledgeBase.trainers[trainerId];
      }
    }
    return null;
  }, []);

  // Generate bot response
  const generateBotResponse = useCallback(async (text: string): Promise<Message> => {
    const generateId = () => `${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    
    let responseText = "";
    let suggestions: string[] = [];
    let links: Link[] = [];

    // Nutrition queries
    if (text.match(/(–∫–∞–ª–æ—Ä–∏–∏|–ø–∏—Ç–∞–Ω–∏–µ|–µ–¥–∞|–±–µ–ª–∫|–∂–∏—Ä|—É–≥–ª–µ–≤)/i)) {
      const foodQuery = text.replace(/(–∫–∞–ª–æ—Ä–∏–∏|–ø–∏—Ç–∞–Ω–∏–µ|–µ–¥–∞|—Å–∫–æ–ª—å–∫–æ|–≤)/gi, '').trim();
      
      if (foodQuery) {
        const nutrition = await getNutritionInfo(foodQuery);
        
        if (nutrition) {
          responseText = `üçè –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å "${nutrition.food_name}":\n`
            + `üîπ –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(nutrition.nf_calories)} –∫–∫–∞–ª\n`
            + `üîπ –ë–µ–ª–∫–∏: ${Math.round(nutrition.nf_protein)}–≥\n`
            + `üîπ –ñ–∏—Ä—ã: ${Math.round(nutrition.nf_total_fat)}–≥\n`
            + `üîπ –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(nutrition.nf_total_carbohydrate)}–≥`;
          
          suggestions = ["–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π", "–ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"];
        } else {
          responseText = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.";
        }
      } else {
        responseText = "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞";
        suggestions = ["–ö–∞–ª–æ—Ä–∏–∏ –≤ –±–∞–Ω–∞–Ω–µ", "–ë–µ–ª–∫–∏ –≤ —Ç–≤–æ—Ä–æ–≥–µ"];
      }
    }
    // Trainer queries
    else if (text.includes('—Ç—Ä–µ–Ω–µ—Ä')) {
      const trainer = findTrainerBySpecialty(text);
      
      if (trainer) {
        responseText = `–†–µ–∫–æ–º–µ–Ω–¥—É—é ${trainer.name}! ${trainer.description}. –¶–µ–Ω–∞ ${trainer.price}`;
      } else {
        responseText = "–£ –Ω–∞—Å 6 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö?";
        suggestions = ["–ü–æ—Ö—É–¥–µ—Ç—å", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ô–æ–≥–∞"];
      }
    }
    // Recovery queries
    else if (text.includes('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') || text.includes('—Å–æ–Ω') || text.includes('–≤–æ–¥–∞')) {
      if (text.includes('–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω')) {
        const hoursMatch = text.match(/(\d+[,.]?\d*)/);
        const hours = hoursMatch ? parseFloat(hoursMatch[0].replace(',', '.')) : null;
        
        if (hours) {
          setRecoveryData(prev => ({ ...prev, sleepHours: hours }));
          calculateRecoveryScore();
          responseText = `‚úÖ –ó–∞–ø–∏—Å–∞–ª —Å–æ–Ω: ${hours} —á–∞—Å–æ–≤`;
        } else {
          responseText = "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞";
        }
      } else {
        responseText = `–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${recoveryData.recoveryScore}/100`;
      }
    }
    // Default response
    else {
      responseText = "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –ø–∏—Ç–∞–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.";
      suggestions = ["–¢—Ä–µ–Ω–µ—Ä—ã", "–ü—Ä–æ–≥—Ä–∞–º–º—ã", "–ü–∏—Ç–∞–Ω–∏–µ"];
    }

    return {
      id: generateId(),
      text: responseText,
      isBot: true,
      timestamp: new Date(),
      suggestions,
      links
    };
  }, [getNutritionInfo, findTrainerBySpecialty, recoveryData, setRecoveryData, calculateRecoveryScore]);

  return {
    generateBotResponse,
    speak,
    calculateRecoveryScore
  };
};