// components/face-id/FaceIdSetup.tsx - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Camera, 
  CheckCircle, 
  AlertTriangle, 
  Loader2, 
  Eye,
  Shield,
  Zap
} from "lucide-react";

interface FaceIdSetupProps {
  onComplete: (success: boolean, data?: any) => void;
}

export function FaceIdSetup({ onComplete }: FaceIdSetupProps) {
  const [step, setStep] = useState<'init' | 'camera' | 'scanning' | 'processing' | 'complete'>('init');
  const [hasCamera, setHasCamera] = useState(false);
  const [error, setError] = useState<string>('');
  const [profileData, setProfileData] = useState<any>(null);

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã
  useEffect(() => {
    checkCameraAvailability();
  }, []);

  const checkCameraAvailability = async () => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã...');
      
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('API –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }

      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'user' } 
      });
      
      console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
      setHasCamera(true);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      stream.getTracks().forEach(track => track.stop());
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
      setHasCamera(false);
    }
  };

  const startFaceIdSetup = async () => {
    try {
      setStep('camera');
      setError('');
      
      console.log('üìπ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Face ID...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      setTimeout(() => {
        setStep('scanning');
        console.log('üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ª–∏—Ü–æ...');
      }, 1000);

      setTimeout(() => {
        setStep('processing');
        console.log('‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
      }, 3000);

      setTimeout(() => {
        setStep('complete');
        
        // ‚úÖ –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const faceProfile = {
          profileId: `face_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          userId: 'current_user',
          created: new Date().toISOString(),
          faceData: 'mock_face_encoding_data',
          version: '1.0'
        };
        
        setProfileData(faceProfile);
        console.log('‚úÖ Face ID –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', faceProfile);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          onComplete(true, faceProfile);
        }, 2000);
        
      }, 5000);

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Face ID:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      setStep('init');
    }
  };

  const renderStep = () => {
    switch (step) {
      case 'init':
        return (
          <div className="text-center space-y-4">
            <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto">
              <Camera className="w-10 h-10 text-white" />
            </div>
            
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Face ID
              </h3>
              <p className="text-sm text-gray-600 mb-4">
                –°–æ–∑–¥–∞–π—Ç–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
              </p>
            </div>

            {error && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center text-red-700">
                  <AlertTriangle className="h-4 w-4 mr-2" />
                  <span className="text-sm">{error}</span>
                </div>
              </div>
            )}

            <div className="space-y-2">
              <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
                <span className="text-sm">–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ</span>
                <Badge variant={hasCamera ? "secondary" : "destructive"} className="text-xs">
                  {hasCamera ? '‚úì –î–æ—Å—Ç—É–ø–Ω–∞' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
                </Badge>
              </div>
            </div>

            <Button
              onClick={startFaceIdSetup}
              disabled={!hasCamera}
              className="w-full"
            >
              {hasCamera ? (
                <>
                  <Camera className="w-4 h-4 mr-2" />
                  –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                </>
              ) : (
                <>
                  <AlertTriangle className="w-4 h-4 mr-2" />
                  –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                </>
              )}
            </Button>
          </div>
        );

      case 'camera':
        return (
          <div className="text-center space-y-4">
            <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto animate-pulse">
              <Camera className="w-10 h-10 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                –í–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
              </h3>
              <p className="text-sm text-gray-600">
                –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
              </p>
            </div>
            <div className="flex items-center justify-center">
              <Loader2 className="h-5 w-5 animate-spin text-blue-600" />
            </div>
          </div>
        );

      case 'scanning':
        return (
          <div className="text-center space-y-4">
            <div className="w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto animate-pulse">
              <Eye className="w-10 h-10 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
              </h3>
              <p className="text-sm text-gray-600">
                –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É –∏ –Ω–µ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å
              </p>
            </div>
            <div className="space-y-2">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-green-600 h-2 rounded-full animate-pulse" style={{width: '60%'}}></div>
              </div>
              <p className="text-xs text-gray-500">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</p>
            </div>
          </div>
        );

      case 'processing':
        return (
          <div className="text-center space-y-4">
            <div className="w-20 h-20 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto animate-spin">
              <Zap className="w-10 h-10 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
              </h3>
              <p className="text-sm text-gray-600">
                –°–æ–∑–¥–∞–µ–º –≤–∞—à –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
              </p>
            </div>
            <div className="space-y-2">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-purple-600 h-2 rounded-full animate-pulse" style={{width: '80%'}}></div>
              </div>
              <p className="text-xs text-gray-500">–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...</p>
            </div>
          </div>
        );

      case 'complete':
        return (
          <div className="text-center space-y-4">
            <div className="w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto">
              <CheckCircle className="w-10 h-10 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-green-900 mb-2">
                Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üéâ
              </h3>
              <p className="text-sm text-green-600">
                –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
              </p>
            </div>

            {profileData && (
              <div className="p-3 bg-green-50 border border-green-200 rounded-lg text-left">
                <div className="flex items-center mb-2">
                  <Shield className="h-4 w-4 text-green-600 mr-2" />
                  <span className="text-sm font-medium text-green-900">–î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è</span>
                </div>
                <div className="text-xs text-green-700 space-y-1">
                  <div>ID: {profileData.profileId}</div>
                  <div>–°–æ–∑–¥–∞–Ω: {new Date(profileData.created).toLocaleString()}</div>
                  <div>–í–µ—Ä—Å–∏—è: {profileData.version}</div>
                </div>
              </div>
            )}

            <p className="text-xs text-gray-500">
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...
            </p>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Card className="w-full max-w-md">
      <CardContent className="p-6">
        {renderStep()}
        
        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-6 p-3 bg-gray-50 border border-gray-200 rounded-lg">
            <div className="text-xs text-gray-600 space-y-1">
              <div><strong>–¢–µ–∫—É—â–∏–π —à–∞–≥:</strong> {step}</div>
              <div><strong>–ö–∞–º–µ—Ä–∞:</strong> {hasCamera ? '–î–æ—Å—Ç—É–ø–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}</div>
              {error && <div><strong>–û—à–∏–±–∫–∞:</strong> {error}</div>}
              {profileData && <div><strong>–ü—Ä–æ—Ñ–∏–ª—å:</strong> {profileData.profileId}</div>}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}