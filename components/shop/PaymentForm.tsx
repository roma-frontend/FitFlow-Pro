// components/PaymentForm.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"use client";

import React, { useState, useEffect } from 'react';
import { Elements } from '@stripe/react-stripe-js';
import { stripePromise } from '@/lib/stripe';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2, RefreshCw, User, Mail } from 'lucide-react';
import { ShopPaymentItem } from '@/types/payment';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';
import CheckoutForm from './Checkout/CheckoutForm';

interface PaymentFormProps {
  items: ShopPaymentItem[];
  totalAmount: number;
  pickupType: string;
  notes?: string;
  onSuccess: (receipt: any) => void;
  onError: (error: string) => void;
}

export default function PaymentForm({
  items,
  totalAmount,
  pickupType,
  notes,
  onSuccess,
  onError
}: PaymentFormProps) {
  const [clientSecret, setClientSecret] = useState<string>('');
  const [paymentIntentId, setPaymentIntentId] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  
  // ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Stripe
  const [stripeReady, setStripeReady] = useState<boolean | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [customerData, setCustomerData] = useState({
    email: '',
    name: '',
    phone: ''
  });
  const [showCustomerForm, setShowCustomerForm] = useState(false);
  const [dataReady, setDataReady] = useState(false);
  
  const { toast } = useToast();
  const { user, loading: authLoading } = useAuth();

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Stripe
  useEffect(() => {
    let isMounted = true; // ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º race conditions
    
    const checkStripeReady = async () => {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º Stripe...');
        
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞
        if (!process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY) {
          throw new Error('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env.local');
        }
        
        const stripe = await stripePromise;
        
        if (!isMounted) return; // ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
        
        if (stripe) {
          console.log('‚úÖ Stripe —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
          setStripeReady(true);
        } else {
          throw new Error('Stripe –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å');
        }
      } catch (err) {
        if (!isMounted) return;
        
        const errorMsg = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Stripe';
        console.error('‚ùå –û—à–∏–±–∫–∞ Stripe:', errorMsg);
        setStripeReady(false);
        setError(errorMsg);
      }
    };

    checkStripeReady();
    
    // ‚úÖ Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      isMounted = false;
    };
  }, []); // ‚úÖ –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (authLoading || stripeReady !== true) return; // ‚úÖ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ–∏—Ö
    
    console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { user, stripeReady });
    
    if (user?.email && user?.name) {
      // ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setCustomerData({
        email: user.email,
        name: user.name,
        phone: ''
      });
      setShowCustomerForm(false);
      setDataReady(true);
    } else if (user?.email || user?.name) {
      // ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
      setCustomerData({
        email: user.email || '',
        name: user.name || '',
        phone: ''
      });
      setShowCustomerForm(true);
      setDataReady(false);
    } else {
      // ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      setCustomerData({
        email: '',
        name: '',
        phone: ''
      });
      setShowCustomerForm(true);
      setDataReady(false);
    }
  }, [user, authLoading, stripeReady]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ PaymentIntent —Å debounce
  useEffect(() => {
    if (!stripeReady || !dataReady || clientSecret || loading) {
      return;
    }

    // ‚úÖ Debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    const timeoutId = setTimeout(() => {
      createPaymentIntent();
    }, 100);

    return () => clearTimeout(timeoutId);
  }, [stripeReady, dataReady, clientSecret, loading]);

  const createPaymentIntent = async () => {
    const finalEmail = user?.email || customerData.email;
    const finalName = user?.name || customerData.name;
    const finalPhone = customerData.phone;
    
    if (!finalEmail || !finalName) {
      const errorMsg = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: email="${finalEmail}", name="${finalName}"`;
      setError(errorMsg);
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('üí≥ –°–æ–∑–¥–∞–µ–º PaymentIntent —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        finalEmail,
        finalName,
        finalPhone,
        totalAmount,
        itemsCount: items.length
      });

      toast({
        title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ",
        description: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É...",
      });

      const requestData = {
        items,
        totalAmount,
        pickupType,
        notes: notes || '',
        userId: user?.id || 'guest',
        memberId: user?.id || undefined,
        memberEmail: finalEmail,
        customerName: finalName,
        customerPhone: finalPhone || undefined,
      };

      const response = await fetch('/api/payments/create-payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }

      setClientSecret(data.clientSecret);
      setPaymentIntentId(data.paymentIntentId);

      toast({
        title: "–ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ",
        description: "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent:', errorMessage);
      setError(errorMessage);
      onError(errorMessage);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCustomerDataSubmit = () => {
    if (!customerData.email || !customerData.name) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ",
        description: "Email –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
        variant: "destructive",
      });
      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã:', customerData);
    setDataReady(true);
  };

  const appearance = {
    theme: 'stripe' as const,
    variables: {
      colorPrimary: '#3b82f6',
      colorBackground: '#ffffff',
      colorText: '#1f2937',
      colorDanger: '#ef4444',
      fontFamily: 'system-ui, sans-serif',
      spacingUnit: '4px',
      borderRadius: '8px',
    },
  };

  const options = {
    clientSecret,
    appearance,
    locale: 'ru' as const,
  };

  // ‚úÖ –û—à–∏–±–∫–∞ Stripe –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π
  if (stripeReady === false || error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-red-600 mb-4">
            {error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Stripe'}
          </div>
          
          {process.env.NODE_ENV === 'development' && (
            <div className="bg-yellow-50 p-3 rounded text-sm mb-4">
              <p><strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</strong></p>
              <ul className="list-disc ml-4 mt-2">
                <li>–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY –≤ .env.local</li>
                <li>–ö–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å pk_test_ –∏–ª–∏ pk_live_</li>
                <li>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</li>
                <li>CSP —Ä–∞–∑—Ä–µ—à–∞–µ—Ç https://js.stripe.com</li>
              </ul>
              
              <div className="mt-2 p-2 bg-gray-100 rounded text-xs">
                <strong>–¢–µ–∫—É—â–∏–π –∫–ª—é—á:</strong> {
                  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY 
                    ? `${process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY.slice(0, 12)}...`
                    : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'
                }
              </div>
            </div>
          )}
          
          <Button
            onClick={() => window.location.reload()}
            className="w-full"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </Button>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ Stripe
  if (stripeReady === null) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin mr-2" />
            <span>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Stripe...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (authLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin mr-2" />
            <span>–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
  if (showCustomerForm && !dataReady) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-gray-600">
            –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
          </p>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="email">Email *</Label>
              <div className="relative">
                <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="email"
                  type="email"
                  placeholder="your@email.com"
                  value={customerData.email}
                  onChange={(e) => setCustomerData(prev => ({ ...prev, email: e.target.value }))}
                  className="pl-10"
                  required
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="name">–ò–º—è *</Label>
              <div className="relative">
                <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="name"
                  type="text"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={customerData.name}
                  onChange={(e) => setCustomerData(prev => ({ ...prev, name: e.target.value }))}
                  className="pl-10"
                  required
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
              <Input
                id="phone"
                type="tel"
                placeholder="+7 (999) 123-45-67"
                value={customerData.phone}
                onChange={(e) => setCustomerData(prev => ({ ...prev, phone: e.target.value }))}
              />
            </div>
          </div>
          
          <Button 
            onClick={handleCustomerDataSubmit}
            disabled={loading || !customerData.email.trim() || !customerData.name.trim()}
            className="w-full"
          >
            {loading ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...
              </>
            ) : (
              '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ'
            )}
          </Button>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ
  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin mr-2" />
            <span>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ PaymentIntent
  if (!clientSecret) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin mr-2" />
            <span>–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã
  return (
    <Card>
      <CardHeader>
        <CardTitle>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</CardTitle>
        <div className="text-sm text-gray-600">
          <p>üë§ {user?.name || customerData.name}</p>
          <p>üìß {user?.email || customerData.email}</p>
          {customerData.phone && (
            <p>üìû {customerData.phone}</p>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <Elements options={options} stripe={stripePromise}>
          <CheckoutForm
            paymentIntentId={paymentIntentId}
            onSuccess={onSuccess}
            onError={onError}
          />
        </Elements>
      </CardContent>
    </Card>
  );
}
