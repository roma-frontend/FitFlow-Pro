"use client"

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Send,
  X,
  Brain,
  Dumbbell,
  Users,
  CreditCard,
  Calendar,
  ShoppingBag,
  Target,
  Heart,
  Zap,
  Star,
  ChevronRight,
  Loader2,
  Bot,
  User,
  Mic,
  MicOff,
  Apple,
  Volume2,
  Moon,
  Droplet,
  Activity,
  AlertCircle,
  LucideIcon
} from 'lucide-react';

// Types
interface AudioConfig {
  enabled: boolean;
  voice: "Mary" | "Peter";
}

interface NutritionData {
  food_name: string;
  nf_calories: number;
  nf_protein: number;
  nf_total_fat: number;
  nf_total_carbohydrate: number;
  serving_weight_grams: number;
}

interface NutritionResponse {
  foods: NutritionData[];
}

interface Link {
  title: string;
  url: string;
  description: string;
  icon: LucideIcon;
  onClick?: () => void;
}

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
  suggestions?: string[];
  links?: Link[];
}

interface Trainer {
  name: string;
  specialty: string;
  price: string;
  rating: number;
  description: string;
}

interface Program {
  name: string;
  price: string;
  description: string;
}

interface Membership {
  name: string;
  price: number;
  description: string;
  popular?: boolean;
  discount?: number;
}

interface QuickAction {
  title: string;
  description: string;
  icon: LucideIcon;
  action: string;
  color: string;
}

interface RecoveryAdvice {
  type: 'sleep' | 'stretching' | 'recovery';
  title: string;
  description: string;
  duration?: number;
  steps?: string[];
  tips?: string[];
}

interface SleepData {
  optimalHours: string;
  bestTime: string;
  qualityTips: string[];
}

interface StretchingProgram {
  level: 'beginner' | 'intermediate' | 'advanced';
  muscles: string[];
  exercises: Array<{
    name: string;
    duration: number;
    instructions: string;
    image?: string;
  }>;
}

interface RecoveryData {
  lastWorkout: Date | null;
  sleepHours: number;
  recoveryScore: number;
  lastMeal: Date | null;
  waterIntake: number;
  stressLevel: number;
}

// Simple Select component
interface SelectProps {
  value: string;
  onValueChange: (value: string) => void;
  children: React.ReactNode;
}

const Select: React.FC<SelectProps> = ({ value, onValueChange, children }) => {
  const [isOpen, setIsOpen] = useState(false);
  
  return (
    <div className="relative">
      <button 
        onClick={() => setIsOpen(!isOpen)}
        className="w-24 h-8 px-2 text-xs border rounded flex items-center justify-between"
      >
        {value}
        <ChevronRight className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-90' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full mt-1 w-full bg-white border rounded shadow-lg z-10">
          {React.Children.map(children, child => 
            React.isValidElement(child) 
              ? React.cloneElement(child as React.ReactElement<any>, { onValueChange, setIsOpen })
              : child
          )}
        </div>
      )}
    </div>
  );
};

interface SelectItemProps {
  value: string;
  children: React.ReactNode;
  onValueChange?: (value: string) => void;
  setIsOpen?: (open: boolean) => void;
}

const SelectItem: React.FC<SelectItemProps> = ({ value, children, onValueChange, setIsOpen }) => {
  return (
    <button
      className="w-full px-2 py-1 text-xs text-left hover:bg-gray-100"
      onClick={() => {
        onValueChange?.(value);
        setIsOpen?.(false);
      }}
    >
      {children}
    </button>
  );
};

// Main component
const AIAgent: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [audioConfig, setAudioConfig] = useState<AudioConfig>({
    enabled: false,
    voice: 'Mary'
  });
  const [nutritionCache] = useState(new Map<string, NutritionData>());
  const [recoveryData, setRecoveryData] = useState<RecoveryData>({
    lastWorkout: null,
    sleepHours: 7,
    recoveryScore: 75,
    lastMeal: null,
    waterIntake: 0,
    stressLevel: 3
  });

  const voiceRssKey = process.env.NEXT_PUBLIC_VOICERSS_KEY || '';
  const nutritionixAppId = process.env.NEXT_PUBLIC_NUTRITIONIX_APP_ID || '';
  const nutritionixAppKey = process.env.NEXT_PUBLIC_NUTRITIONIX_APP_KEY || '';

  const calculateRecoveryScore = () => {
    const now = new Date();

    const sleepQuality = Math.min(1, recoveryData.sleepHours / 8) * 40;
    const hoursSinceWorkout = recoveryData.lastWorkout
      ? (now.getTime() - recoveryData.lastWorkout.getTime()) / (1000 * 60 * 60)
      : 48;
    const workoutRecovery = (Math.min(hoursSinceWorkout, 72) / 72) * 30;

    const hoursSinceMeal = recoveryData.lastMeal
      ? (now.getTime() - recoveryData.lastMeal.getTime()) / (1000 * 60 * 60)
      : 3;
    const nutritionFactor = (1 - Math.min(hoursSinceMeal, 6) / 6) * 15;

    const waterFactor = (Math.min(recoveryData.waterIntake, 3000) / 3000) * 10;
    const stressFactor = (1 - (recoveryData.stressLevel - 1) / 4) * 5;

    const score = Math.min(100,
      sleepQuality +
      workoutRecovery +
      nutritionFactor +
      waterFactor +
      stressFactor
    );

    setRecoveryData(prev => ({ ...prev, recoveryScore: Math.round(score) }));
  };

  const handleRecoveryCommand = (command: string, params?: any): string => {
    switch (command) {
      case 'log_sleep':
        setRecoveryData(prev => ({
          ...prev,
          sleepHours: params?.hours || prev.sleepHours
        }));
        return `–ó–∞–ø–∏—Å–∞–ª —Å–æ–Ω: ${params?.hours || recoveryData.sleepHours} —á–∞—Å–æ–≤`;

      case 'log_water':
        setRecoveryData(prev => ({
          ...prev,
          waterIntake: prev.waterIntake + (params?.ml || 0)
        }));
        return `–î–æ–±–∞–≤–ª–µ–Ω–æ ${params?.ml} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${recoveryData.waterIntake + (params?.ml || 0)} –º–ª`;

      case 'start_stretching':
        return `–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞—Å—Ç—è–∂–∫–∏:\n${recoveryKnowledgeBase.stretchingPrograms[0].exercises
          .map(ex => `${ex.name} - ${ex.duration} –º–∏–Ω`)
          .join('\n')
          }`;

      case 'recovery_status':
        return `–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${recoveryData.recoveryScore}/100\n` +
          `${getRecoveryEmoji(recoveryData.recoveryScore)} ${recoveryData.recoveryScore < 30 ? "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å" :
            recoveryData.recoveryScore < 50 ? "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å" :
              recoveryData.recoveryScore < 70 ? "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å" : "–û—Ç–ª–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
          }\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n${getRecoveryTips(recoveryData)
          }`;

      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è";
    }
  };

  const getRecoveryEmoji = (score: number): string => {
    return score < 30 ? "üò´" :
      score < 50 ? "üòü" :
        score < 70 ? "üòê" : "üòä";
  };

  const getRecoveryTips = (data: RecoveryData): string => {
    const tips = [];

    if (data.sleepHours < 7) tips.push("‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Ç—å 7-9 —á–∞—Å–æ–≤");
    if (data.waterIntake < 2000) tips.push(`‚Ä¢ –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã, —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: ${data.waterIntake}–º–ª`);
    if (data.stressLevel > 3) tips.push("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞");

    return tips.length ? tips.join('\n') : "–í—ã –æ—Ç–ª–∏—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ—Å—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
  };

  useEffect(() => {
    calculateRecoveryScore();
  }, [recoveryData.sleepHours, recoveryData.waterIntake, recoveryData.stressLevel]);

  const recoveryKnowledgeBase = {
    sleep: {
      optimalHours: "7-9",
      bestTime: "22:00 - 6:00",
      qualityTips: [
        "–ó–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–∏–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω/—Ç–µ–ª–µ–≤–∏–∑–æ—Ä)",
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ 18-21¬∞C",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ 4-7-8 –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è –∑–∞—Å—ã–ø–∞–Ω–∏—è"
      ]
    } as SleepData,
    stretchingPrograms: [
      {
        level: "beginner",
        muscles: ["whole body"],
        exercises: [
          {
            name: "–ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞",
            duration: 2,
            instructions: "–ù–∞ —á–µ—Ç–≤–µ—Ä–µ–Ω—å–∫–∞—Ö –ø–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–≥–∏–±–∞–π—Ç–µ –∏ –≤—ã–≥–∏–±–∞–π—Ç–µ —Å–ø–∏–Ω—É"
          },
          {
            name: "–†–∞—Å—Ç—è–∂–∫–∞ —à–µ–∏",
            duration: 1,
            instructions: "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –Ω–∞–∫–ª–æ–Ω—ã –≥–æ–ª–æ–≤—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã"
          }
        ]
      }
    ] as StretchingProgram[],
    recoveryMethods: [
      {
        type: "recovery",
        title: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à",
        description: "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –∏ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è",
        steps: [
          "30 —Å–µ–∫—É–Ω–¥ –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (38-40¬∞C)",
          "30 —Å–µ–∫—É–Ω–¥ —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ (15-20¬∞C)",
          "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å 5-7 —Ü–∏–∫–ª–æ–≤"
        ],
        tips: [
          "–ó–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ –≤—Å–µ–≥–¥–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–æ–π",
          "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ –ø—Ä–æ—Å—Ç—É–¥–µ"
        ]
      }
    ] as RecoveryAdvice[]
  };

  const speak = async (text: string) => {
    if (!audioConfig.enabled || !text.trim() || !voiceRssKey) return;

    try {
      const audio = new Audio();
      const url = `https://api.voicerss.org/?key=${voiceRssKey}&hl=ru-ru&v=${audioConfig.voice}&src=${encodeURIComponent(text)}`;
      audio.src = url;

      await audio.play().catch(e => {
        console.error("Playback failed:", e);
      });
    } catch (error) {
      console.error("Audio initialization error:", error);
    }
  };

  const getCachedNutrition = async (query: string): Promise<NutritionData | null> => {
    if (nutritionCache.has(query)) {
      return nutritionCache.get(query)!;
    }
    const data = await getNutritionInfo(query);
    if (data) nutritionCache.set(query, data);
    return data;
  };

  const quickActions: QuickAction[] = [
    {
      title: "–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è",
      description: "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –±–∞–Ω–∞–Ω–µ?'",
      icon: Apple,
      action: "analyze_nutrition",
      color: "from-green-500 to-teal-600"
    },
    {
      title: "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
      description: "–ù–∞–π–¥–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π",
      icon: Users,
      action: "find_trainer",
      color: "from-blue-500 to-indigo-600"
    },
    {
      title: "–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
      description: "–ü–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
      icon: CreditCard,
      action: "choose_membership",
      color: "from-green-500 to-emerald-600"
    },
    {
      title: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
      description: "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É",
      icon: Calendar,
      action: "book_training",
      color: "from-purple-500 to-pink-600"
    },
    {
      title: "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω",
      description: "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
      icon: ShoppingBag,
      action: "visit_shop",
      color: "from-orange-500 to-red-600"
    },
    {
      title: "–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞",
      description: "–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞",
      icon: Moon,
      action: "log_sleep",
      color: "from-indigo-500 to-blue-600"
    },
    {
      title: "–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º",
      description: "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É",
      icon: Droplet,
      action: "log_water",
      color: "from-blue-400 to-cyan-500"
    },
    {
      title: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏",
      description: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é",
      icon: Activity,
      action: "start_stretching",
      color: "from-purple-400 to-fuchsia-500"
    }
  ];

  const knowledgeBase = {
    trainers: {
      "anna-petrova": {
        name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        specialty: "–ô–æ–≥–∞ –∏ —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥",
        price: "–æ—Ç 2000‚ÇΩ/—á–∞—Å",
        rating: 4.9,
        description: "–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –π–æ–≥–∏ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –¥–∏–ø–ª–æ–º–æ–º"
      },
      "mikhail-volkov": {
        name: "–ú–∏—Ö–∞–∏–ª –í–æ–ª–∫–æ–≤",
        specialty: "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        price: "–æ—Ç 2500‚ÇΩ/—á–∞—Å",
        rating: 4.8,
        description: "–ú–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥—É"
      },
      "elena-smirnova": {
        name: "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
        specialty: "–ö–∞—Ä–¥–∏–æ –∏ –ø–æ—Ö—É–¥–µ–Ω–∏–µ",
        price: "–æ—Ç 2200‚ÇΩ/—á–∞—Å",
        rating: 5.0,
        description: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏—é –∏ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º"
      },
      "dmitriy-kozlov": {
        name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
        specialty: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥",
        price: "–æ—Ç 2300‚ÇΩ/—á–∞—Å",
        rating: 4.7,
        description: "–≠–∫—Å–ø–µ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –∏ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏"
      },
      "olga-ivanova": {
        name: "–û–ª—å–≥–∞ –ò–≤–∞–Ω–æ–≤–∞",
        specialty: "–ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        price: "–æ—Ç 1800‚ÇΩ/—á–∞—Å",
        rating: 4.9,
        description: "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
      },
      "aleksandr-petrov": {
        name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
        specialty: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥",
        price: "–æ—Ç 5000‚ÇΩ/—á–∞—Å",
        rating: 5.0,
        description: "–≠–ª–∏—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º"
      }
    } as Record<string, Trainer>,
    programs: {
      yoga: { name: "–ô–æ–≥–∞ –∏ —Ä–µ–ª–∞–∫—Å", price: "–æ—Ç 800‚ÇΩ", description: "–ì–∞—Ä–º–æ–Ω–∏—è —Ç–µ–ª–∞ –∏ –¥—É—Ö–∞" },
      strength: { name: "–°–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏–Ω–≥", price: "–æ—Ç 1000‚ÇΩ", description: "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã" },
      cardio: { name: "–ö–∞—Ä–¥–∏–æ –∏ –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ", price: "–æ—Ç 700‚ÇΩ", description: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–æ—Ö—É–¥–µ–Ω–∏–µ" },
      functional: { name: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥", price: "–æ—Ç 900‚ÇΩ", description: "–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–∏–ª—ã" }
    } as Record<string, Program>,
    memberships: [
      { name: "–ë–∞–∑–æ–≤—ã–π", price: 2990, description: "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö" },
      { name: "–ü—Ä–µ–º–∏—É–º", price: 4990, description: "–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤", popular: true },
      { name: "VIP", price: 7990, description: "–ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π" },
      { name: "–ë–µ–∑–ª–∏–º–∏—Ç", price: 39900, description: "–ì–æ–¥–æ–≤–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç", discount: 25 }
    ] as Membership[]
  };

  const getNutritionInfo = async (query: string): Promise<NutritionData | null> => {
    const foodDictionary: Record<string, string> = {
      '—è–±–ª–æ–∫–æ': 'apple',
      '–±–∞–Ω–∞–Ω': 'banana',
      '–≥—Ä–µ—á–∫–∞': 'buckwheat',
      '–∫—É—Ä–∏–Ω–Ω–∞—è –≥—Ä—É–¥–∫–∞': 'chicken breast',
      '–≥–æ–≤—è–¥–∏–Ω–∞': 'beef',
      '—Ä–∏—Å': 'rice',
      '–æ–≤—Å—è–Ω–∫–∞': 'oatmeal',
      '—Ç–≤–æ—Ä–æ–≥': 'cottage cheese',
      '—è–π—Ü–æ': 'egg',
      '–º–æ–ª–æ–∫–æ': 'milk',
      '—Ö–ª–µ–±': 'bread',
      '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': 'potato',
      '–ø–æ–º–∏–¥–æ—Ä': 'tomato',
      '–æ–≥—É—Ä–µ—Ü': 'cucumber',
      '—Å—ã—Ä': 'cheese',
      '—Ä—ã–±–∞': 'fish',
      '—Å–≤–∏–Ω–∏–Ω–∞': 'pork',
      '–º–∞—Å–ª–æ': 'butter',
      '–º–µ–¥': 'honey',
      '—Å–∞—Ö–∞—Ä': 'sugar',
      '–º–∞–∫–∞—Ä–æ–Ω—ã': 'pasta',
      '–∫–æ—Ñ–µ': 'coffee',
      '—á–∞–π': 'tea',
      '—Å–æ–∫': 'juice'
    };

    const normalizedQuery = query
      .trim()
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9\s]/gi, '');

    if (!normalizedQuery) {
      console.error("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏");
      return null;
    }

    if (!nutritionixAppId || !nutritionixAppKey) {
      console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ API");
      return null;
    }

    const translateQuery = (q: string): string => {
      if (foodDictionary[q]) return foodDictionary[q];

      for (const [rus, eng] of Object.entries(foodDictionary)) {
        if (q.includes(rus)) {
          return q.replace(rus, eng);
        }
      }

      return q;
    };

    const englishQuery = translateQuery(normalizedQuery);

    try {
      const headers = new Headers();
      headers.append('Content-Type', 'application/json');
      headers.append('x-app-id', nutritionixAppId);
      headers.append('x-app-key', nutritionixAppKey);

      const response = await fetch('https://trackapi.nutritionix.com/v2/natural/nutrients', {
        method: 'POST',
        headers: headers,
        body: JSON.stringify({
          query: englishQuery,
          timezone: "UTC"
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error("Nutrition API error:", {
          status: response.status,
          originalQuery: query,
          englishQuery,
          error: errorData.message || 'Unknown error'
        });
        return null;
      }

      const data: NutritionResponse = await response.json();

      if (!data?.foods?.length) {
        console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è:", {
          originalQuery: query,
          englishQuery
        });
        return null;
      }

      return {
        ...data.foods[0],
        food_name: query.split(' ')[0]
      };

    } catch (error) {
      console.error("Request failed:", {
        error: error instanceof Error ? error.message : 'Unknown error',
        originalQuery: query,
        englishQuery
      });
      return null;
    }
  };

  const addToFoodDiary = (food: NutritionData) => {
    try {
      const diary = JSON.parse(localStorage.getItem('foodDiary') || '[]');
      diary.push({
        ...food,
        date: new Date().toISOString()
      });
      localStorage.setItem('foodDiary', JSON.stringify(diary));
    } catch (error) {
      console.error("Error saving to food diary:", error);
    }
  };

  const findTrainerBySpecialty = (specialty: string): Trainer | null => {
    const trainerMap: Record<string, keyof typeof knowledgeBase.trainers> = {
      '–π–æ–≥–∞': 'anna-petrova',
      '—Å—Ç—Ä–µ—Ç—á–∏–Ω–≥': 'anna-petrova',
      '—Å–∏–ª–æ–≤': 'mikhail-volkov',
      '–º–∞—Å—Å': 'mikhail-volkov',
      '–∫–∞—á–∞—Ç—å': 'mikhail-volkov',
      '–ø–æ—Ö—É–¥': 'elena-smirnova',
      '–∫–∞—Ä–¥–∏–æ': 'elena-smirnova',
      '–∂–∏—Ä': 'elena-smirnova',
      '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å': 'dmitriy-kozlov',
      'trx': 'dmitriy-kozlov',
      '—Ä–µ–∞–±–∏–ª–∏—Ç': 'dmitriy-kozlov',
      '–≥—Ä—É–ø–ø': 'olga-ivanova',
      '–∞—ç—Ä–æ–±': 'olga-ivanova',
      '–∑—É–º–±–∞': 'olga-ivanova',
      'vip': 'aleksandr-petrov',
      '—ç–ª–∏—Ç–Ω': 'aleksandr-petrov',
      '–ø—Ä–µ–º–∏—É–º': 'aleksandr-petrov'
    };

    for (const [key, trainerId] of Object.entries(trainerMap)) {
      if (specialty.includes(key)) {
        return knowledgeBase.trainers[trainerId];
      }
    }
    return null;
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setTimeout(() => {
        const welcomeMessage: Message = {
          id: Date.now().toString(),
          text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫ FitFlow Pro! –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞, –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–º –∫–ª—É–±–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
          isBot: true,
          timestamp: new Date(),
          suggestions: [
            "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
            "–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
            "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"
          ]
        };
        setMessages([welcomeMessage]);
      }, 500);
    }
  }, [isOpen]);

  const processUserMessage = async (text: string) => {
    const generateUniqueId = () => `${Date.now()}-${Math.floor(Math.random() * 1000)}`;

    const userMessage: Message = {
      id: generateUniqueId(),
      text,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    const botResponse = await generateBotResponse(text.toLowerCase());
    setMessages(prev => [...prev, botResponse]);
    setIsTyping(false);

    if (audioConfig.enabled) {
      speak(botResponse.text);
    }
  };

  const generateBotResponse = async (text: string): Promise<Message> => {
    const generateUniqueId = () => `${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    let responseText = "";
    let suggestions: string[] = [];
    let links: Link[] = [];

    // Nutrition queries
    if (text.match(/(–∫–∞–ª–æ—Ä–∏–∏|–ø–∏—Ç–∞–Ω–∏–µ|–µ–¥–∞|—Å–∫–æ–ª—å–∫–æ.*(–∫–∞–ª–æ—Ä–∏|–±–µ–ª–∫|–∂–∏—Ä|—É–≥–ª–µ–≤)|—Å–æ—Å—Ç–∞–≤|–ø–∏—â–µ–≤–∞—è|—Ü–µ–Ω–Ω–æ—Å—Ç—å|–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã)/i)) {
      const foodQuery = text.replace(/(–∫–∞–ª–æ—Ä–∏–∏|–ø–∏—Ç–∞–Ω–∏–µ|–µ–¥–∞|—Å–∫–æ–ª—å–∫–æ|—Å–æ—Å—Ç–∞–≤|–ø–∏—â–µ–≤–∞—è|—Ü–µ–Ω–Ω–æ—Å—Ç—å|–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã)/gi, '').trim();

      if (foodQuery) {
        const nutrition = await getCachedNutrition(foodQuery);

        if (nutrition) {
          addToFoodDiary(nutrition);
          responseText = `üçè –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å "${nutrition.food_name}":\n`
            + `üîπ –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(nutrition.nf_calories)} –∫–∫–∞–ª\n`
            + `üîπ –ë–µ–ª–∫–∏: ${Math.round(nutrition.nf_protein)}–≥\n`
            + `üîπ –ñ–∏—Ä—ã: ${Math.round(nutrition.nf_total_fat)}–≥\n`
            + `üîπ –£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(nutrition.nf_total_carbohydrate)}–≥\n`
            + (nutrition.serving_weight_grams ?
              `üìä –ù–∞ 100–≥: ${Math.round(nutrition.nf_calories * 100 / nutrition.serving_weight_grams)} –∫–∫–∞–ª` :
              '');

          suggestions = [
            "–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π",
            "–ë–µ–ª–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
            "–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è"
          ];
        } else {
          responseText = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –≥—Ä–µ—á–∫–µ?'";
        }
      } else {
        responseText = "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
          + "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –≤ –æ–≤—Å—è–Ω–∫–µ\n"
          + "‚Ä¢ –ü–∏—Ç–∞–Ω–∏–µ –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏\n"
          + "‚Ä¢ –°–∫–æ–ª—å–∫–æ –±–µ–ª–∫–æ–≤ –≤ —Ç–≤–æ—Ä–æ–≥–µ";
      }
    }
    // Recovery status
    else if (text.startsWith('–º–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è')) {
      responseText = handleRecoveryCommand('recovery_status');
    }
    // Trainer queries
    else if (text.includes('—Ç—Ä–µ–Ω–µ—Ä') || text.includes('–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä')) {
      const trainer = findTrainerBySpecialty(text);

      if (trainer) {
        const emoji: Record<string, string> = {
          'anna-petrova': 'üßò‚Äç‚ôÄÔ∏è',
          'mikhail-volkov': 'üí™',
          'elena-smirnova': 'üî•',
          'dmitriy-kozlov': 'üéØ',
          'olga-ivanova': 'üíÉ',
          'aleksandr-petrov': 'üëë'
        };

        const trainerId = Object.keys(knowledgeBase.trainers).find(
          id => knowledgeBase.trainers[id as keyof typeof knowledgeBase.trainers] === trainer
        );

        if (trainerId) {
          responseText = `${emoji[trainerId]} –î–ª—è ${trainer.specialty.toLowerCase()} —Ä–µ–∫–æ–º–µ–Ω–¥—É—é ${trainer.name}! ${trainer.description}. –¶–µ–Ω–∞ ${trainer.price}, —Ä–µ–π—Ç–∏–Ω–≥ ${trainer.rating}‚≠ê`;

          links.push({
            title: `${trainer.name} - ${trainer.specialty}`,
            url: `/trainers/${trainerId}`,
            description: trainer.description,
            icon: trainer.specialty.includes('–π–æ–≥–∞') ? Heart :
              trainer.specialty.includes('—Å–∏–ª–æ–≤') ? Dumbbell :
                trainer.specialty.includes('–∫–∞—Ä–¥–∏–æ') ? Zap :
                  trainer.specialty.includes('—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å') ? Target :
                    trainer.specialty.includes('–≥—Ä—É–ø–ø') ? Users : Star
          });
        }
      } else {
        responseText = "üë• –£ –Ω–∞—Å 6 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π! –ú–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?";
        links.push({
          title: "–í—Å–µ —Ç—Ä–µ–Ω–µ—Ä—ã FitFlow Pro",
          url: "/trainers",
          description: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞",
          icon: Users
        });
        suggestions = ["–ü–æ—Ö—É–¥–µ—Ç—å", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–£–ª—É—á—à–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å", "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è"];
      }
    }
    // Programs queries
    else if (text.includes('–ø—Ä–æ–≥—Ä–∞–º') || text.includes('–∑–∞–Ω—è—Ç') || text.includes('—Ç—Ä–µ–Ω–∏—Ä–æ–≤')) {
      const programs = knowledgeBase.programs;
      responseText = `üèÉ‚Äç‚ôÇÔ∏è –£ –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n`;

      const programEmoji: Record<string, string> = {
        yoga: 'üßò‚Äç‚ôÄÔ∏è',
        strength: 'üí™',
        cardio: 'üî•',
        functional: 'üéØ'
      };

      Object.entries(programs).forEach(([key, program]) => {
        responseText += `${programEmoji[key]} ${program.name} (${program.price})\n`;
      });

      links.push({
        title: "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        url: "/programs",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É",
        icon: Target
      });
      suggestions = ["–ô–æ–≥–∞", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ö–∞—Ä–¥–∏–æ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥"];
    }
    // Booking queries
    else if (text.includes('–∑–∞–ø–∏—Å') || text.includes('–±—Ä–æ–Ω–∏—Ä')) {
      responseText = "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞\n2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!";
      links.push(
        {
          title: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É",
          url: "/trainers",
          description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å",
          icon: Calendar
        },
        {
          title: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
          url: "/member-dashboard",
          description: "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å—è–º–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ",
          icon: User
        }
      );
      suggestions = ["–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"];
    }
    // Shop queries
    else if (text.includes('–º–∞–≥–∞–∑–∏–Ω') || text.includes('–ø–∏—Ç–∞–Ω') || text.includes('–ø—Ä–æ—Ç–µ–∏–Ω') || text.includes('–∫—É–ø–∏—Ç—å')) {
      responseText = "üõí –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n\nüíä –°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\nü•§ –ü—Ä–æ—Ç–µ–∏–Ω—ã –∏ –≥–µ–π–Ω–µ—Ä—ã\nüèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\nüëï –û–¥–µ–∂–¥–∞ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏!";
      links.push({
        title: "–§–∏—Ç–Ω–µ—Å-–º–∞–≥–∞–∑–∏–Ω",
        url: "/shop",
        description: "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        icon: ShoppingBag
      });
      suggestions = ["–ü—Ä–æ—Ç–µ–∏–Ω—ã", "–í–∏—Ç–∞–º–∏–Ω—ã", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–û–¥–µ–∂–¥–∞"];
    }
    // Price queries
    else if (text.includes('—Ü–µ–Ω–∞') || text.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || text.includes('—Å–∫–æ–ª—å–∫–æ')) {
      responseText = "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\nüë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã: 1800‚ÇΩ - 5000‚ÇΩ/—á–∞—Å\nüí≥ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã: 2990‚ÇΩ - 39900‚ÇΩ\nüèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã: 700‚ÇΩ - 1000‚ÇΩ\nüéØ –ì—Ä—É–ø–ø–æ–≤—ã–µ: –æ—Ç 800‚ÇΩ\n\n–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!";
      suggestions = ["–¶–µ–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è"];
    }
    // Schedule queries
    else if (text.includes('–≤—Ä–µ–º—è') || text.includes('–≥—Ä–∞—Ñ–∏–∫') || text.includes('–∫–æ–≥–¥–∞')) {
      responseText = "üïê –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n\nüåÖ –ü–Ω-–ü—Ç: 06:00 - 24:00\nüåÑ –°–±-–í—Å: 08:00 - 22:00\n\n–¢—Ä–µ–Ω–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å 07:00 –¥–æ 21:00. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ 24/7!";
      suggestions = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"];
    }
    // Location queries
    else if (text.includes('–≥–¥–µ') || text.includes('–∞–¥—Ä–µ—Å') || text.includes('–ª–æ–∫–∞—Ü–∏—è')) {
      responseText = "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞!\n\nüè¢ –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –§–∏—Ç–Ω–µ—Å, 15\nüöá –ú–µ—Ç—Ä–æ: –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è (5 –º–∏–Ω –ø–µ—à–∫–æ–º)\nüÖøÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67";
      suggestions = ["–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"];
    }
    // Greetings
    else if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤') || text.includes('–¥–æ–±—Ä')) {
      responseText = "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ FitFlow Pro! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Ç—Ä–µ–Ω–µ—Ä–∞—Ö, –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–µ. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?";
      suggestions = ["–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", "–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"];
    }
    // Thanks
    else if (text.includes('—Å–ø–∞—Å–∏–±–æ') || text.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
      responseText = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å. –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ FitFlow Pro! üí™";
      suggestions = ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã", "–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"];
    }
    // Recovery queries
    else if (
      text.includes('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') ||
      text.includes('–æ—Ç–¥—ã—Ö') ||
      text.includes('—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü') ||
      text.includes('—Å–æ–Ω') ||
      text.includes('—Ä–∞—Å—Ç—è–∂–∫') ||
      text.includes('–≤–æ–¥–∞') ||
      text.includes('—Å—Ç—Ä–µ—Å—Å') ||
      text.includes('—É—Å—Ç–∞–ª')
    ) {
      if (text.includes('–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω') || text.includes('—Å–ø–∞–ª')) {
        const hoursMatch = text.match(/(\d+[,.]?\d*)/);
        const hours = hoursMatch ? parseFloat(hoursMatch[0].replace(',', '.')) : null;

        if (hours && !isNaN(hours)) {
          setRecoveryData(prev => ({ ...prev, sleepHours: hours }));
          responseText = `‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤–∞—à —Å–æ–Ω: ${hours} —á–∞—Å–æ–≤\n\n${hours < 7 ? '–†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ 7-9 —á–∞—Å–æ–≤' :
            hours > 9 ? '–í—ã —Ö–æ—Ä–æ—à–æ –≤—ã—Å–ø–∞–ª–∏—Å—å! –ù–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π —Å–æ–Ω –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' :
              '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞!'
            }`;
          calculateRecoveryScore();
        } else {
          responseText = "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Å–ø–∞–ª–∏? –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–ø–∞–ª 7.5 —á–∞—Å–æ–≤'";
        }
      }
      else if (text.includes('–≤—ã–ø–∏–ª –≤–æ–¥—ã') || text.includes('–≤–æ–¥–∞')) {
        const mlMatch = text.match(/(\d+)\s?–º?–ª/);
        const ml = mlMatch ? parseInt(mlMatch[1]) : null;

        if (ml && !isNaN(ml)) {
          const total = recoveryData.waterIntake + ml;
          setRecoveryData(prev => ({ ...prev, waterIntake: total }));
          responseText = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${ml} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${total} –º–ª\n\n${total < 1500 ? '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤—ã–ø–∏–≤–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å' :
            total < 2500 ? '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–Ω–æ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–¥—ã' :
              '–û—Ç–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í—ã —Ö–æ—Ä–æ—à–æ –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã'
            }`;
          calculateRecoveryScore();
        } else {
          responseText = "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã –≤—ã–ø–∏–ª–∏? –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–í—ã–ø–∏–ª 500 –º–ª –≤–æ–¥—ã'";
        }
      }
      else if (text.includes('—Å—Ç—Ä–µ—Å—Å') || text.includes('–Ω–∞–ø—Ä—è–∂')) {
        const levelMatch = text.match(/[1-5]/);
        const level = levelMatch ? parseInt(levelMatch[0]) : null;

        if (level && level >= 1 && level <= 5) {
          setRecoveryData(prev => ({ ...prev, stressLevel: level }));
          responseText = `‚úÖ –ó–∞–ø–∏—Å–∞–ª —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${level}/5\n\n${level >= 4 ? '–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é' :
            '–•–æ—Ä–æ—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å'
            }`;
          calculateRecoveryScore();
        } else {
          responseText = "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –æ—Ç 1 –¥–æ 5, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ–π —Å—Ç—Ä–µ—Å—Å 3'";
        }
      }
      else if (text.includes('—Å—Ç–∞—Ç—É—Å') || text.includes('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')) {
        responseText = handleRecoveryCommand('recovery_status');
        const tips = getRecoveryTips(recoveryData);
        responseText += `\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n${tips}`;
      }
      else {
        const recoveryType =
          text.includes('—Å–æ–Ω') ? 'sleep' :
            text.includes('—Ä–∞—Å—Ç—è–∂–∫') ? 'stretching' :
              text.includes('–≤–æ–¥') ? 'water' :
                text.includes('–º–µ—Ç–æ–¥') ? 'methods' :
                  'recovery';

        if (recoveryType === 'sleep') {
          const sleepData = recoveryKnowledgeBase.sleep;
          responseText = `üí§ –°–æ–≤–µ—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–Ω—É:\n\n` +
            `‚è≥ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${sleepData.optimalHours} —á–∞—Å–æ–≤\n` +
            `‚è∞ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–Ω–∞: ${sleepData.bestTime}\n\n` +
            `üîπ –°–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:\n` +
            sleepData.qualityTips.map(tip => `‚Ä¢ ${tip}`).join('\n') +
            `\n\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `‚Ä¢ –°–æ–Ω: ${recoveryData.sleepHours} —á–∞—Å–æ–≤\n` +
            `‚Ä¢ –í–æ–¥–∞: ${recoveryData.waterIntake} –º–ª`;
        }
        else if (recoveryType === 'stretching') {
          const program = recoveryKnowledgeBase.stretchingPrograms[0];
          responseText = `üßò –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏ (${program.level}):\n\n` +
            program.exercises.map(ex =>
              `‚ñ´Ô∏è ${ex.name} - ${ex.duration} –º–∏–Ω\n` +
              `   ${ex.instructions}\n`
            ).join('\n') +
            `\nüí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º`;
        }
        else if (recoveryType === 'water') {
          responseText = `üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:\n\n` +
            `‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: 2-3 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å\n` +
            `‚Ä¢ –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ 500 –º–ª –≤–æ–¥—ã\n` +
            `‚Ä¢ –ü—Ä–∏–∑–Ω–∞–∫–∏ –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è: —É—Å—Ç–∞–ª–æ—Å—Ç—å, –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å\n\n` +
            `–í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: ${recoveryData.waterIntake} –º–ª\n` +
            `${recoveryData.waterIntake < 2000 ? '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã!' : '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!'}`;
        }
        else {
          const method = recoveryKnowledgeBase.recoveryMethods[0];
          responseText = `üîπ ${method.title}:\n${method.description}\n\n` +
            `üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n` +
            method.steps!.map((s, i) => `${i + 1}. ${s}`).join('\n') +
            `\n\nüí° –°–æ–≤–µ—Ç—ã:\n${method.tips!.join('\n')}`;
        }
      }

      suggestions.push(
        "–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω",
        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É",
        "–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏"
      );

      links.push(
        {
          title: "–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞",
          url: "#",
          description: "–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞",
          icon: Moon,
          onClick: () => setInputText("–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω ")
        },
        {
          title: "–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
          url: "#",
          description: "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É",
          icon: Droplet,
          onClick: () => setInputText("–í—ã–ø–∏–ª –≤–æ–¥—ã ")
        },
        {
          title: "–û—Ü–µ–Ω–∏—Ç—å —Å—Ç—Ä–µ—Å—Å",
          url: "#",
          description: "–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ 1-5",
          icon: AlertCircle,
          onClick: () => setInputText("–ú–æ–π —Å—Ç—Ä–µ—Å—Å ")
        }
      );

      if (!text.includes('—Å—Ç–∞—Ç—É—Å')) {
        links.push({
          title: "–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
          url: "#",
          description: "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
          icon: Activity,
          onClick: () => processUserMessage("–ú–æ–π —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        });
      }
    }
    // Default response
    else {
      responseText = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n" +
        "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞\n" +
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n" +
        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ\n" +
        "‚Ä¢ –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n" +
        "‚Ä¢ –ü–æ–º–æ—á—å —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º";
      suggestions = ["–¢—Ä–µ–Ω–µ—Ä—ã", "–ü—Ä–æ–≥—Ä–∞–º–º—ã", "–ó–∞–ø–∏—Å—å", "–ü–∏—Ç–∞–Ω–∏–µ"];
    }

    return {
      id: generateUniqueId(),
      text: responseText,
      isBot: true,
      timestamp: new Date(),
      suggestions,
      links
    };
  };

  const handleQuickAction = (action: string) => {
    const actionMap: Record<string, string> = {
      'analyze_nutrition': '–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ ',
      'find_trainer': '–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞',
      'choose_membership': '–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
      'book_training': '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
      'visit_shop': '–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
      'log_sleep': '–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω',
      'log_water': '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É',
      'start_stretching': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ç—è–∂–∫–∏'
    };

    if (action === 'analyze_nutrition') {
      setInputText(actionMap[action]);
    } else {
      processUserMessage(actionMap[action]);
    }
  };

  const handleSuggestion = (suggestion: string) => {
    processUserMessage(suggestion);
  };

  const handleSendMessage = () => {
    if (inputText.trim()) {
      processUserMessage(inputText);
      setInputText('');
    }
  };

  const handleVoiceInput = () => {
    setIsListening(!isListening);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Web Speech API
  };

  // Add CSS for pulse animation
  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes pulse-glow {
        0% {
          box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3), 0 0 0 0 rgba(59, 130, 246, 0.4);
        }
        70% {
          box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3), 0 0 0 10px rgba(59, 130, 246, 0);
        }
        100% {
          box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3), 0 0 0 0 rgba(59, 130, 246, 0);
        }
      }
    `;
    if (!document.head.querySelector('#pulse-glow-style')) {
      style.id = 'pulse-glow-style';
      document.head.appendChild(style);
    }
    return () => {
      const existingStyle = document.head.querySelector('#pulse-glow-style');
      if (existingStyle) {
        existingStyle.remove();
      }
    };
  }, []);

  return (
    <>
      <AnimatePresence>
        {!isOpen && (
          <motion.button
            initial={{ scale: 0, rotate: -180 }}
            animate={{ scale: 1, rotate: 0 }}
            exit={{ scale: 0, rotate: 180 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={() => setIsOpen(true)}
            className="fixed bottom-6 right-6 z-50 w-12 h-12 bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 rounded-full shadow-2xl flex items-center justify-center text-white hover:shadow-3xl transition-all duration-300"
            style={{
              boxShadow: '0 8px 32px rgba(59, 130, 246, 0.3), 0 0 0 0 rgba(59, 130, 246, 0.4)',
              animation: 'pulse-glow 2s infinite'
            }}
          >
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
            >
              <Brain className="h-6 w-6" />
            </motion.div>

            <div className="absolute inset-0 rounded-full overflow-clip">
              <motion.div
                className="absolute top-1 right-1 w-1 h-1 bg-white rounded-full"
                animate={{
                  scale: [0, 1, 0],
                  opacity: [0, 1, 0]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  delay: 0
                }}
              />
              <motion.div
                className="absolute bottom-2 left-2 w-1.5 h-1.5 bg-yellow-300 rounded-full"
                animate={{
                  scale: [0, 1, 0],
                  opacity: [0, 1, 0]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  delay: 0.7
                }}
              />
              <motion.div
                className="absolute top-3 left-1 w-1 h-1 bg-pink-300 rounded-full"
                animate={{
                  scale: [0, 1, 0],
                  opacity: [0, 1, 0]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  delay: 1.4
                }}
              />
            </div>
          </motion.button>
        )}
      </AnimatePresence>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8, y: 100 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.8, y: 100 }}
            className="fixed bottom-6 right-6 z-50 w-96 h-[760px] bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden flex flex-col"
            style={{
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'
            }}
          >
            <div className="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 p-4 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 8, repeat: Infinity, ease: "linear" }}
                    className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center"
                  >
                    <Brain className="h-6 w-6" />
                  </motion.div>
                  <div>
                    <h3 className="font-bold text-lg">FitFlow AI</h3>
                    <p className="text-sm text-white/80">–í–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫</p>
                  </div>
                </div>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setIsOpen(false)}
                  className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center hover:bg-white/30 transition-colors"
                >
                  <X className="h-5 w-5" />
                </motion.button>
              </div>
            </div>

            {messages.length <= 1 && (
              <div className="p-4 border-b bg-gray-50">
                <h4 className="text-sm font-medium text-gray-700 mb-3">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h4>
                <div className="grid grid-cols-2 gap-2">
                  {quickActions.map((action, index) => (
                    <motion.button
                      key={action.action}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleQuickAction(action.action)}
                      className={`p-3 rounded-lg bg-gradient-to-r ${action.color} text-white text-left hover:shadow-lg transition-all`}
                    >
                      <action.icon className="h-5 w-5 mb-1" />
                      <p className="text-xs font-medium">{action.title}</p>
                    </motion.button>
                  ))}
                </div>
              </div>
            )}

            <div className="flex-1 overflow-y-auto p-4 space-y-4 min-h-0" style={{ height: 'calc(100% - 300px)' }}>
              {messages.map((msg, index) => (
                <motion.div
                  key={msg.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`flex ${msg.isBot ? 'justify-start' : 'justify-end'}`}
                >
                  <div className={`max-w-[80%] ${msg.isBot ? 'order-1' : 'order-2'}`}>
                    {msg.isBot && (
                      <div className="flex items-center space-x-2 mb-1">
                        <Bot className="h-4 w-4 text-blue-500" />
                        <span className="text-xs text-gray-500">FitFlow AI</span>
                      </div>
                    )}
                    <div
                      className={`p-3 rounded-2xl ${msg.isBot
                        ? 'bg-gray-100 text-gray-800'
                        : 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'
                        }`}
                    >
                      <p className="text-sm whitespace-pre-line">{msg.text}</p>

                      {msg.text.includes('—É—Ä–æ–≤–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è') && (
                        <div className="mt-3 w-full bg-gray-200 rounded-full h-4">
                          <div
                            className={`h-4 rounded-full ${recoveryData.recoveryScore < 30 ? 'bg-red-500' :
                              recoveryData.recoveryScore < 50 ? 'bg-yellow-500' :
                                recoveryData.recoveryScore < 70 ? 'bg-blue-500' : 'bg-green-500'
                              }`}
                            style={{ width: `${recoveryData.recoveryScore}%` }}
                          />
                          <div className="text-xs text-center mt-1 text-gray-600">
                            {recoveryData.recoveryScore < 30 ? "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å" :
                              recoveryData.recoveryScore < 50 ? "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å" :
                                recoveryData.recoveryScore < 70 ? "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å" : "–û—Ç–ª–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"}
                          </div>
                        </div>
                      )}
                    </div>

                    {msg.links && msg.links.length > 0 && (
                      <div className="mt-2 space-y-2">
                        {msg.links.map((link, linkIndex) => (
                          <motion.a
                            key={linkIndex}
                            href={link.url}
                            onClick={(e) => {
                              if (link.onClick) {
                                e.preventDefault();
                                link.onClick();
                              }
                            }}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: linkIndex * 0.1 }}
                            className="block p-3 bg-white border border-gray-200 rounded-lg hover:shadow-md transition-all group cursor-pointer"
                          >
                            <div className="flex items-center space-x-3">
                              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                                <link.icon className="h-4 w-4 text-white" />
                              </div>
                              <div className="flex-1">
                                <p className="font-medium text-sm text-gray-900">{link.title}</p>
                                <p className="text-xs text-gray-500">{link.description}</p>
                              </div>
                              <ChevronRight className="h-4 w-4 text-gray-400 group-hover:text-gray-600" />
                            </div>
                          </motion.a>
                        ))}
                      </div>
                    )}

                    {msg.suggestions && msg.suggestions.length > 0 && (
                      <div className="mt-3 flex flex-wrap gap-2">
                        {msg.suggestions.map((suggestion, suggIndex) => (
                          <motion.button
                            key={suggIndex}
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ delay: suggIndex * 0.1 }}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => handleSuggestion(suggestion)}
                            className="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium hover:bg-blue-200 transition-colors"
                          >
                            {suggestion}
                          </motion.button>
                        ))}
                      </div>
                    )}
                  </div>
                </motion.div>
              ))}

              {isTyping && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="flex justify-start"
                >
                  <div className="max-w-[80%]">
                    <div className="flex items-center space-x-2 mb-1">
                      <Bot className="h-4 w-4 text-blue-500" />
                      <span className="text-xs text-gray-500">FitFlow AI –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                    </div>
                    <div className="bg-gray-100 p-3 rounded-2xl">
                      <div className="flex space-x-1">
                        <motion.div
                          className="w-2 h-2 bg-gray-400 rounded-full"
                          animate={{ scale: [1, 1.2, 1] }}
                          transition={{ duration: 1, repeat: Infinity, delay: 0 }}
                        />
                        <motion.div
                          className="w-2 h-2 bg-gray-400 rounded-full"
                          animate={{ scale: [1, 1.2, 1] }}
                          transition={{ duration: 1, repeat: Infinity, delay: 0.2 }}
                        />
                        <motion.div
                          className="w-2 h-2 bg-gray-400 rounded-full"
                          animate={{ scale: [1, 1.2, 1] }}
                          transition={{ duration: 1, repeat: Infinity, delay: 0.4 }}
                        />
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
              <div ref={messagesEndRef} />
            </div>

            <div className="p-4 border-t bg-gray-50 flex-shrink-0">
              <div className="flex items-center space-x-2">
                <div className="flex-1 relative">
                  <input
                    type="text"
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
                    className="w-full p-3 pr-12 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    disabled={isTyping}
                  />
                  <button
                    onClick={handleVoiceInput}
                    className={`absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded-full transition-colors ${isListening ? 'text-red-500 bg-red-50' : 'text-gray-400 hover:text-gray-600'
                      }`}
                  >
                    {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                  </button>
                </div>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleSendMessage}
                  disabled={!inputText.trim() || isTyping}
                  className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed hover:shadow-lg transition-all"
                >
                  {isTyping ? (
                    <Loader2 className="h-3 w-3 animate-spin" />
                  ) : (
                    <Send className="h-3 w-3" />
                  )}
                </motion.button>

                <div className="flex items-center space-x-2">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setAudioConfig(prev => ({ ...prev, enabled: !prev.enabled }))}
                    className={`p-2 rounded-full flex items-center justify-center ${audioConfig.enabled
                      ? 'bg-green-100 text-green-600'
                      : 'bg-gray-100 text-gray-500'
                      }`}
                  >
                    <Volume2 className="h-4 w-4" />
                  </motion.button>

                  {audioConfig.enabled && (
                    <motion.div
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="flex items-center"
                    >
                      <Select
                        value={audioConfig.voice}
                        onValueChange={(value) => setAudioConfig(prev => ({
                          ...prev,
                          voice: value as "Mary" | "Peter"
                        }))}
                      >
                        <SelectItem value="Mary">–ñ–µ–Ω—Å–∫–∏–π</SelectItem>
                        <SelectItem value="Peter">–ú—É–∂—Å–∫–æ–π</SelectItem>
                      </Select>
                    </motion.div>
                  )}
                </div>
              </div>

              <div className="mt-2 flex items-center justify-center space-x-2 text-xs text-gray-500">
                <motion.div
                  className="w-2 h-2 bg-green-500 rounded-full"
                  animate={{ scale: [1, 1.2, 1] }}
                  transition={{ duration: 2, repeat: Infinity }}
                />
                <span>–û–Ω–ª–∞–π–Ω ‚Ä¢ Powered by AI</span>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default AIAgent;