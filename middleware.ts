import { NextRequest, NextResponse } from 'next/server';
import { jwtVerify } from 'jose';

declare global {
  var cacheCleanupStarted: boolean | undefined;
}

// üöÄ PRODUCTION OPTIMIZATION
const isDev = process.env.NODE_ENV === 'development';
const isVercel = process.env.VERCEL === '1';

// üîß –¢–ò–ü–´ –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
interface AuthResult {
  authenticated: boolean;
  userRole?: string;
  token?: string;
  userId?: string;
  userEmail?: string;
  userName?: string;
}

// üîß ENHANCED CACHING —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π
const CACHE_TTL = isVercel ? 300000 : 60000; // 5 –º–∏–Ω—É—Ç –Ω–∞ Vercel, 1 –º–∏–Ω—É—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
const MAX_CACHE_SIZE = 1000;

// üéØ –°–û–ó–î–ê–ï–ú –ö–≠–®–ò –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –î–ê–ù–ù–´–•
const authCache = new Map<string, { data: AuthResult; timestamp: number }>();
const roleCache = new Map<string, { hasAccess: boolean; timestamp: number }>();
const jwtCache = new Map<string, { payload: any; timestamp: number }>();

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
const cleanCache = (cache: Map<any, any>) => {
  if (cache.size > MAX_CACHE_SIZE) {
    const now = Date.now();
    for (const [key, value] of cache.entries()) {
      if (now - value.timestamp > CACHE_TTL) {
        cache.delete(key);
      }
    }
    // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (cache.size > MAX_CACHE_SIZE) {
      const entries = Array.from(cache.entries());
      entries.sort((a, b) => a[1].timestamp - b[1].timestamp);
      const toDelete = entries.slice(0, Math.floor(cache.size / 2));
      toDelete.forEach(([key]) => cache.delete(key));
    }
  }
};

// üéØ –£–°–ò–õ–ï–ù–ù–ê–Ø –†–û–õ–¨-–ë–ê–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const ROLE_CONFIG = {
  // –ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–æ–ª–µ–π (—á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)
  hierarchy: {
    'super-admin': 0,
    'admin': 1,
    'manager': 2,
    'trainer': 3,
    'member': 4,
    'client': 4,
    'guest': 5
  } as const,

  // –î–∞—à–±–æ—Ä–¥—ã –ø–æ —Ä–æ–ª—è–º
  dashboards: {
    'super-admin': '/admin',
    'admin': '/admin',
    'manager': '/manager-dashboard',
    'trainer': '/trainer-dashboard',
    'member': '/member-dashboard',
    'client': '/member-dashboard',
    'guest': '/'
  } as const,

  // üîß –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
  routePatterns: {
    'super-admin': [
      /^\/admin(\/.*)?$/,
      /^\/manager-dashboard(\/.*)?$/,
      /^\/trainer-dashboard(\/.*)?$/,
      /^\/member-dashboard(\/.*)?$/,
      /^\/system(\/.*)?$/,
      /^\/debug(\/.*)?$/,
      /^\/staff-(.*)?$/,
      /^\/manage-(.*)?$/,
      /^\/training-(.*)?$/,
      /^\/shop(\/.*)?$/,
      /^\/qr-code(\/.*)?$/,
      /^\/memberships(\/.*)?$/,
      /^\/analytics(\/.*)?$/,
      /^\/reports(\/.*)?$/,
      /^\/trainer\/(.*)?$/,
      /^\/trainers(\/.*)?$/
    ],
    'admin': [
      /^\/admin(\/.*)?$/,
      /^\/manager-dashboard(\/.*)?$/,
      /^\/trainer-dashboard(\/.*)?$/,
      /^\/member-dashboard(\/.*)?$/,
      /^\/staff-(.*)?$/,
      /^\/manage-(.*)?$/,
      /^\/training-(.*)?$/,
      /^\/shop(\/.*)?$/,
      /^\/qr-code(\/.*)?$/,
      /^\/memberships(\/.*)?$/,
      /^\/analytics(\/.*)?$/,
      /^\/reports(\/.*)?$/,
      /^\/trainer\/(.*)?$/,  // –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      /^\/trainers(\/.*)?$/
    ],
    'manager': [
      /^\/manager-dashboard(\/.*)?$/,
      /^\/trainer-dashboard(\/.*)?$/,
      /^\/member-dashboard(\/.*)?$/,
      /^\/manage-(.*)?$/,
      /^\/training-(.*)?$/,
      /^\/shop(\/.*)?$/,
      /^\/qr-code(\/.*)?$/,
      /^\/memberships(\/.*)?$/,
      /^\/analytics(\/.*)?$/,
      /^\/trainer\/(.*)?$/,  // –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      /^\/trainers(\/.*)?$/
    ],
    'trainer': [
      /^\/trainer-dashboard(\/.*)?$/,
      /^\/member-dashboard(\/.*)?$/,
      /^\/training-(.*)?$/,
      /^\/schedule(\/.*)?$/,
      /^\/clients(\/.*)?$/,
      /^\/trainer\/(.*)?$/,  // –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      /^\/trainers(\/.*)?$/
    ],
    'member': [
      /^\/member-dashboard(\/.*)?$/,
      /^\/profile(\/.*)?$/,
      /^\/bookings(\/.*)?$/,
      /^\/my-(.*)?$/,
      /^\/shop(\/.*)?$/,
      /^\/qr-code(\/.*)?$/,
      /^\/trainers(\/.*)?$/,
      /^\/trainer\/(.*)?$/,  // –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      /^\/qr-code(\/.*)?$/,
      /^\/setup-face-recognition(\/.*)?$/
    ],
    'client': [
      /^\/member-dashboard(\/.*)?$/,
      /^\/profile(\/.*)?$/,
      /^\/bookings(\/.*)?$/,
      /^\/my-(.*)?$/,
      /^\/shop(\/.*)?$/,
      /^\/qr-code(\/.*)?$/,
      /^\/memberships(\/.*)?$/,
      /^\/trainer\/(.*)?$/,  // –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      /^\/trainers(\/.*)?$/,
      /^\/qr-code(\/.*)?$/,
      /^\/setup-face-recognition(\/.*)?$/
    ],
    'guest': [
      // –ì–æ—Å—Ç–∏ –∏–º–µ—é—Ç –æ—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ –∫ –ø—É–±–ª–∏—á–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
      /^\/$/,
      /^\/about(\/.*)?$/,
      /^\/contact(\/.*)?$/,
      /^\/programs(\/.*)?$/,
      /^\/trainers(\/.*)?$/,
      /^\/trainer\/(.*)?$/ // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    ]
  } as const
};

// üîß –¢–ò–ü –î–õ–Ø –†–û–õ–ï–ô
type UserRole = keyof typeof ROLE_CONFIG.hierarchy;

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ CVE-2025-29927 + Vercel –ø—Ä–æ–±–ª–µ–º
const SECURITY_CHECK = (request: NextRequest): NextResponse | null => {
  const getClientIP = (request: NextRequest): string => {
    const forwarded = request.headers.get('x-forwarded-for');
    const realIP = request.headers.get('x-real-ip');
    const cfIP = request.headers.get('cf-connecting-ip');
    const vercelIP = request.headers.get('x-vercel-forwarded-for');

    if (vercelIP) return vercelIP.split(',')[0].trim();
    if (forwarded) return forwarded.split(',')[0].trim();
    if (realIP) return realIP;
    if (cfIP) return cfIP;
    return 'unknown';
  };

  // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ PREFETCH –ü–†–û–ë–õ–ï–ú VERCEL
  const purpose = request.headers.get('purpose');
  const nextRouterPrefetch = request.headers.get('next-router-prefetch');
  const nextRouterState = request.headers.get('next-router-state-tree');

  if (purpose === 'prefetch' || nextRouterPrefetch || nextRouterState) {
    // –î–ª—è /admin/users —Ä–∞–∑—Ä–µ—à–∞–µ–º prefetch
    if (request.nextUrl.pathname.startsWith('/admin/users')) {
      console.log('üîÑ –†–∞–∑—Ä–µ—à–∞–µ–º prefetch –¥–ª—è /admin/users');
      return NextResponse.next();
    }

    if (isDev) {
      console.log('üîÑ –ë–õ–û–ö–ò–†–û–í–ö–ê PREFETCH –∑–∞–ø—Ä–æ—Å–∞:', request.nextUrl.pathname);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π NextResponse –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 204
    return new NextResponse(null, {
      status: 204,
      headers: {
        'X-Prefetch-Blocked': 'true'
      }
    });
  }

  const subrequestHeader = request.headers.get('x-middleware-subrequest');
  if (subrequestHeader) {
    const clientIP = getClientIP(request);

    if (isDev || process.env.DEBUG_SECURITY === 'true') {
      console.log('üö® –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù EXPLOIT CVE-2025-29927:', {
        ip: clientIP,
        path: request.nextUrl.pathname,
        timestamp: new Date().toISOString(),
        userAgent: request.headers.get('user-agent')?.substring(0, 100)
      });
    }

    return new NextResponse('Forbidden: Security violation detected', {
      status: 403,
      headers: {
        'X-Security-Block': 'CVE-2025-29927-Protection',
        'X-Blocked-IP': clientIP,
        'Cache-Control': 'no-store'
      }
    });
  }

  return null;
};

// üîê –£–õ–£–ß–®–ï–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ cookies –¥–ª—è –≤—Å–µ—Ö —Å—Ä–µ–¥
const getCookieValue = (request: NextRequest, cookieName: string): string | undefined => {
  try {
    // –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
    const cookieValue = request.cookies.get(cookieName)?.value;
    if (cookieValue) {
      return decodeURIComponent(cookieValue);
    }
  } catch (error) {
    if (isDev) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookie ${cookieName} –º–µ—Ç–æ–¥–æ–º 1:`, error);
    }
  }

  try {
    // –ú–µ—Ç–æ–¥ 2: –ß—Ç–µ–Ω–∏–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const cookieHeader = request.headers.get('cookie');
    if (cookieHeader) {
      const cookies = cookieHeader.split(';');
      for (const cookie of cookies) {
        const [key, value] = cookie.trim().split('=');
        if (key === cookieName && value) {
          return decodeURIComponent(value);
        }
      }
    }
  } catch (error) {
    if (isDev) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookie ${cookieName} –º–µ—Ç–æ–¥–æ–º 2:`, error);
    }
  }

  return undefined;
};

// üîß –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –í–ê–õ–ò–î–ù–û–°–¢–ò –†–û–õ–ò
const isValidUserRole = (role: string): role is UserRole => {
  return role in ROLE_CONFIG.hierarchy;
};

// üîß –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –†–û–õ–ò
const normalizeUserRole = (role: string): UserRole => {
  const normalized = role.toLowerCase().replace(/_/g, '-') as UserRole;

  if (isValidUserRole(normalized)) {
    return normalized;
  }

  // Fallback –º–∞–ø–ø–∏–Ω–≥
  const roleMapping: Record<string, UserRole> = {
    'user': 'member',
    'customer': 'client',
    'employee': 'trainer',
    'superadmin': 'super-admin',
    'super_admin': 'super-admin',
    'admin_user': 'admin'
  };

  if (roleMapping[normalized]) {
    return roleMapping[normalized];
  }

  console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: ${role}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'member' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
  return 'member';
};

// üéØ –ú–û–©–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const checkAuthentication = async (request: NextRequest): Promise<AuthResult> => {
  const pathname = request.nextUrl.pathname;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    const sessionId = getCookieValue(request, 'session_id');
    const sessionIdDebug = getCookieValue(request, 'session_id_debug');
    const authToken = getCookieValue(request, 'auth_token');
    const userRoleCookie = getCookieValue(request, 'user_role');

    // üîß –°–û–ó–î–ê–ï–ú –ö–õ–Æ–ß –î–õ–Ø –ö–≠–®–ê
    const cacheKey = `${authToken || 'no-token'}_${sessionId || 'no-session'}_${userRoleCookie || 'no-role'}`;
    
    // üîß –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ò –ò –û–ß–ò–©–ê–ï–ú –ò–•
    const now = Date.now();
    const cachedAuth = authCache.get(cacheKey);
    
    if (cachedAuth && (now - cachedAuth.timestamp) < CACHE_TTL) {
      if (isDev) {
        console.log('‚úÖ Cache hit for auth:', cacheKey.substring(0, 20) + '...');
      }
      return cachedAuth.data;
    }

    // üßπ –û–ß–ò–©–ê–ï–ú –ö–≠–®–ò –ü–ï–†–ï–î –î–û–ë–ê–í–õ–ï–ù–ò–ï–ú –ù–û–í–´–• –î–ê–ù–ù–´–•
    cleanCache(authCache);
    cleanCache(jwtCache);

    // üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
    let result: AuthResult = {
      authenticated: false,
      userRole: undefined,
      token: undefined
    };

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: JWT —Ç–æ–∫–µ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if (authToken) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à JWT
      const cachedJwt = jwtCache.get(authToken);
      
      if (cachedJwt && (now - cachedJwt.timestamp) < CACHE_TTL) {
        if (isDev) {
          console.log('‚úÖ JWT cache hit');
        }
        const payload = cachedJwt.payload;
        const normalizedRole = normalizeUserRole(payload.role as string);
        result = {
          authenticated: true,
          userRole: normalizedRole,
          token: authToken,
          userId: payload.userId as string,
          userEmail: payload.email as string,
          userName: payload.name as string
        };
      } else {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try {
          const secret = new TextEncoder().encode(
            process.env.JWT_SECRET || process.env.NEXT_PUBLIC_JWT_SECRET || 'your-secret-key'
          );

          const { payload } = await jwtVerify(authToken, secret);
          if (payload && payload.userId && payload.email && payload.role) {
            // üîß –ö–≠–®–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ JWT
            jwtCache.set(authToken, {
              payload: payload,
              timestamp: now
            });
            
            const normalizedRole = normalizeUserRole(payload.role as string);
            result = {
              authenticated: true,
              userRole: normalizedRole,
              token: authToken,
              userId: payload.userId as string,
              userEmail: payload.email as string,
              userName: payload.name as string
            };

            console.log('‚úÖ JWT –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è:', payload.email, '—Ä–æ–ª—å:', normalizedRole);
          }
        } catch (error) {
          if (isDev) {
            console.error('üí• JWT validation error:', error);
          }
        }
      }
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–µ—Å—Å–∏–∏ + —Ä–æ–ª—å –∏–∑ cookie
    if (!result.authenticated && (sessionId || sessionIdDebug)) {
      if (userRoleCookie) {
        const normalizedRole = normalizeUserRole(userRoleCookie);
        result = {
          authenticated: true,
          userRole: normalizedRole,
          token: authToken
        };

        console.log('‚úÖ –°–µ—Å—Å–∏—è + —Ä–æ–ª—å –∏–∑ cookie:', normalizedRole);
      }
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–æ–ª—å–∫–æ —Ä–æ–ª—å –∏–∑ cookie (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (!result.authenticated && userRoleCookie && authToken) {
      const normalizedRole = normalizeUserRole(userRoleCookie);
      result = {
        authenticated: true,
        userRole: normalizedRole,
        token: authToken
      };

      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏ –∏–∑ cookie:', normalizedRole);
    }

    // üîß –ö–≠–®–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
    authCache.set(cacheKey, {
      data: result,
      timestamp: now
    });

    return result;

  } catch (error) {
    if (isDev) {
      console.error('üí• Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    }
    return { authenticated: false, userRole: undefined, token: undefined };
  }
};

// üöÄ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ú–ê–†–®–†–£–¢–£ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const checkRouteAccess = (pathname: string, userRole: string): boolean => {
  // üîß –°–û–ó–î–ê–ï–ú –ö–õ–Æ–ß –î–õ–Ø –ö–≠–®–ê –î–û–°–¢–£–ü–ê
  const accessCacheKey = `${pathname}_${userRole}`;
  const now = Date.now();
  
  // üîß –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ò –î–û–°–¢–£–ü–ê
  const cachedAccess = roleCache.get(accessCacheKey);
  
  if (cachedAccess && (now - cachedAccess.timestamp) < CACHE_TTL) {
    if (isDev) {
      console.log('‚úÖ Route access cache hit:', accessCacheKey);
    }
    return cachedAccess.hasAccess;
  }

  // üßπ –û–ß–ò–©–ê–ï–ú –ö–≠–®–ò –î–û–°–¢–£–ü–ê
  cleanCache(roleCache);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–±–∞–≥ –¥–ª—è /admin/users
  if (pathname === '/admin/users' || pathname.startsWith('/admin/users/')) {
    console.log('üîç DEBUG /admin/users:', {
      pathname,
      userRole,
      isValidRole: isValidUserRole(userRole),
      roleLevel: ROLE_CONFIG.hierarchy[userRole as UserRole]
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
  if (!isValidUserRole(userRole)) {
    console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: ${userRole}`);
    return false;
  }

  let hasAccess = false;

  // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
  if (pathname.startsWith('/admin/')) {
    hasAccess = ['admin', 'super-admin'].includes(userRole);
    if (pathname.startsWith('/admin/users')) {
      console.log('üîç /admin/users access check:', { userRole, hasAccess });
    }
  } else if (pathname.startsWith('/manager-') && ['manager', 'admin', 'super-admin'].includes(userRole)) {
    hasAccess = true;
  } else if (pathname.startsWith('/trainer-') && ['trainer', 'manager', 'admin', 'super-admin'].includes(userRole)) {
    hasAccess = true;
  } else if (pathname.startsWith('/member-') && ['member', 'client', 'trainer', 'manager', 'admin', 'super-admin'].includes(userRole)) {
    hasAccess = true;
  } else {
    const roleLevel = ROLE_CONFIG.hierarchy[userRole];

    // –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–æ–ª–∏ –∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –≤—ã—à–µ
    for (const [role, level] of Object.entries(ROLE_CONFIG.hierarchy)) {
      if (level <= roleLevel) {
        const typedRole = role as UserRole;
        const patterns = ROLE_CONFIG.routePatterns[typedRole];
        if (patterns) {
          for (const pattern of patterns) {
            if (pattern.test(pathname)) {
              hasAccess = true;
              break;
            }
          }
          if (hasAccess) break;
        }
      }
    }
  }

  // üîß –ö–≠–®–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê
  roleCache.set(accessCacheKey, {
    hasAccess: hasAccess,
    timestamp: now
  });

  return hasAccess;
};

// üîß –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –í–°–ï–• –ö–≠–®–ï–ô (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
const clearAllCaches = () => {
  authCache.clear();
  roleCache.clear();
  jwtCache.clear();
  console.log('üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
};

// Best practice solution - using a module-level variable instead of global
let cacheCleanupStarted = false;


// üîß –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ï–ô (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const startCacheCleanupJob = () => {
  if (!cacheCleanupStarted) {
    cacheCleanupStarted = true;
    
    setInterval(() => {
      if (isDev) {
        console.log('üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π...');
      }
      cleanCache(authCache);
      cleanCache(roleCache);
      cleanCache(jwtCache);
    }, CACHE_TTL);
  }
};

// üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –ú–ê–†–®–†–£–¢–ê
const getRouteType = (pathname: string, userRole?: string): { type: string; needsAuth: boolean } => {
  let routeType = 'protected';
  let needsAuth = true;

  // üîß –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê - –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞
  if (pathname === '/') {
    routeType = userRole && userRole !== 'guest' ? 'home_authenticated' : 'public';
    needsAuth = false;
  }
  // üîß –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ê–†–®–†–£–¢–´
  else {
    const publicRoutes = new Set([
      '/member-login', '/staff-login', '/register', '/demo', '/setup',
      '/setup-demo-data', '/setup-users', '/create-admin', '/init-super-admin',
      '/unauthorized', '/reset-password', '/forgot-password', '/about',
      '/trainers', '/programs', '/consultation', '/trial-class', '/offline',
      '/test-page', '/test-login', '/test-users', '/debug-auth', '/test-cookies',
      '/create-test-user', '/admin-login', '/clear-cookies', '/make-admin',
      '/create-real-admin', '/debug-dashboard', '/debug-password',
      '/fix-password', '/demo-smart-login', '/test-qr-codes',
      '/password-reset-success', '/mobile-scanner', '/auth/face-auth', '/body-analyze',
    ]);

    if (publicRoutes.has(pathname)) {
      routeType = 'public';
      needsAuth = false;
    }
    // –ü–£–ë–õ–ò–ß–ù–´–ï –ü–†–ï–§–ò–ö–°–´
    else if (pathname.startsWith('/programs/') ||
      pathname.startsWith('/book-')) {
      routeType = 'public';
      needsAuth = false;
    }
    // üîß –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –ü–†–û–§–ò–õ–ï–ô –¢–†–ï–ù–ï–†–û–í
    else if (pathname.startsWith('/trainer/')) {
      routeType = 'trainer_profile';
      needsAuth = true;  // –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }
    // LOGIN –°–¢–†–ê–ù–ò–¶–´
    else if (pathname === '/member-login' || pathname === '/staff-login' || pathname === '/login') {
      routeType = 'login';
      needsAuth = false;
    }
    // –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´
    else {
      needsAuth = true;

      if (pathname.startsWith('/admin')) {
        routeType = 'admin';
      } else if (pathname.startsWith('/manager-')) {
        routeType = 'manager';
      } else if (pathname.startsWith('/trainer-')) {
        routeType = 'trainer';
      } else if (pathname.startsWith('/member-')) {
        routeType = 'member';
      } else if (pathname.startsWith('/shop')) {
        routeType = 'shop';
      } else if (pathname.startsWith('/qr-code')) {
        routeType = 'qr-code';
      } else if (pathname.startsWith('/memberships')) {
        routeType = 'memberships';
      } else {
        routeType = 'protected';
      }
    }
  }

  return { type: routeType, needsAuth };
};

// üîß –°–û–ó–î–ê–ù–ò–ï –ó–ê–©–ò–©–ï–ù–ù–û–ì–û RESPONSE —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
const createAuthenticatedResponse = (
  request: NextRequest,
  authResult: AuthResult
): NextResponse => {
  const response = NextResponse.next();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  response.headers.set('X-User-Role', authResult.userRole || '');
  response.headers.set('X-Authenticated', 'true');

  if (authResult.userId) {
    response.headers.set('X-User-Id', authResult.userId);
  }

  // üîß –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º user_role cookie –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const currentUserRole = getCookieValue(request, 'user_role');
  if (authResult.userRole && currentUserRole !== authResult.userRole) {
    response.cookies.set('user_role', authResult.userRole, {
      httpOnly: false,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
      path: '/'
    });
  }

  // –£—Å–∏–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Vercel –∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (isVercel || request.nextUrl.pathname.startsWith('/admin')) {
    response.headers.set('Cache-Control', 'private, no-store, no-cache, must-revalidate, max-age=0');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');
    response.headers.set('X-Middleware-Cache', 'MISS');
    response.headers.set('Vary', 'Cookie, Authorization');
    response.headers.set('X-Vercel-Cache', 'MISS');
    response.headers.set('CDN-Cache-Control', 'no-store');
  }

  return response;
};

// üìä –£–°–õ–û–í–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const log = (message: string, data?: any) => {
  if (isDev || process.env.DEBUG_MIDDLEWARE === 'true') {
    console.log(message, data || '');
  }
};

export async function middleware(request: NextRequest) {

  const { pathname } = request.nextUrl;

  // üö® –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è)
  const securityBlock = SECURITY_CHECK(request);
  if (securityBlock) return securityBlock;

  if (pathname === '/trainers' || pathname === '/programs') {
    console.log(`‚ö° Fast-track public route: ${pathname}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authResult = await checkAuthentication(request);

    if (authResult.authenticated) {
      // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      return createAuthenticatedResponse(request, authResult);
    }

    // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    const response = NextResponse.next();
    response.headers.set('Cache-Control', 'public, max-age=60, s-maxage=60');
    return response;
  }

  // ‚ö° –ë–´–°–¢–†–´–ô –≤—ã—Ö–æ–¥ –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/favicon.ico') ||
    pathname.startsWith('/static/') ||
    pathname.includes('.') ||
    pathname.startsWith('/api/')
  ) {
    return NextResponse.next();
  }

  log(`üîç Middleware: ${pathname}`);

  // üîê –ü–†–û–í–ï–†–Ø–ï–ú –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ
  const authResult = await checkAuthentication(request);
  log(`üë§ Auth status: ${authResult.authenticated}, Role: ${authResult.userRole || 'none'}`);

  // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
  const { type: routeType, needsAuth } = getRouteType(pathname, authResult.userRole);
  log(`üìç Route type: ${routeType}, Needs auth: ${needsAuth}`);

  // üîß –û–°–û–ë–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ –î–õ–Ø –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  if (pathname === '/' && authResult.authenticated && authResult.userRole) {
    log(`üè† Authenticated user on home page, preserving auth state`);
    return createAuthenticatedResponse(request, authResult);
  }

  // ‚úÖ –ü–£–ë–õ–ò–ß–ù–´–ï –º–∞—Ä—à—Ä—É—Ç—ã
  if (routeType === 'public' && !needsAuth) {
    log(`‚úÖ Public route allowed`);
    // –î–∞–∂–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (authResult.authenticated) {
      return createAuthenticatedResponse(request, authResult);
    }
    return NextResponse.next();
  }

  // üîÑ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï —Å login —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if ((routeType === 'login' || pathname.includes('login')) && authResult.authenticated && authResult.userRole) {
    // üîß –ü–†–û–í–ï–†–Ø–ï–ú REDIRECT –ü–ê–†–ê–ú–ï–¢–†
    const redirectParam = request.nextUrl.searchParams.get('redirect');

    let redirectUrl: string;

    if (redirectParam) {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º redirect URL
      try {
        const decodedRedirect = decodeURIComponent(redirectParam);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
        if (decodedRedirect.startsWith('/') && !decodedRedirect.startsWith('//')) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
          const hasAccess = checkRouteAccess(decodedRedirect, authResult.userRole);
          if (hasAccess) {
            redirectUrl = decodedRedirect;
            log(`‚ÜóÔ∏è Redirecting to requested page: ${redirectUrl}`);
          } else {
            // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∏–¥–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
            redirectUrl = ROLE_CONFIG.dashboards[authResult.userRole as UserRole] || '/';
            log(`‚ÜóÔ∏è No access to ${decodedRedirect}, redirecting to dashboard: ${redirectUrl}`);
          }
        } else {
          // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç redirect - –∏–¥–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
          redirectUrl = ROLE_CONFIG.dashboards[authResult.userRole as UserRole] || '/';
          log(`‚ÜóÔ∏è Invalid redirect format, redirecting to dashboard: ${redirectUrl}`);
        }
      } catch (error) {
        // –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–¥–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
        redirectUrl = ROLE_CONFIG.dashboards[authResult.userRole as UserRole] || '/';
        log(`‚ÜóÔ∏è Redirect decode error, redirecting to dashboard: ${redirectUrl}`);
      }
    } else {
      // –ù–µ—Ç redirect –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –∏–¥–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      redirectUrl = ROLE_CONFIG.dashboards[authResult.userRole as UserRole] || '/';
      log(`‚ÜóÔ∏è No redirect param, redirecting to dashboard: ${redirectUrl}`);
    }

    const response = NextResponse.redirect(new URL(redirectUrl, request.url));
    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');
    response.headers.set('X-Middleware-Cache', 'MISS');
    return response;
  }

  // üîí –ó–ê–©–ò–©–ï–ù–ù–´–ï –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (needsAuth && !authResult.authenticated) {
    let loginUrl = '/';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (pathname.startsWith('/member-') ||
      pathname.startsWith('/my-') ||
      pathname.startsWith('/profile') ||
      pathname.startsWith('/bookings') ||
      pathname.startsWith('/trainer/')) {
      loginUrl = '/member-login';
    } else if (pathname.startsWith('/admin') ||
      pathname.startsWith('/manager-') ||
      pathname.startsWith('/trainer-') ||
      pathname.startsWith('/staff-') ||
      pathname.startsWith('/memberships') ||
      pathname.startsWith('/qr-code') ||
      pathname.startsWith('/shop')) {
      loginUrl = '/staff-login';
    } else {
      loginUrl = '/member-login';
    }

    log(`‚ùå No auth for protected route, redirecting to ${loginUrl}`);

    // üîß –î–û–ë–ê–í–õ–Ø–ï–ú REDIRECT –ü–ê–†–ê–ú–ï–¢–†
    const redirectUrl = `${loginUrl}?redirect=${encodeURIComponent(pathname)}`;

    const response = NextResponse.redirect(new URL(redirectUrl, request.url));
    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');
    response.headers.set('X-Middleware-Cache', 'MISS');
    return response;
  }

  // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–£–ü –ö –ö–û–ù–ö–†–ï–¢–ù–´–ú –ú–ê–†–®–†–£–¢–ê–ú
  if (authResult.authenticated && authResult.userRole && needsAuth) {
    const hasAccess = checkRouteAccess(pathname, authResult.userRole);

    if (!hasAccess) {
      const dashboardUrl = ROLE_CONFIG.dashboards[authResult.userRole as UserRole] || '/unauthorized';
      log(`‚ùå Access denied for role ${authResult.userRole} to ${pathname}, redirecting to ${dashboardUrl}`);

      const response = NextResponse.redirect(new URL(dashboardUrl, request.url));
      response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');
      response.headers.set('X-Middleware-Cache', 'MISS');
      response.headers.set('X-Access-Denied', 'true');
      response.headers.set('X-User-Role', authResult.userRole);
      return response;
    }
  }

  log(`‚úÖ Access granted for role ${authResult.userRole}`);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π response –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  return authResult.authenticated
    ? createAuthenticatedResponse(request, authResult)
    : NextResponse.next();
}

// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è Vercel
export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|public).*)',
  ],
};

if (process.env.NODE_ENV === 'production' || process.env.ENABLE_CACHE_CLEANUP === 'true') {
  startCacheCleanupJob();
  clearAllCaches();
}