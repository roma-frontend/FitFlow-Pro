// hooks/useUsers.ts - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

export interface User {
  id: string;
  email: string;
  role: string;
  name: string;
  createdAt?: string;
  isActive?: boolean;
  photoUrl?: string | null;
  lastLogin?: string | null;
}

// –ö–ª—é—á–∏ –¥–ª—è React Query
const QUERY_KEYS = {
  users: ['users'] as const,
  stats: ['users', 'stats'] as const,
  user: (id: string) => ['users', id] as const,
};

export function useUsers() {
  const queryClient = useQueryClient();

  // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const {
    data: usersResponse,
    isLoading,
    error,
    refetch: refetchUsers
  } = useQuery({
    queryKey: QUERY_KEYS.users,
    queryFn: async () => {
      console.log('üîç useUsers: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const response = await fetch('/api/admin/users', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
      
      if (!response.ok) {
        console.error('‚ùå HTTP error:', response.status, response.statusText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data.success ? '—É—Å–ø–µ—à–Ω–æ' : '—Å –æ—à–∏–±–∫–æ–π');
      
      if (!data.success) {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
      
      return data;
    },
    staleTime: 0, // –î–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
    gcTime: 0, // –ù–µ —Ö—Ä–∞–Ω–∏–º –≤ –∫—ç—à–µ
    retry: (failureCount, error) => {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${failureCount + 1}, –æ—à–∏–±–∫–∞:`, error.message);
      return failureCount < 2; // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
    },
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
    refetchOnWindowFocus: true,
    refetchOnMount: true,
    refetchOnReconnect: true,
  });

  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const {
    data: statsResponse,
    isLoading: statsLoading,
    refetch: refetchStats
  } = useQuery({
    queryKey: QUERY_KEYS.stats,
    queryFn: async () => {
      const response = await fetch('/api/admin/users/stats', {
        credentials: 'include',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache'
        }
      });
      
      if (!response.ok) {
        return null;
      }
      
      const data = await response.json();
      return data.success ? data : null;
    },
    staleTime: 0,
    gcTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    retry: false,
  });

  // –ú—É—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const createUserMutation = useMutation({
    mutationFn: async (userData: any) => {
      console.log('‚ûï useUsers: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      
      const response = await fetch('/api/admin/users', {
        method: 'POST',
        credentials: 'include',
        headers: { 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        },
        body: JSON.stringify(userData)
      });
      
      const data = await response.json();
      
      if (!response.ok || !data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      return data;
    },
    onSuccess: () => {
      console.log('‚úÖ useUsers: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.removeQueries({ queryKey: QUERY_KEYS.users });
      queryClient.removeQueries({ queryKey: QUERY_KEYS.stats });
      refetchUsers();
      refetchStats();
    },
    onError: (error) => {
      console.error('üí• useUsers: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {
      console.log('üîÑ useUsers: –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id, updates);
      
      const response = await fetch(`/api/admin/users?id=${id}`, {
        method: 'PUT',
        credentials: 'include',
        headers: { 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        },
        body: JSON.stringify(updates)
      });
      
      const data = await response.json();
      
      if (!response.ok || !data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      return data;
    },
    onSuccess: () => {
      console.log('‚úÖ useUsers: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.removeQueries({ queryKey: QUERY_KEYS.users });
      refetchUsers();
    },
    onError: (error) => {
      console.error('üí• useUsers: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const deleteUserMutation = useMutation({
    mutationFn: async (id: string) => {
      console.log('üóëÔ∏è useUsers: —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
      
      const response = await fetch(`/api/admin/users?id=${id}`, {
        method: 'DELETE',
        credentials: 'include',
        headers: { 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
      
      const data = await response.json();
      
      if (!response.ok || !data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      return data;
    },
    onSuccess: () => {
      console.log('‚úÖ useUsers: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.removeQueries({ queryKey: QUERY_KEYS.users });
      queryClient.removeQueries({ queryKey: QUERY_KEYS.stats });
      refetchUsers();
      refetchStats();
    },
    onError: (error) => {
      console.error('üí• useUsers: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
  });

  return {
    // –î–∞–Ω–Ω—ã–µ
    users: usersResponse?.users || [],
    stats: statsResponse?.stats || null,
    meta: usersResponse?.meta || null,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading,
    statsLoading,
    isCreating: createUserMutation.isPending,
    isUpdating: updateUserMutation.isPending,
    isDeleting: deleteUserMutation.isPending,
    
    // –û—à–∏–±–∫–∏
    error: error?.message || null,
    createError: createUserMutation.error?.message || null,
    updateError: updateUserMutation.error?.message || null,
    deleteError: deleteUserMutation.error?.message || null,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    createUser: createUserMutation.mutate,
    updateUser: (id: string, updates: any) => 
      updateUserMutation.mutate({ id, updates }),
    deleteUser: deleteUserMutation.mutate,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    refetch: refetchUsers,
    refetchStats,
    
    // –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫
    clearErrors: () => {
      createUserMutation.reset();
      updateUserMutation.reset();
      deleteUserMutation.reset();
    },
    
    // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    canCreate: usersResponse?.canCreate || false,
    userRole: usersResponse?.userRole || 'client',
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    trainers: usersResponse?.trainers || null,
  };
}
