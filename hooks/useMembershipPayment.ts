// hooks/useMembershipPayment.ts
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

interface PaymentData {
    planId: string;
    userId: string;
    userEmail: string;
    userName: string;
    userPhone?: string;
    autoRenew?: boolean;
}

interface PaymentResult {
    clientSecret: string;
    paymentIntentId: string;
    membershipOrderId: string;
    plan: {
        id: string;
        name: string;
        price: number;
        duration: number;
    };
}

interface ConfirmResult {
    success: boolean;
    receipt: any;
    membership: any;
    order: any;
}

export function useMembershipPayment() {
    const [isCreatingPayment, setIsCreatingPayment] = useState(false);
    const [isConfirmingPayment, setIsConfirmingPayment] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const { toast } = useToast();

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    const createPaymentIntent = async (data: PaymentData): Promise<PaymentResult> => {
        setIsCreatingPayment(true);
        setError(null);

        try {
            console.log('üöÄ Creating payment intent for membership:', data);

            const response = await fetch('/api/memberships/create-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...data,
                    id: data.planId,
                }),
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
            }

            console.log('‚úÖ Payment intent created:', result);
            return result;

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
            setError(errorMessage);

            toast({
                variant: "destructive",
                title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞",
                description: errorMessage,
            });

            throw err;
        } finally {
            setIsCreatingPayment(false);
        }
    };

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    const confirmPayment = async (
        paymentIntentId: string,
        membershipOrderId: string
    ): Promise<ConfirmResult> => {
        setIsConfirmingPayment(true);
        setError(null);

        try {
            console.log('üîÑ Confirming membership payment:', { paymentIntentId, membershipOrderId });

            const response = await fetch('/api/memberships/confirm-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    paymentIntentId,
                    membershipOrderId
                }),
            });

            const result = await response.json();

            if (!response.ok || !result.success) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
            }

            console.log('‚úÖ Payment confirmed:', result);

            toast({
                title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                description: "–ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω",
            });

            return result;

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
            setError(errorMessage);

            toast({
                variant: "destructive",
                title: "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞",
                description: errorMessage,
            });

            throw err;
        } finally {
            setIsConfirmingPayment(false);
        }
    };

    // –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    const purchaseMembership = async (
        stripe: any,
        elements: any,
        paymentData: PaymentData
    ): Promise<{ success: boolean; membershipId?: string }> => {
        try {
            // 1. –°–æ–∑–¥–∞–µ–º PaymentIntent
            const paymentResult = await createPaymentIntent(paymentData);

            // 2. –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
            const cardElement = elements.getElement('card');
            if (!cardElement) {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Stripe
            const { error: stripeError } = await stripe.confirmCardPayment(
                paymentResult.clientSecret,
                {
                    payment_method: {
                        card: cardElement,
                        billing_details: {
                            name: paymentData.userName,
                            email: paymentData.userEmail,
                            phone: paymentData.userPhone,
                        },
                    },
                }
            );

            if (stripeError) {
                throw new Error(stripeError.message);
            }

            // 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const confirmResult = await confirmPayment(
                paymentResult.paymentIntentId,
                paymentResult.membershipOrderId
            );

            return {
                success: true,
                membershipId: confirmResult.membership._id
            };

        } catch (err) {
            console.error('‚ùå Purchase failed:', err);
            return { success: false };
        }
    };

    return {
        createPaymentIntent,
        confirmPayment,
        purchaseMembership,
        isCreatingPayment,
        isConfirmingPayment,
        isProcessing: isCreatingPayment || isConfirmingPayment,
        error,
        clearError: () => setError(null),
    };
}

