// hooks/useMemberships.ts
import { useCurrentMembership, useMembershipPlans, useMembershipHistory, useMembershipMutations } from './useMembershipsQuery';
import { useQueryClient } from '@tanstack/react-query';
import type { MembershipFormData } from '@/types/membership';

export function useMemberships(userId?: string) {
  const { membership, isLoading: membershipLoading, error: membershipError, refetch: refetchMembership } = useCurrentMembership(userId);
  const { plans, isLoading: plansLoading, error: plansError, refetch: refetchPlans } = useMembershipPlans();
  const { history, isLoading: historyLoading, error: historyError, refetch: refetchHistory } = useMembershipHistory(userId);
  const mutations = useMembershipMutations();
  const queryClient = useQueryClient();

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const forceRefresh = async () => {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      await queryClient.invalidateQueries({ queryKey: ['membership'] });
      await queryClient.invalidateQueries({ queryKey: ['membership-plans'] });
      await queryClient.invalidateQueries({ queryKey: ['membership-history'] });
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const results = await Promise.allSettled([
        queryClient.refetchQueries({ queryKey: ['membership'] }),
        refetchMembership(),
        refetchPlans(),
        refetchHistory()
      ]);
      
      console.log("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", results);
      
      return results;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
      throw error;
    }
  };

  return {
    // –î–∞–Ω–Ω—ã–µ
    currentMembership: membership,
    plans,
    history,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading: membershipLoading || plansLoading,
    isLoadingMembership: membershipLoading,
    isLoadingPlans: plansLoading,
    isLoadingHistory: historyLoading,
    
    // –û—à–∏–±–∫–∏
    error: membershipError || plansError || historyError,
    membershipError,
    plansError,
    historyError,
    
    // –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    refetch: forceRefresh,
    refetchMembership,
    refetchPlans,
    refetchHistory,
    
    // –ú—É—Ç–∞—Ü–∏–∏
    ...mutations
  };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏
export function useMembershipManagement() {
  const mutations = useMembershipMutations();
  const queryClient = useQueryClient();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
  const invalidateAndRefreshMembership = async () => {
    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤");
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
    await queryClient.invalidateQueries({ queryKey: ['membership'] });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
    await queryClient.refetchQueries({ 
      queryKey: ['membership'], 
      type: 'active' 
    });
    
    console.log("‚úÖ –ö—ç—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω");
  };

  return {
    purchaseMembership: async (data: MembershipFormData): Promise<any> => {
      try {
        console.log("üõí –ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", data);
        const result = await mutations.createMembership(data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        await invalidateAndRefreshMembership();
        
        console.log("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω");
        return result;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:', error);
        throw error;
      }
    },
    
    renewMembership: async (membershipId: string, planId: string): Promise<any> => {
      try {
        console.log("üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", { membershipId, planId });
        const result = await mutations.renewMembership(membershipId, planId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await invalidateAndRefreshMembership();
        
        console.log("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω");
        return result;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:', error);
        throw error;
      }
    },
    
    cancelMembership: async (membershipId: string): Promise<void> => {
      try {
        console.log("üö´ –û—Ç–º–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:", membershipId);
        await mutations.cancelMembership(membershipId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        await invalidateAndRefreshMembership();
        
        console.log("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω");
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:', error);
        throw error;
      }
    },
    
    isProcessing: mutations.isCreating || mutations.isRenewing || mutations.isCancelling,
    isCreating: mutations.isCreating,
    isRenewing: mutations.isRenewing,
    isCancelling: mutations.isCancelling,
    
    createError: mutations.createError,
    renewError: mutations.renewError,
    cancelError: mutations.cancelError,
  };
}