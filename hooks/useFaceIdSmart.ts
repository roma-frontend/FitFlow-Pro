// hooks/useFaceIdSmart.ts - –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Face ID
import { useState, useCallback, useRef, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useRouter } from 'next/navigation';
import { toast } from '@/hooks/use-toast';

interface FaceIdProfile {
  id: string;
  deviceInfo: {
    userAgent: string;
    platform: string;
    screenResolution: string;
  };
  createdAt: string;
  lastUsedAt?: string;
  usageCount: number;
  isActive: boolean;
  confidence: number;
}

interface FaceIdStatus {
  registered: boolean;
  profile?: any;
  user?: any;
  stats?: any;
}

export function useFaceIdSmart() {
  const { user, login } = useAuth();
  const router = useRouter();
  
  const [isScanning, setIsScanning] = useState(false);
  const [isRegistering, setIsRegistering] = useState(false);
  const [faceIdStatus, setFaceIdStatus] = useState<FaceIdStatus | null>(null);
  const [profiles, setProfiles] = useState<FaceIdProfile[]>([]);
  const [currentProfileId, setCurrentProfileId] = useState<string | null>(null);
  
  const scanTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Face ID –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkFaceIdStatus();
    if (user) {
      loadUserProfiles();
    }
  }, [user]);

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Face ID
  const checkFaceIdStatus = async () => {
    try {
      const response = await fetch('/api/auth/face-register', {
        method: 'GET',
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        setFaceIdStatus(data);
        
        if (data.profile?.id) {
          setCurrentProfileId(data.profile.id);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Face ID:', error);
    }
  };

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserProfiles = async () => {
    try {
      const response = await fetch('/api/face-id/manage', {
        method: 'GET',
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        setProfiles(data.profiles || []);
        setCurrentProfileId(data.currentProfileId || null);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
    }
  };

  // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ –∏–∑ –≤–∏–¥–µ–æ (—Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ)
  const generateDescriptorFromVideo = useCallback(async (
    video: HTMLVideoElement
  ): Promise<{ descriptor: number[]; confidence: number } | null> => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç face-api.js –∏–ª–∏ MediaPipe
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    const baseValue = Date.now() % 1000;
    const descriptor = Array.from({ length: 128 }, (_, i) => {
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ "–ª–∏—Ü–∞"
      const angle = (i / 128) * Math.PI * 2;
      const value = Math.sin(angle + baseValue) * 0.5 + 0.5;
      return value + (Math.random() - 0.5) * 0.1; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
    });
    
    // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç "—É—Å–ª–æ–≤–∏–π —Å—ä–µ–º–∫–∏")
    const confidence = 75 + Math.random() * 20; // 75-95%
    
    return { descriptor, confidence };
  }, []);

  // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Face ID
  const registerFaceId = useCallback(async (
    descriptor: number[],
    confidence: number,
    metadata?: any
  ): Promise<boolean> => {
    if (!user) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
      });
      return false;
    }

    setIsRegistering(true);

    try {
      const response = await fetch('/api/auth/face-register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          descriptor,
          confidence,
          metadata: {
            source: 'smart_face_id',
            timestamp: Date.now(),
            ...metadata
          }
        })
      });

      const data = await response.json();

      if (data.success) {
        toast({
          title: "‚úÖ Face ID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
          description: data.message
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ—Ñ–∏–ª–∏
        await checkFaceIdStatus();
        await loadUserProfiles();

        return true;
      } else {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
          description: data.message
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Face ID"
      });
      return false;
    } finally {
      setIsRegistering(false);
    }
  }, [user]);

  // ‚úÖ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Face ID
  const loginWithFaceId = useCallback(async (
    descriptor: number[],
    confidence: number,
    metadata?: any
  ): Promise<boolean> => {
    setIsScanning(true);

    try {
      const response = await fetch('/api/auth/face-login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          descriptor,
          confidence,
          metadata: {
            source: 'smart_face_id',
            timestamp: Date.now(),
            ...metadata
          }
        })
      });

      const data = await response.json();

      if (data.success) {
        toast({
          title: `üéâ ${data.message}`,
          description: `–°—Ö–æ–∂–µ—Å—Ç—å: ${data.metrics?.similarity}%`
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 1000));

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
        router.push(data.dashboardUrl || '/member-dashboard');

        return true;
      } else {
        toast({
          variant: "destructive",
          title: "Face ID –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω",
          description: data.message
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Face ID:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Face ID"
      });
      return false;
    } finally {
      setIsScanning(false);
    }
  }, [router]);

  // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ Face ID –ø—Ä–æ—Ñ–∏–ª—è
  const deleteFaceIdProfile = useCallback(async (profileId: string): Promise<boolean> => {
    try {
      const response = await fetch(`/api/face-id/manage?profileId=${profileId}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      const data = await response.json();

      if (data.success) {
        toast({
          title: "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω",
          description: "Face ID –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
        await loadUserProfiles();
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (profileId === currentProfileId) {
          await checkFaceIdStatus();
        }

        return true;
      } else {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞",
          description: data.message
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
      });
      return false;
    }
  }, [currentProfileId]);

  // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö Face ID –ø—Ä–æ—Ñ–∏–ª–µ–π
  const deleteAllFaceIdProfiles = useCallback(async (): Promise<boolean> => {
    try {
      const response = await fetch('/api/auth/face-register', {
        method: 'DELETE',
        credentials: 'include'
      });

      const data = await response.json();

      if (data.success) {
        toast({
          title: "‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã",
          description: `–£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${data.deactivatedCount}`
        });

        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setProfiles([]);
        setCurrentProfileId(null);
        setFaceIdStatus({ registered: false });

        return true;
      } else {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞",
          description: data.message
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏"
      });
      return false;
    }
  }, []);

  // ‚úÖ –£–º–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∏–¥–µ–æ
  const smartScan = useCallback(async (
    mode: 'login' | 'register',
    video: HTMLVideoElement
  ): Promise<boolean> => {
    if (scanTimeoutRef.current) {
      clearTimeout(scanTimeoutRef.current);
    }

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏–∑ –≤–∏–¥–µ–æ
      const result = await generateDescriptorFromVideo(video);
      
      if (!result) {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞"
        });
        return false;
      }

      const { descriptor, confidence } = result;

      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      if (mode === 'login') {
        return await loginWithFaceId(descriptor, confidence);
      } else {
        return await registerFaceId(descriptor, confidence);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
      });
      return false;
    }
  }, [generateDescriptorFromVideo, loginWithFaceId, registerFaceId]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isScanning,
    isRegistering,
    faceIdStatus,
    profiles,
    currentProfileId,
    isAuthenticated: !!user,
    isFaceIdRegistered: faceIdStatus?.registered || false,
    
    // –ú–µ—Ç–æ–¥—ã
    checkFaceIdStatus,
    loadUserProfiles,
    registerFaceId,
    loginWithFaceId,
    deleteFaceIdProfile,
    deleteAllFaceIdProfiles,
    smartScan,
    generateDescriptorFromVideo,
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user
  };
}