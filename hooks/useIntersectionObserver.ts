// hooks/useIntersectionObserver.ts
'use client';

import { useEffect, useRef, useState, useCallback } from 'react';

interface UseIntersectionObserverOptions {
  threshold?: number | number[];
  root?: Element | null;
  rootMargin?: string;
  triggerOnce?: boolean;
}

// üöÄ –û–°–ù–û–í–ù–û–ô —Ö—É–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
export function useIntersectionObserver<T extends HTMLElement = HTMLElement>(
  options: UseIntersectionObserverOptions = {}
): [React.RefCallback<T>, boolean] {
  const { threshold = 0, root = null, rootMargin = '0px', triggerOnce = true } = options;
  
  const [isIntersecting, setIsIntersecting] = useState(false);
  const [element, setElement] = useState<T | null>(null);
  const observerRef = useRef<IntersectionObserver | null>(null);

  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º RefCallback –≤–º–µ—Å—Ç–æ RefObject –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å null
  const ref = useCallback((node: T | null) => {
    setElement(node);
  }, []);

  useEffect(() => {
    if (!element) return;

    // üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É IntersectionObserver
    if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {
      // Fallback –¥–ª—è SSR –∏ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
      setIsIntersecting(true);
      return;
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π observer
    if (observerRef.current) {
      observerRef.current.disconnect();
    }

    observerRef.current = new IntersectionObserver(
      ([entry]) => {
        setIsIntersecting(entry.isIntersecting);
        
        // –ï—Å–ª–∏ triggerOnce = true –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–ª—Å—è, –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        if (triggerOnce && entry.isIntersecting && observerRef.current) {
          observerRef.current.disconnect();
        }
      },
      { threshold, root, rootMargin }
    );

    observerRef.current.observe(element);

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [element, threshold, root, rootMargin, triggerOnce]);

  return [ref, isIntersecting];
}

// üöÄ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô —Ö—É–∫ —Å useRef (–±–æ–ª–µ–µ –ø—Ä–∏–≤—ã—á–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
export function useInView<T extends HTMLElement = HTMLElement>(
  options: UseIntersectionObserverOptions & { 
    initialInView?: boolean;
    skip?: boolean;
  } = {}
): [React.RefObject<T | null>, boolean] {
  const { 
    threshold = 0, 
    root = null, 
    rootMargin = '0px', 
    triggerOnce = false,
    initialInView = false,
    skip = false
  } = options;
  
  const [isInView, setIsInView] = useState(initialInView);
  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è - T | null —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å null
  const ref = useRef<T | null>(null);
  const observerRef = useRef<IntersectionObserver | null>(null);

  useEffect(() => {
    if (skip) return;

    const element = ref.current;
    if (!element) return;

    if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {
      setIsInView(true);
      return;
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π observer
    if (observerRef.current) {
      observerRef.current.disconnect();
    }

    observerRef.current = new IntersectionObserver(
      ([entry]) => {
        const inView = entry.isIntersecting;
        setIsInView(inView);
        
        if (triggerOnce && inView && observerRef.current) {
          observerRef.current.disconnect();
        }
      },
      { threshold, root, rootMargin }
    );

    observerRef.current.observe(element);

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [threshold, root, rootMargin, triggerOnce, skip]);

  return [ref, isInView];
}

// üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô —Ö—É–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export function useVisibility<T extends HTMLElement = HTMLElement>(
  threshold = 0.1,
  rootMargin = '50px'
): [React.RefCallback<T>, boolean] {
  return useIntersectionObserver<T>({
    threshold,
    rootMargin,
    triggerOnce: true,
  });
}

// üöÄ –•–£–ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
export function useIntersectionObserverMultiple<T extends HTMLElement = HTMLElement>(
  options: UseIntersectionObserverOptions = {}
) {
  const { threshold = 0, root = null, rootMargin = '0px', triggerOnce = true } = options;
  const [intersectingElements, setIntersectingElements] = useState<Set<T>>(new Set());
  const observerRef = useRef<IntersectionObserver | null>(null);
  const elementsRef = useRef<Map<T, boolean>>(new Map());

  const observe = useCallback((element: T | null) => {
    if (!element || elementsRef.current.has(element)) return;

    if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {
      setIntersectingElements(prev => new Set([...prev, element]));
      return;
    }

    if (!observerRef.current) {
      observerRef.current = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const target = entry.target as T;
            setIntersectingElements(prev => {
              const newSet = new Set(prev);
              if (entry.isIntersecting) {
                newSet.add(target);
                if (triggerOnce && observerRef.current) {
                  observerRef.current.unobserve(target);
                  elementsRef.current.delete(target);
                }
              } else {
                newSet.delete(target);
              }
              return newSet;
            });
          });
        },
        { threshold, root, rootMargin }
      );
    }

    elementsRef.current.set(element, true);
    observerRef.current.observe(element);
  }, [threshold, root, rootMargin, triggerOnce]);

  const unobserve = useCallback((element: T) => {
    if (observerRef.current && element) {
      observerRef.current.unobserve(element);
      elementsRef.current.delete(element);
      setIntersectingElements(prev => {
        const newSet = new Set(prev);
        newSet.delete(element);
        return newSet;
      });
    }
  }, []);

  useEffect(() => {
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, []);

  return { observe, unobserve, intersectingElements };
}
