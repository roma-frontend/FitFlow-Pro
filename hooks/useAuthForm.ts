// hooks/useAuthForm.ts
"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { validateEmailFormat, validateName, validatePassword } from "@/utils/authValidation";

interface ValidationState {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
}

interface FormData {
  email: string;
  password: string;
  name: string;
  phone: string;
}

export function useAuthForm() {
  const [isLogin, setIsLogin] = useState<boolean>(true);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");
  const [isRedirecting, setIsRedirecting] = useState<boolean>(false);
  
  const [registrationSuccess, setRegistrationSuccess] = useState<boolean>(false);
  const [registrationEmail, setRegistrationEmail] = useState<string>("");
  const [emailValid, setEmailValid] = useState<boolean>(false);

  const [formData, setFormData] = useState<FormData>({
    email: "",
    password: "",
    name: "",
    phone: "",
  });
  
  const [validationStates, setValidationStates] = useState<
    Record<string, ValidationState>
  >({});
  const [isValidating, setIsValidating] = useState<boolean>(false);

  const { toast } = useToast();
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // üîß –ü–û–õ–£–ß–ê–ï–ú REDIRECT –ü–ê–†–ê–ú–ï–¢–†
  const redirectParam = searchParams.get('redirect');
  
  const { login: authLogin, user: authUser, loading: authLoading } = useAuth();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (isLogin) {
      setFormData((prev) => ({
        email: prev.email,
        password: prev.password,
        name: "",
        phone: "",
      }));
      setRegistrationSuccess(false);
      setRegistrationEmail("");
    } else {
      setFormData((prev) => ({
        email: prev.email,
        password: "",
        name: "",
        phone: "",
      }));
    }
    setError("");
  }, [isLogin]);

  useEffect(() => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ member, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º redirect
    if (!authLoading && authUser && authUser.role === "member") {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º redirect:", redirectParam);
      setIsRedirecting(true);
      
      let targetUrl = "/member-dashboard";
      
      if (redirectParam) {
        try {
          const decodedRedirect = decodeURIComponent(redirectParam);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å
          if (decodedRedirect.startsWith('/') && !decodedRedirect.startsWith('//')) {
            targetUrl = decodedRedirect;
            console.log("üéØ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:", targetUrl);
          } else {
            console.warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥");
          }
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è redirect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—à–±–æ—Ä–¥");
        }
      }
      
      router.replace(targetUrl);
    }
  }, [authUser, authLoading, router, redirectParam]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email —Å debounce
  useEffect(() => {
    if (!formData.email) {
      setEmailValid(false);
      setValidationStates((prev) => {
        const newState = { ...prev };
        delete newState.email;
        return newState;
      });
      return;
    }

    const timeoutId = setTimeout(() => {
      try {
        setIsValidating(true);
        const validation = validateEmailFormat(formData.email);
        setEmailValid(validation.isValid);

        setValidationStates((prev) => ({
          ...prev,
          email: validation,
        }));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email:", error);
        setEmailValid(false);
        setValidationStates((prev) => ({
          ...prev,
          email: {
            isValid: false,
            errors: ["–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email"],
          },
        }));
      } finally {
        setIsValidating(false);
      }
    }, 300);

    return () => clearTimeout(timeoutId);
  }, [formData.email]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  useEffect(() => {
    if (!isLogin && formData.name) {
      const timeoutId = setTimeout(() => {
        const validation = validateName(formData.name);
        setValidationStates((prev) => ({
          ...prev,
          name: validation,
        }));
      }, 300);

      return () => clearTimeout(timeoutId);
    } else if (isLogin) {
      setValidationStates((prev) => {
        const newState = { ...prev };
        delete newState.name;
        return newState;
      });
    }
  }, [formData.name, isLogin]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  useEffect(() => {
    if (formData.password) {
      const timeoutId = setTimeout(() => {
        const validation = validatePassword(formData.password, isLogin);
        setValidationStates((prev) => ({
          ...prev,
          password: validation,
        }));
      }, 300);

      return () => clearTimeout(timeoutId);
    } else {
      setValidationStates((prev) => {
        const newState = { ...prev };
        delete newState.password;
        return newState;
      });
    }
  }, [formData.password, isLogin]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  const isFormReady = useMemo<boolean>(() => {
    if (isLogin) {
      return Boolean(formData.email && formData.password && emailValid);
    }

    const nameValid = Boolean(formData.name && formData.name.length >= 2);
    const passwordValid = Boolean(formData.password && formData.password.length >= 6);
    return Boolean(nameValid && formData.email && passwordValid && emailValid);
  }, [isLogin, formData, emailValid]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleFieldChange = useCallback(
    (fieldName: keyof FormData, value: string) => {
      setFormData((prev) => ({ ...prev, [fieldName]: value }));
      if (error) setError("");
    },
    [error]
  );

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è handleSubmit –±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ redirect
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!isFormReady || loading || isValidating || isRedirecting) return;

    setLoading(true);
    setError("");

    try {
      const emailValidation = validateEmailFormat(formData.email);
      if (!emailValidation.isValid) {
        setError(`–û—à–∏–±–∫–∞ email: ${emailValidation.errors.join(", ")}`);
        setLoading(false);
        return;
      }

      if (isLogin) {
        console.log("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º login –∏–∑ useAuth –¥–ª—è –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å redirect:", redirectParam);
        
        const success = await authLogin(
          formData.email.trim().toLowerCase(),
          formData.password,
          redirectParam || undefined
        );

        if (success) {
          console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ useAuth - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
          
          // üéâ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
          sessionStorage.setItem('show_welcome_toast', 'true');
          sessionStorage.setItem('welcome_user_role', 'member');
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è UI
          setIsRedirecting(true);
          
          // üîß –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ï–ï –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï
          // useAuth —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª redirect –∏ –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
          // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º router.replace() –∑–¥–µ—Å—å!
          
          return { 
            success: true,
            message: "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
          };
        } else {
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API
        const endpoint = "/api/auth/member-register";
        const payload = {
          name: formData.name.trim(),
          email: formData.email.trim().toLowerCase(),
          password: formData.password,
          phone: formData.phone.trim() || undefined,
        };

        console.log("üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API:", endpoint);

        const response = await fetch(endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        const data = await response.json();

        if (response.ok && data.success) {
          console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
          
          setRegistrationSuccess(true);
          setRegistrationEmail(formData.email);
          
          toast({
            title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
            description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞",
          });
          
          return { success: true };
        } else {
          throw new Error(data.error || `–û—à–∏–±–∫–∞ ${response.status}`);
        }
      }
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞:", error);
      const errorMessage =
        error instanceof Error
          ? error.message
          : "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é";
      setError(errorMessage);
      setIsRedirecting(false); // üîß –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: errorMessage,
      });
      
      return { success: false, error: errorMessage };
    } finally {
      if (!isLogin) {
        setLoading(false);
      }
      // –î–ª—è –≤—Ö–æ–¥–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º loading —Å—Ä–∞–∑—É, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      // loading –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }
  };

  const toggleMode = useCallback(() => {
    setIsLogin((prev) => !prev);
    setError("");
    setRegistrationSuccess(false);
    setRegistrationEmail("");
  }, []);

  const fillFormData = useCallback((data: FormData) => {
    setFormData(data);
  }, []);

  const clearForm = useCallback(() => {
    setFormData({
      email: "",
      password: "",
      name: "",
      phone: "",
    });
    setEmailValid(false);
    setValidationStates({});
    setRegistrationSuccess(false);
    setRegistrationEmail("");
  }, []);

  const resetRegistrationSuccess = useCallback(() => {
    setRegistrationSuccess(false);
    setRegistrationEmail("");
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLogin: Boolean(isLogin),
    loading: Boolean(loading || authLoading || isRedirecting),
    error,
    emailValid: Boolean(emailValid),
    formData,
    validationStates,
    isValidating: Boolean(isValidating),
    isFormReady: Boolean(isFormReady),
    isRedirecting: Boolean(isRedirecting),
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registrationSuccess: Boolean(registrationSuccess),
    registrationEmail,

    // –î–µ–π—Å—Ç–≤–∏—è
    handleFieldChange,
    handleSubmit,
    toggleMode,
    fillFormData,
    clearForm,
    resetRegistrationSuccess,
    setRegistrationSuccess,
    
    redirectParam,
  };
}