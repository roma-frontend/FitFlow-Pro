// hooks/useCloudinaryUpload.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
'use client';

import { useState } from 'react';

interface UploadResult {
  url: string;
  data: {
    fileName: string;
    originalName: string;
    size: number;
    type: string;
    url: string;
    uploadedAt: string;
    uploadedBy: string;
    cloudinaryData: {
      publicId: string;
      width: number;
      height: number;
      format: string;
      bytes: number;
    };
  };
}

interface DeleteResult {
  success: boolean;
  message: string;
  data?: {
    url: string;
    publicId: string;
    deletedAt: string;
    deletedBy: string;
  };
}

export function useCloudinaryUpload() {
  const [isUploading, setIsUploading] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const upload = async (
    file: File, 
    options: { 
      folder?: string; 
      uploadPreset?: string; 
      replaceUrl?: string; // URL —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å (–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π)
    } = {}
  ): Promise<string> => {
    setIsUploading(true);
    setError(null);

    try {
      console.log('üîÑ useCloudinaryUpload: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞', {
        name: file.name,
        size: file.size,
        type: file.type,
        options
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (!file.type.startsWith('image/')) {
        throw new Error('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      if (file.size > 10 * 1024 * 1024) {
        throw new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      }

      const formData = new FormData();
      formData.append('file', file);
      formData.append('type', 'profile');
      formData.append('uploadTo', 'cloudinary');

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (options.folder) {
        formData.append('folder', options.folder);
      }
      if (options.uploadPreset) {
        formData.append('uploadPreset', options.uploadPreset);
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/upload...');

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', errorData);
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result: { success: boolean; url: string; data: UploadResult['data']; error?: string } = await response.json();
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', result);

      if (result.success && result.url) {
        console.log('‚úÖ useCloudinaryUpload: —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', result.url);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL –¥–ª—è –∑–∞–º–µ–Ω—ã, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        if (options.replaceUrl && options.replaceUrl !== result.url) {
          console.log('üîÑ –£–¥–∞–ª—è–µ–º –∑–∞–º–µ–Ω—è–µ–º—ã–π —Ñ–∞–π–ª:', options.replaceUrl);
          try {
            await deleteImage(options.replaceUrl);
            console.log('‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
          } catch (deleteError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª:', deleteError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å
          }
        }

        return result.url;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }
    } catch (err: any) {
      console.error('‚ùå useCloudinaryUpload: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ', err);
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsUploading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const deleteImage = async (imageUrl: string): Promise<DeleteResult> => {
    setIsDeleting(true);
    setError(null);

    try {
      console.log('üóëÔ∏è useCloudinaryUpload: —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª', imageUrl);

      if (!imageUrl) {
        throw new Error('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
      }

      if (!imageUrl.includes('cloudinary.com')) {
        console.log('‚ÑπÔ∏è –§–∞–π–ª –Ω–µ –∏–∑ Cloudinary, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ');
        return {
          success: true,
          message: '–§–∞–π–ª –Ω–µ –∏–∑ Cloudinary, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
        };
      }

      const response = await fetch(`/api/upload/delete?url=${encodeURIComponent(imageUrl)}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', errorData);
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result: DeleteResult = await response.json();
      console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:', result);

      if (result.success) {
        console.log('‚úÖ useCloudinaryUpload: —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        return result;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
        throw new Error(result.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
      }
    } catch (err: any) {
      console.error('‚ùå useCloudinaryUpload: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', err);
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setIsDeleting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞ (–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ + —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ)
  const replaceImage = async (
    newFile: File,
    oldImageUrl: string,
    options: { folder?: string; uploadPreset?: string } = {}
  ): Promise<string> => {
    console.log('üîÑ useCloudinaryUpload: –∑–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
      oldUrl: oldImageUrl,
      newFile: newFile.name
    });

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º URL –¥–ª—è –∑–∞–º–µ–Ω—ã
      const newUrl = await upload(newFile, {
        ...options,
        replaceUrl: oldImageUrl
      });

      console.log('‚úÖ useCloudinaryUpload: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ', {
        oldUrl: oldImageUrl,
        newUrl: newUrl
      });

      return newUrl;
    } catch (error) {
      console.error('‚ùå useCloudinaryUpload: –æ—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
  const clearError = () => {
    setError(null);
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL Cloudinary URL
  const isCloudinaryUrl = (url: string): boolean => {
    return Boolean(url && url.includes('cloudinary.com'));
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é URL —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
  const getPreviewUrl = (url: string, transformations: string = 'w_150,h_150,c_fill'): string => {
    if (!isCloudinaryUrl(url)) {
      return url;
    }

    try {
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Cloudinary URL
      // –ü—Ä–∏–º–µ—Ä: https://res.cloudinary.com/cloud/image/upload/v123/folder/image.jpg
      // –†–µ–∑—É–ª—å—Ç–∞—Ç: https://res.cloudinary.com/cloud/image/upload/w_150,h_150,c_fill/v123/folder/image.jpg
      
      const uploadIndex = url.indexOf('/upload/');
      if (uploadIndex !== -1) {
        const beforeUpload = url.substring(0, uploadIndex + 8); // –≤–∫–ª—é—á–∞—è '/upload/'
        const afterUpload = url.substring(uploadIndex + 8);
        return `${beforeUpload}${transformations}/${afterUpload}`;
      }
      
      return url;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é URL:', error);
      return url;
    }
  };

  // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
  const validateFile = (file: File): { isValid: boolean; error?: string } => {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    const maxSize = 10 * 1024 * 1024; // 10MB

    if (!allowedTypes.includes(file.type)) {
      return {
        isValid: false,
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${allowedTypes.map(t => t.split('/')[1].toUpperCase()).join(', ')}`
      };
    }

    if (file.size > maxSize) {
      return {
        isValid: false,
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB'
      };
    }

    return { isValid: true };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  const getFileInfo = (file: File) => {
    return {
      name: file.name,
      size: file.size,
      type: file.type,
      sizeFormatted: formatFileSize(file.size),
      extension: file.name.split('.').pop()?.toLowerCase() || ''
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è public_id –∏–∑ Cloudinary URL
  const extractPublicId = (url: string): string | null => {
    if (!isCloudinaryUrl(url)) {
      return null;
    }

    try {
      const cloudinaryPattern = /cloudinary\.com\/[^\/]+\/image\/upload\/(?:v\d+\/)?(.+?)(?:\.[^.]+)?$/;
      const match = url.match(cloudinaryPattern);
      
      if (match && match[1]) {
        return match[1];
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è public_id:', error);
      return null;
    }
  };

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    upload,
    deleteImage,
    replaceImage,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isUploading,
    isDeleting,
    isProcessing: isUploading || isDeleting,
    error,

    // –£—Ç–∏–ª–∏—Ç—ã
    clearError,
    isCloudinaryUrl,
    getPreviewUrl,
    validateFile,
    getFileInfo,
    formatFileSize,
    extractPublicId,

    // –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    delete: deleteImage,
    replace: replaceImage,
  };
}

// ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´

export interface CloudinaryUploadOptions {
  folder?: string;
  uploadPreset?: string;
  replaceUrl?: string;
  transformations?: string;
}

export interface FileValidation {
  isValid: boolean;
  error?: string;
}

export interface FileInfo {
  name: string;
  size: number;
  type: string;
  sizeFormatted: string;
  extension: string;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export type { UploadResult, DeleteResult };

// ‚úÖ –≠–ö–°–ü–û–†–¢ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
export default useCloudinaryUpload;