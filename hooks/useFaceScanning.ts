// hooks/useFaceScanning.ts - –£–º–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏
"use client";

import { useCallback, useEffect, useRef } from 'react';
import { toast } from '@/hooks/use-toast';
import {
  FaceAuthMode,
  SwitchModeType,
  FaceDetectionData,
  BoundingBox,
  Landmark,
  Detection
} from '@/types/face-auth.types';
import { useFaceAuthContext } from '@/components/auth/face-auth/FaceAuthProvider';
import {
  createBoundingBox,
  createFaceDetectionData,
  generateRandomLandmarks,
  calculateDetectionQuality
} from '@/utils/faceAuthUtils';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/useAuth';

interface UseFaceScanningProps {
  mode: FaceAuthMode;
  viewMode: SwitchModeType;
  onSuccess: (userData: any) => void;
  onFaceDetected?: (data: FaceDetectionData) => void;
}

export const useFaceScanning = ({ mode, viewMode, onSuccess, onFaceDetected }: UseFaceScanningProps) => {
  const { state, dispatch, actions } = useFaceAuthContext();
  const { user } = useAuth();
  const router = useRouter();
  
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const detectionIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const isActiveRef = useRef(false);
  const videoRef = useRef<HTMLVideoElement | null>(null);

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const handleAuthSuccess = useCallback((userData: any) => {
    console.log('üéâ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:', userData);
    
    if (userData.action === "face_login_success") {
      toast({
        title: "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        description: `–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ Face ID`,
      });

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      setTimeout(() => {
        router.push(userData.dashboardUrl || "/member-dashboard");
      }, 1000);
    } else if (userData.action === "face_id_registered") {
      toast({
        title: "‚úÖ Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
        description: userData.message || "Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
      });

      // –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (user) {
        setTimeout(() => {
          router.push("/member-dashboard");
        }, 1500);
      }
    } else {
      onSuccess(userData);
    }
  }, [onSuccess, router, user]);

  // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ –∏–∑ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
  const generateDescriptorFromVideo = useCallback(async (): Promise<{
    descriptor: number[];
    confidence: number;
  } | null> => {
    if (!videoRef.current) return null;

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç face-api.js –∏–ª–∏ MediaPipe
      // –°–µ–π—á–∞—Å —Å–∏–º—É–ª–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
      
      const video = videoRef.current;
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth || 640;
      canvas.height = video.videoHeight || 480;
      
      const ctx = canvas.getContext('2d');
      if (!ctx) return null;
      
      // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const pixels = imageData.data;
      
      // –°–æ–∑–¥–∞–µ–º "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π" –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–∫—Å–µ–ª–µ–π
      const descriptor: number[] = [];
      const step = Math.floor(pixels.length / 128 / 4); // 128 –∑–Ω–∞—á–µ–Ω–∏–π
      
      for (let i = 0; i < 128; i++) {
        const idx = i * step * 4;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º RGB –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        const r = pixels[idx] || 0;
        const g = pixels[idx + 1] || 0;
        const b = pixels[idx + 2] || 0;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
        const value = ((r + g + b) / 3) / 255;
        descriptor.push(value + (Math.random() - 0.5) * 0.1); // –ù–µ–±–æ–ª—å—à–æ–π —à—É–º
      }
      
      // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
      const brightness = descriptor.reduce((sum, val) => sum + val, 0) / descriptor.length;
      const confidence = 70 + brightness * 20 + Math.random() * 10; // 70-100%
      
      return {
        descriptor,
        confidence: Math.min(100, Math.max(70, confidence))
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞:', error);
      return null;
    }
  }, []);

  // ‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const simulateFaceDetection = useCallback(() => {
    if (!state.isScanning || !isActiveRef.current) return;

    if (detectionIntervalRef.current) {
      clearInterval(detectionIntervalRef.current);
    }

    console.log('üéØ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–∞...');

    detectionIntervalRef.current = setInterval(() => {
      if (!state.isScanning || !isActiveRef.current) {
        if (detectionIntervalRef.current) {
          clearInterval(detectionIntervalRef.current);
          detectionIntervalRef.current = null;
        }
        return;
      }

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –≤ –∫–∞–¥—Ä–µ
      const time = Date.now() / 1000;
      const centerX = 320 + Math.sin(time) * 20;
      const centerY = 240 + Math.cos(time * 0.7) * 15;
      const faceWidth = 180 + Math.sin(time * 1.2) * 10;
      const faceHeight = 220 + Math.cos(time * 0.9) * 10;

      const boundingBox = createBoundingBox(
        centerX - faceWidth / 2,
        centerY - faceHeight / 2,
        faceWidth,
        faceHeight
      );

      const landmarks = generateRandomLandmarks(boundingBox);
      const quality = calculateDetectionQuality(boundingBox, landmarks);

      actions.setFaceDetection({
        detected: true,
        boundingBox,
        landmarks,
        quality
      });
    }, 100); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100ms

    return () => {
      if (detectionIntervalRef.current) {
        clearInterval(detectionIntervalRef.current);
        detectionIntervalRef.current = null;
      }
    };
  }, [state.isScanning, actions]);

  // ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const runScanningSteps = useCallback(async () => {
    if (viewMode !== "modern" || !isActiveRef.current) return;

    console.log('üìä –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');

    const steps = [
      { stage: 'detecting' as const, duration: 1000, message: '–ü–æ–∏—Å–∫ –ª–∏—Ü–∞...' },
      { stage: 'analyzing' as const, duration: 2000, message: '–ê–Ω–∞–ª–∏–∑ –±–∏–æ–º–µ—Ç—Ä–∏–∏...' },
      { stage: 'processing' as const, duration: 1500, message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...' }
    ];

    for (const step of steps) {
      if (!isActiveRef.current) break;

      const currentProgress = { stage: step.stage, progress: 0, countdown: 0 };
      dispatch({ type: 'SET_SCAN_PROGRESS', payload: currentProgress });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (step.message) {
        toast({
          description: step.message,
          duration: step.duration
        });
      }

      const startTime = Date.now();
      
      await new Promise<void>((resolve) => {
        const progressInterval = setInterval(() => {
          if (!isActiveRef.current) {
            clearInterval(progressInterval);
            resolve();
            return;
          }

          const elapsed = Date.now() - startTime;
          const progress = Math.min((elapsed / step.duration) * 100, 100);
          
          dispatch({ 
            type: 'SET_SCAN_PROGRESS', 
            payload: { ...currentProgress, progress } 
          });

          if (progress >= 100) {
            clearInterval(progressInterval);
            resolve();
          }
        }, 50);
      });
    }

    if (isActiveRef.current) {
      dispatch({ type: 'SET_SCAN_PROGRESS', payload: { stage: 'complete', progress: 100, countdown: 0 } });
    }
  }, [viewMode, dispatch]);

  // ‚úÖ –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const startScanning = useCallback(async () => {
    if (isActiveRef.current) {
      console.log('‚ö†Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (mode === "register" && !user) {
      toast({
        variant: "destructive",
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID"
      });
      return;
    }

    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...', { mode, viewMode });
      isActiveRef.current = true;

      actions.startScanning();

      if (mode === "register") {
        actions.setRegistering(true);
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—É
      const videoElements = document.getElementsByTagName('video');
      if (videoElements.length > 0) {
        videoRef.current = videoElements[0];
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 500));

      if (!isActiveRef.current) return;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      if (viewMode === "modern") {
        dispatch({ type: 'SET_SCAN_PROGRESS', payload: { stage: 'initializing', progress: 0, countdown: 3 } });
        await runScanningSteps();
      }

      if (!isActiveRef.current) return;

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–µ—Ç–µ–∫—Ü–∏–∏
      const cleanupDetection = simulateFaceDetection();

      // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const scanDuration = mode === "register" ? 4000 : 3000;

      timeoutRef.current = setTimeout(async () => {
        if (!isActiveRef.current) return;

        console.log('‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏–∑ –≤–∏–¥–µ–æ
        const descriptorData = await generateDescriptorFromVideo();
        
        if (!descriptorData) {
          toast({
            variant: "destructive",
            title: "–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–º–µ—Ä—É."
          });
          
          if (viewMode === "modern") {
            dispatch({ type: 'SET_SCAN_PROGRESS', payload: { stage: 'failed', progress: 0, countdown: 0 } });
          }
          
          actions.stopScanning();
          actions.setRegistering(false);
          isActiveRef.current = false;
          return;
        }

        const { descriptor, confidence } = descriptorData;

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
        const boundingBox = state.faceDetection.boundingBox || createBoundingBox(120, 120, 280, 280);
        const faceDetectionData = createFaceDetectionData(
          new Float32Array(descriptor),
          confidence,
          boundingBox
        );

        actions.setFaceData(faceDetectionData);
        dispatch({ type: 'INCREMENT_SCAN_COUNT' });
        dispatch({ type: 'SET_LAST_SCAN_TIME', payload: new Date() });

        if (onFaceDetected) {
          onFaceDetected(faceDetectionData);
        }

        // API –≤—ã–∑–æ–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (mode === "register") {
          try {
            console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Face ID...');
            
            const response = await fetch("/api/auth/face-register", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              credentials: "include",
              body: JSON.stringify({
                descriptor,
                confidence,
                metadata: {
                  source: "face_auth_component",
                  viewMode,
                  timestamp: Date.now()
                }
              })
            });

            const result = await response.json();
            
            if (result.success) {
              actions.setAuthStatus({
                authenticated: true,
                user: result.user,
                loading: false
              });
              
              handleAuthSuccess({
                authenticated: true,
                action: "face_id_registered",
                message: result.message,
                user: result.user,
                profileId: result.profileId
              });
            } else {
              throw new Error(result.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID:", error);
            toast({
              variant: "destructive",
              title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
              description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Face ID"
            });
          } finally {
            actions.setRegistering(false);
          }
        } else if (mode === "login") {
          try {
            console.log('üîê –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Face ID...');
            
            const response = await fetch("/api/auth/face-login", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              credentials: "include",
              body: JSON.stringify({
                descriptor,
                confidence,
                metadata: {
                  source: "face_auth_component",
                  viewMode,
                  timestamp: Date.now()
                }
              })
            });

            const result = await response.json();
            
            if (result.success) {
              actions.setAuthStatus({
                authenticated: true,
                user: result.user,
                loading: false
              });

              handleAuthSuccess({
                authenticated: true,
                action: "face_login_success",
                user: result.user,
                dashboardUrl: result.dashboardUrl,
                metrics: result.metrics
              });
            } else {
              throw new Error(result.message || "Face ID –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω");
            }
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ Face ID –≤—Ö–æ–¥–∞:", error);
            toast({
              variant: "destructive",
              title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
              description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Face ID"
            });
          }
        }

        // –û—á–∏—Å—Ç–∫–∞
        if (cleanupDetection) {
          cleanupDetection();
        }
        
        actions.stopScanning();
        isActiveRef.current = false;
      }, scanDuration);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
      });
      
      actions.stopScanning();
      actions.setRegistering(false);
      isActiveRef.current = false;
    }
  }, [mode, viewMode, user, actions, dispatch, simulateFaceDetection, runScanningSteps, generateDescriptorFromVideo, handleAuthSuccess, onFaceDetected, state.faceDetection.boundingBox]);

  // ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const stopScanning = useCallback(() => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    isActiveRef.current = false;
    videoRef.current = null;

    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }

    if (detectionIntervalRef.current) {
      clearInterval(detectionIntervalRef.current);
      detectionIntervalRef.current = null;
    }

    actions.stopScanning();
    actions.setRegistering(false);

    if (viewMode === "modern") {
      dispatch({ type: 'SET_SCAN_PROGRESS', payload: { stage: 'initializing', progress: 0, countdown: 3 } });
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    actions.setFaceDetection({
      detected: false,
      boundingBox: null,
      landmarks: [],
      quality: { lighting: 0, stability: 0, clarity: 0 }
    });
  }, [actions, dispatch, viewMode]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('üßπ Cleanup useFaceScanning');
      isActiveRef.current = false;
      videoRef.current = null;
      
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      if (detectionIntervalRef.current) {
        clearInterval(detectionIntervalRef.current);
      }
    };
  }, []);

  return {
    startScanning,
    stopScanning,
    isScanning: state.isScanning,
    isRegistering: state.isRegistering,
    authStatus: state.authStatus,
    faceDetection: state.faceDetection,
    scanProgress: state.scanProgress,
    faceData: state.faceData
  };
};