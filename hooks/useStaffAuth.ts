// hooks/useStaffAuth.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";

interface StaffLoginResult {
  success: boolean;
  userRole?: string;
  userName?: string;
  dashboardUrl?: string;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ store
function safeShowLoader(type: string, props: any) {
  try {
    if (typeof window !== 'undefined') {
      const { useLoaderStore } = require('@/stores/loaderStore');
      const store = useLoaderStore.getState();
      store.showLoader(type, props);
    }
  } catch (error) {
    console.error('‚ùå safeShowLoader error:', error);
  }
}

function safeHideLoader() {
  try {
    if (typeof window !== 'undefined') {
      const { useLoaderStore } = require('@/stores/loaderStore');
      const store = useLoaderStore.getState();
      store.hideLoader();
    }
  } catch (error) {
    console.error('‚ùå safeHideLoader error:', error);
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
function getUrlParams(): URLSearchParams | null {
  if (typeof window === 'undefined') return null;
  try {
    return new URLSearchParams(window.location.search);
  } catch (error) {
    console.error('Error parsing URL params:', error);
    return null;
  }
}

export function useStaffAuth() {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [showForgotPassword, setShowForgotPassword] = useState<boolean>(false);
  const [resetEmail, setResetEmail] = useState<string>("");
  const [resetSent, setResetSent] = useState<boolean>(false);
  const [redirectPath, setRedirectPath] = useState<string | null>(null);

  const { toast } = useToast();
  const router = useRouter();

  // –ü–æ–ª—É—á–∞–µ–º redirect –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const params = getUrlParams();
      const redirect = params?.get("redirect") || null;
      setRedirectPath(redirect);
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const storedUser = localStorage.getItem('auth_user');
        const storedToken = localStorage.getItem('auth_token');

        if (storedUser && storedToken) {
          const user = JSON.parse(storedUser);
          if (["admin", "super-admin", "manager", "trainer"].includes(user.role)) {
            const dashboardUrl = getDashboardForRole(user.role);
            router.replace(dashboardUrl);
            return;
          }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ localStorage, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        const response = await fetch("/api/auth/check");
        const data = await response.json();

        if (
          data.authenticated &&
          ["admin", "super-admin", "manager", "trainer"].includes(
            data.user?.role
          )
        ) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∏–∑ API
          if (data.user) {
            localStorage.setItem('auth_user', JSON.stringify(data.user));
          }
          if (data.token) {
            localStorage.setItem('auth_token', data.token);
          }

          const dashboardUrl = getDashboardForRole(data.user.role);
          router.replace(dashboardUrl);
        }
      } catch (error) {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å:", error);
      }
    };

    checkAuth();
  }, [router]);

  const getDashboardForRole = useCallback((role: string): string => {
    const dashboards: { [key: string]: string } = {
      "admin": "/admin",
      "super-admin": "/admin",
      "manager": "/manager-dashboard",
      "trainer": "/trainer-dashboard"
    };
    return dashboards[role] || "/staff-dashboard";
  }, []);

  const getRoleDisplayName = useCallback((role: string): string => {
    const roleNames: { [key: string]: string } = {
      "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
      "super-admin": "–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
      "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
      "trainer": "–¢—Ä–µ–Ω–µ—Ä"
    };
    return roleNames[role] || "–ü–µ—Ä—Å–æ–Ω–∞–ª";
  }, []);

  const handleStaffLogin = useCallback(async (formData: {
    email: string;
    password: string;
    role?: string;
  }): Promise<StaffLoginResult> => {
    setIsLoading(true);

    try {
      console.log('üîê Staff login attempt:', { email: formData.email });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loader
      safeShowLoader("login", {
        userRole: "admin",
        userName: formData.email.split('@')[0] || "–ü–µ—Ä—Å–æ–Ω–∞–ª",
        dashboardUrl: redirectPath || "/staff-dashboard"
      });

      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
          role: formData.role,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();

      if (data.success && data.user) {
        console.log('‚úÖ Staff login successful:', data.user.role);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (typeof window !== 'undefined') {
          try {
            const userData = {
              id: data.user.id || data.user.userId,
              email: data.user.email,
              name: data.user.name,
              role: data.user.role
            };
            localStorage.setItem('auth_user', JSON.stringify(userData));
            
            if (data.token) {
              localStorage.setItem('auth_token', data.token);
            }
            
            sessionStorage.setItem('show_welcome_toast', 'true');
            sessionStorage.setItem('welcome_user_role', data.user.role);
          } catch (storageError) {
            console.error('‚ùå Storage error:', storageError);
          }
        }

        const returnUrl = sessionStorage.getItem("returnUrl");
        const destination = returnUrl || data.dashboardUrl || redirectPath || getDashboardForRole(data.user.role);
        
        if (returnUrl) {
          sessionStorage.removeItem("returnUrl");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º loader —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        safeShowLoader("login", {
          userRole: data.user.role,
          userName: data.user.name || data.user.email,
          dashboardUrl: destination
        });

        setIsLoading(false);

        // –î–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          console.log('üéØ Staff login: redirect to', destination);
          safeHideLoader();
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
          if (typeof window !== 'undefined') {
            window.location.href = destination;
          } else {
            router.push(destination);
          }
        }, 1500);

        return {
          success: true,
          userRole: data.user.role,
          userName: data.user.name || data.user.email,
          dashboardUrl: destination
        };
      } else {
        throw new Error(data.error || "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
      }
    } catch (error) {
      console.error("üí• Staff login error:", error);
      
      safeHideLoader();
      
      const errorMessage = error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é";
      
      if (toast) {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞",
          description: errorMessage,
        });
      }
      
      setIsLoading(false);
      return { success: false };
    }
  }, [toast, router, getDashboardForRole, redirectPath]);

  const handleSuperAdminQuickLogin = useCallback(async (): Promise<StaffLoginResult> => {
    setIsLoading(true);
    
    try {
      console.log('üöÄ Quick admin login attempt');
      
      safeShowLoader("login", {
        userRole: "super-admin",
        userName: "–°—É–ø–µ—Ä –ê–¥–º–∏–Ω",
        dashboardUrl: "/admin"
      });

      const response = await fetch("/api/debug/auth", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "test-login",
          email: "romangulanyan@gmail.com",
          password: "Hovik-1970",
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();

      if (result.success && result.user) {
        console.log('‚úÖ Quick login successful');
        
        if (typeof window !== 'undefined') {
          try {
            const userData = {
              id: result.user.id || result.user.userId,
              email: result.user.email,
              name: result.user.name,
              role: result.user.role
            };
            localStorage.setItem('auth_user', JSON.stringify(userData));
            
            if (result.token) {
              localStorage.setItem('auth_token', result.token);
            }
            
            sessionStorage.setItem('show_welcome_toast', 'true');
            sessionStorage.setItem('welcome_user_role', result.user.role);
          } catch (storageError) {
            console.error('‚ùå Storage error:', storageError);
          }
        }

        const returnUrl = sessionStorage.getItem("returnUrl");
        const destination = returnUrl || "/admin";
        
        if (returnUrl) {
          sessionStorage.removeItem("returnUrl");
        }

        safeShowLoader("login", {
          userRole: result.user.role,
          userName: result.user.name || result.user.email,
          dashboardUrl: destination
        });

        setIsLoading(false);

        setTimeout(() => {
          console.log('üéØ Quick login: redirect to', destination);
          safeHideLoader();
          
          if (typeof window !== 'undefined') {
            window.location.href = destination;
          } else {
            router.push(destination);
          }
        }, 1500);

        return {
          success: true,
          userRole: result.user.role,
          userName: result.user.name || result.user.email,
          dashboardUrl: destination
        };
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞: " + (result.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
      }
    } catch (error) {
      console.error("üí• Quick login error:", error);
      
      safeHideLoader();
      
      if (toast) {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞",
          description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        });
      }
      
      setIsLoading(false);
      return { success: false };
    }
  }, [toast, router]);

  const handlePasswordReset = useCallback(async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();

    if (!resetEmail.trim()) {
      if (toast) {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞",
          description: "–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å",
        });
      }
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch("/api/auth/forgot-password", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: resetEmail.trim().toLowerCase(),
          userType: "staff",
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        setResetSent(true);
        if (toast) {
          toast({
            title: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üìß",
            description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
          });
        }
      } else {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞");
      }
    } catch (error) {
      console.error("Password reset error:", error);
      
      if (toast) {
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞",
          description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ",
        });
      }
      
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [resetEmail, toast]);

  return {
    isLoading,
    showForgotPassword,
    resetEmail,
    resetSent,
    
    setShowForgotPassword,
    setResetEmail,
    setResetSent,
    handleStaffLogin,
    handlePasswordReset,
    handleSuperAdminQuickLogin,

    getDashboardForRole,
    getRoleDisplayName,
  };
}