// stores/useAIAgentStore.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface TrainerContext {
  name: string;
  specialty: string;
  experience: string;
  rating: number;
  price: string;
  badges: string[];
  category: string;
}

interface UserPreferences {
  categories?: string[];
  searchQuery?: string;
  priceRange?: { min: number; max: number };
  experience?: string;
  rating?: number;
}

interface AIContext {
  page?: string;
  selectedTrainer?: TrainerContext;
  userPreferences?: UserPreferences;
  availableTrainers?: any[];
  categories?: string[]; // –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–æ –ø–æ–ª–µ
  searchTerm?: string;
  selectedCategory?: string;
  intent?: string;
  lastInteraction?: Date;
  conversationHistory?: Array<{
    message: string;
    timestamp: Date;
    type: 'user' | 'system';
  }>;
}

interface AIAgentState {
  isOpen: boolean;
  pendingAction: string | null;
  context: AIContext;
  isInitialized: boolean;
  
  // Actions
  openAgent: (action?: string, context?: AIContext) => void;
  closeAgent: () => void;
  clearPendingAction: () => void;
  setContext: (context: Partial<AIContext>) => void;
  addToHistory: (message: string, type: 'user' | 'system') => void;
  resetContext: () => void;
}

export const useAIAgentStore = create<AIAgentState>()(
  devtools(
    persist(
      (set, get) => ({
        isOpen: false,
        pendingAction: null,
        context: {},
        isInitialized: false,

        openAgent: (action, context) => {
          console.log('ü§ñ Opening AI Agent:', { action, context });
          
          set({
            isOpen: true,
            pendingAction: action || null,
            context: {
              ...get().context,
              ...context,
              lastInteraction: new Date()
            },
            isInitialized: true
          });
        },

        closeAgent: () => {
          console.log('ü§ñ Closing AI Agent');
          set({
            isOpen: false,
            pendingAction: null
          });
        },

        clearPendingAction: () => {
          set({ pendingAction: null });
        },

        setContext: (context) => {
          set(state => ({
            context: { 
              ...state.context, 
              ...context,
              lastInteraction: new Date()
            }
          }));
        },

        addToHistory: (message, type) => {
          set(state => ({
            context: {
              ...state.context,
              conversationHistory: [
                ...(state.context.conversationHistory || []),
                {
                  message,
                  timestamp: new Date(),
                  type
                }
              ].slice(-20) // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            }
          }));
        },

        resetContext: () => {
          set({
            context: {},
            pendingAction: null
          });
        }
      }),
      {
        name: 'ai-agent-store',
        partialize: (state) => ({
          context: state.context,
          isInitialized: state.isInitialized
        })
      }
    ),
    { name: 'AIAgentStore' }
  )
);

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
export const AI_ACTIONS = {
  CONSULTATION: 'consultation',
  FIND_TRAINER: 'find_trainer',
  CHOOSE_MEMBERSHIP: 'choose_membership',
  BOOK_TRAINING: 'book_training',
  NUTRITION_HELP: 'nutrition_help',
  PROGRAM_SELECTION: 'program_selection',
  RECOVERY_ANALYSIS: 'recovery_analysis',
  TRAINER_CONSULTATION: 'trainer_consultation',
  GENERAL_CONSULTATION: 'general_consultation',
  TRAINER_SELECTION: 'trainer_selection'
} as const;

// –¢–∏–ø—ã –¥–ª—è TypeScript
export type AIAction = typeof AI_ACTIONS[keyof typeof AI_ACTIONS];

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useAIAgent = () => {
  const store = useAIAgentStore();
  
  // –û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –Ω–∞–∂–∞—Ç–∏—é "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
  const openConsultation = (context?: AIContext) => {
    const finalContext = {
      ...context,
      intent: 'general_consultation'
    };
    store.openAgent(AI_ACTIONS.GENERAL_CONSULTATION, finalContext);
  };
  
  // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É (–ø–æ –Ω–∞–∂–∞—Ç–∏—é AI –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ)
  const openTrainerConsultation = (trainer: TrainerContext) => {
    store.openAgent(AI_ACTIONS.TRAINER_CONSULTATION, {
      selectedTrainer: trainer,
      intent: 'trainer_consultation',
      page: 'trainers'
    });
  };
  
  // –ü–æ–¥–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ (AI –ø–æ–¥–±–æ—Ä)
  const openTrainerSelection = (availableTrainers: any[], categories: string[]) => {
    store.openAgent(AI_ACTIONS.TRAINER_SELECTION, {
      availableTrainers,
      categories,
      intent: 'trainer_selection',
      page: 'trainers'
    });
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
  const openWithAction = (action: AIAction, context?: AIContext) => {
    store.openAgent(action, context);
  };

  return {
    ...store,
    openConsultation,
    openTrainerConsultation,
    openTrainerSelection,
    openWithAction
  };
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const generateInitialMessage = (action: string, context: AIContext): string => {
  switch (action) {
    case AI_ACTIONS.TRAINER_CONSULTATION:
      if (context.selectedTrainer) {
        return `–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ –æ —Ç—Ä–µ–Ω–µ—Ä–µ ${context.selectedTrainer.name}. –ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ –æ–Ω –º–Ω–µ?`;
      }
      return "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞";
      
    case AI_ACTIONS.TRAINER_SELECTION:
      return "–ü–æ–º–æ–≥–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–¥ –º–æ–∏ —Ü–µ–ª–∏";
      
    case AI_ACTIONS.GENERAL_CONSULTATION:
      if (context.selectedCategory && context.selectedCategory !== "–í—Å–µ") {
        return `–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${context.selectedCategory}". –ß—Ç–æ –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å?`;
      }
      if (context.searchTerm) {
        return `–ò—â—É —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${context.searchTerm}". –ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º.`;
      }
      return "–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞";
      
    case AI_ACTIONS.FIND_TRAINER:
      return "–ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞";
      
    case AI_ACTIONS.CONSULTATION:
      return "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É";
      
    default:
      return "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
export const generateSuggestions = (action: string, context: AIContext): string[] => {
  switch (action) {
    case AI_ACTIONS.TRAINER_CONSULTATION:
      return [
        "–ö–∞–∫–æ–π –æ–ø—ã—Ç —É —Ç—Ä–µ–Ω–µ—Ä–∞?",
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–Ω–µ –µ–≥–æ —Å—Ç–∏–ª—å?",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –∑–∞–Ω—è—Ç–∏—è?",
        "–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        "–û—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
      ];
      
    case AI_ACTIONS.TRAINER_SELECTION:
      return [
        "–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å",
        "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É",
        "–£–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã",
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º"
      ];
      
    case AI_ACTIONS.GENERAL_CONSULTATION:
      const suggestions = [
        "–ö–∞–∫–∏–µ –≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –µ—Å—Ç—å?",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã?",
        "–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?",
        "–ù—É–∂–Ω–æ –ª–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ?"
      ];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
      if (context.selectedCategory && context.selectedCategory !== "–í—Å–µ") {
        suggestions.unshift(`–õ—É—á—à–∏–µ —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ ${context.selectedCategory}`);
      }
      
      return suggestions;
      
    default:
      return [
        "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
        "–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
        "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"
      ];
  }
};