// stores/useAIAgentStore.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface TrainerContext {
  name: string;
  specialty: string;
  experience: string;
  rating: number;
  price: string;
  badges: string[];
  category: string;
}

interface UserPreferences {
  categories?: string[];
  searchQuery?: string;
  priceRange?: { min: number; max: number };
  experience?: string;
  rating?: number;
}

interface AnalysisResult {
  id: string;
  progressPotential: number;
  bodyType: string;
  estimatedBodyFat: number;
  estimatedMuscleMass: number;
  fitnessScore: number;
  recommendations: {
    primaryGoal: string;
    secondaryGoals: string[];
    estimatedTimeToGoal: number;
    weeklyTrainingHours: number;
  };
  futureProjections?: any;
  bodyComposition?: any;
  comparisonWithOriginal?: any;
  [key: string]: any;
}

interface AIContext {
  page?: string;
  selectedTrainer?: TrainerContext;
  userPreferences?: UserPreferences;
  availableTrainers?: any[];
  categories?: string[];
  searchTerm?: string;
  selectedCategory?: string;
  intent?: string;
  lastInteraction?: Date;
  conversationHistory?: Array<{
    message: string;
    timestamp: Date;
    type: 'user' | 'system';
  }>;
  // –ü–æ–ª—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  query?: string;
  goals?: string[];
  mode?: string;
  products?: any[];
  selectedProduct?: any;
  compareProducts?: any[];
  cartItems?: any[];
  productId?: string;
  productIds?: string[];
  // –ü–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  personalizedPlan?: any;
  analysisResult?: AnalysisResult;
  concerns?: string[];
  bodyType?: string;
  comparison?: any;
  analysisId?: string;
  originalAnalysisId?: string;
  currentMetrics?: {
    bodyFat: number;
    muscleMass: number;
    fitnessScore?: number;
  };
  projectedResults?: any;
  newAnalysis?: any;
}

interface AIAgentState {
  isOpen: boolean;
  pendingAction: string | null;
  context: AIContext;
  isInitialized: boolean;

  // Actions
  openAgent: (action?: string, context?: AIContext) => void;
  closeAgent: () => void;
  clearPendingAction: () => void;
  setContext: (context: Partial<AIContext>) => void;
  addToHistory: (message: string, type: 'user' | 'system') => void;
  resetContext: () => void;
}

export const useAIAgentStore = create<AIAgentState>()(
  devtools(
    persist(
      (set, get) => ({
        isOpen: false,
        pendingAction: null,
        context: {},
        isInitialized: false,

        openAgent: (action, context) => {
          console.log('ü§ñ Opening AI Agent:', { action, context });

          set({
            isOpen: true,
            pendingAction: action || null,
            context: {
              ...get().context,
              ...context,
              lastInteraction: new Date()
            },
            isInitialized: true
          });
        },

        closeAgent: () => {
          console.log('ü§ñ Closing AI Agent');
          set({
            isOpen: false,
            pendingAction: null
          });
        },

        clearPendingAction: () => {
          set({ pendingAction: null });
        },

        setContext: (context) => {
          set(state => ({
            context: {
              ...state.context,
              ...context,
              lastInteraction: new Date()
            }
          }));
        },

        addToHistory: (message, type) => {
          set(state => ({
            context: {
              ...state.context,
              conversationHistory: [
                ...(state.context.conversationHistory || []),
                {
                  message,
                  timestamp: new Date(),
                  type
                }
              ].slice(-20) // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            }
          }));
        },

        resetContext: () => {
          set({
            context: {},
            pendingAction: null
          });
        }
      }),
      {
        name: 'ai-agent-store',
        partialize: (state) => ({
          context: state.context,
          isInitialized: state.isInitialized
        })
      }
    ),
    { name: 'AIAgentStore' }
  )
);

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
export const AI_ACTIONS = {
  CONSULTATION: 'consultation',
  FIND_TRAINER: 'find_trainer',
  CHOOSE_MEMBERSHIP: 'choose_membership',
  BOOK_TRAINING: 'book_training',
  NUTRITION_HELP: 'nutrition_help',
  PROGRAM_SELECTION: 'program_selection',
  RECOVERY_ANALYSIS: 'recovery_analysis',
  TRAINER_CONSULTATION: 'trainer_consultation',
  GENERAL_CONSULTATION: 'general_consultation',
  TRAINER_SELECTION: 'trainer_selection',
  // –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  SHOP_CONSULTATION: 'shop_consultation',
  PRODUCT_CONSULTATION: 'product_consultation',
  PRODUCT_COMPARISON: 'product_comparison',
  PURCHASE_ASSISTANCE: 'purchase_assistance',
  BODY_ANALYSIS_CONSULTATION: 'body_analysis_consultation',
  PLAN_ADJUSTMENT: 'plan_adjustment',
  COMPARE_PROGRESS: 'compare_progress',
  PROGRESS_UPDATE: 'progress_update',
} as const;

// –¢–∏–ø—ã –¥–ª—è TypeScript
export type AIAction = typeof AI_ACTIONS[keyof typeof AI_ACTIONS];

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useAIAgent = () => {
  const store = useAIAgentStore();

  // –û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –Ω–∞–∂–∞—Ç–∏—é "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
  const openConsultation = (context?: AIContext) => {
    const finalContext = {
      ...context,
      intent: 'general_consultation'
    };
    store.openAgent(AI_ACTIONS.GENERAL_CONSULTATION, finalContext);
  };

  // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É (–ø–æ –Ω–∞–∂–∞—Ç–∏—é AI –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ)
  const openTrainerConsultation = (trainer: TrainerContext) => {
    store.openAgent(AI_ACTIONS.TRAINER_CONSULTATION, {
      selectedTrainer: trainer,
      intent: 'trainer_consultation',
      page: 'trainers'
    });
  };

  // –ü–æ–¥–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ (AI –ø–æ–¥–±–æ—Ä)
  const openTrainerSelection = (availableTrainers: any[], categories: string[]) => {
    store.openAgent(AI_ACTIONS.TRAINER_SELECTION, {
      availableTrainers,
      categories,
      intent: 'trainer_selection',
      page: 'trainers'
    });
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
  const openWithAction = (action: AIAction, context?: AIContext) => {
    store.openAgent(action, context);
  };

  return {
    ...store,
    openConsultation,
    openTrainerConsultation,
    openTrainerSelection,
    openWithAction
  };
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const generateInitialMessage = (action: string, context: AIContext): string => {
  switch (action) {
    case AI_ACTIONS.TRAINER_CONSULTATION:
      if (context.selectedTrainer) {
        return `–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ –æ —Ç—Ä–µ–Ω–µ—Ä–µ ${context.selectedTrainer.name}. –ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ –æ–Ω –º–Ω–µ?`;
      }
      return "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞";

    case AI_ACTIONS.TRAINER_SELECTION:
      return "–ü–æ–º–æ–≥–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–¥ –º–æ–∏ —Ü–µ–ª–∏";

    case AI_ACTIONS.GENERAL_CONSULTATION:
      if (context.selectedCategory && context.selectedCategory !== "–í—Å–µ") {
        return `–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${context.selectedCategory}". –ß—Ç–æ –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å?`;
      }
      if (context.searchTerm) {
        return `–ò—â—É —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${context.searchTerm}". –ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º.`;
      }
      return "–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞";

    case AI_ACTIONS.FIND_TRAINER:
      return "–ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞";

    case AI_ACTIONS.CONSULTATION:
      return "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É";

    // –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    case AI_ACTIONS.SHOP_CONSULTATION:
      if (context.query) {
        return `–ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${context.query}". –ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º.`;
      }
      if (context.goals && context.goals.length > 0) {
        return `–ú–æ–∏ —Ü–µ–ª–∏: ${context.goals.join(', ')}. –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –º–Ω–µ –ø–æ–¥–æ–π–¥—É—Ç?`;
      }
      return "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã";

    case AI_ACTIONS.PRODUCT_CONSULTATION:
      if (context.selectedProduct) {
        return `–†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ "${context.selectedProduct.name}". –ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ –æ–Ω –º–Ω–µ?`;
      }
      return "–ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–∞";

    case AI_ACTIONS.PRODUCT_COMPARISON:
      if (context.compareProducts && context.compareProducts.length > 0) {
        const productNames = context.compareProducts.map(p => p.name).join(', ');
        return `–°—Ä–∞–≤–Ω–∏ —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: ${productNames}. –ß—Ç–æ –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å?`;
      }
      return "–ü–æ–º–æ–≥–∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã";

    case AI_ACTIONS.PURCHASE_ASSISTANCE:
      return "–ü–æ–º–æ–≥–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É";

    case AI_ACTIONS.BODY_ANALYSIS_CONSULTATION:
      if (context.personalizedPlan) {
        return `–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞! –í–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ ${context.analysisResult?.progressPotential}%. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.`;
      }
      return "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞";

    case AI_ACTIONS.PLAN_ADJUSTMENT:
      return `–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è: ${context.concerns?.join(', ')}. –î–∞–≤–∞–π—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.`;

    case AI_ACTIONS.COMPARE_PROGRESS:
      return `–°—Ä–∞–≤–Ω–∏–º –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å —Ç–∏–ø–æ–º —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è ${context.bodyType}`;

    case AI_ACTIONS.PROGRESS_UPDATE:
      if (context.comparison) {
        return `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.`;
      }
      return "–î–∞–≤–∞–π—Ç–µ –æ—Ü–µ–Ω–∏–º –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å";

    default:
      return "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
export const generateSuggestions = (action: string, context: AIContext): string[] => {
  switch (action) {

    case AI_ACTIONS.BODY_ANALYSIS_CONSULTATION:
      return [
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–ª–∞–Ω–µ",
        "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç—Ä–µ–Ω–µ—Ä?",
        "–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ?",
        "–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å?",
        "–°–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å?"
      ];

    case AI_ACTIONS.PLAN_ADJUSTMENT:
      return [
        "–£ –º–µ–Ω—è –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞...",
        "–ù–µ –º–æ–≥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫ —á–∞—Å—Ç–æ",
        "–ë—é–¥–∂–µ—Ç –º–µ–Ω—å—à–µ",
        "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "–ù—É–∂–µ–Ω –∂–µ–Ω—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä"
      ];

    case AI_ACTIONS.COMPARE_PROGRESS:
      return [
        "–ü–æ–∫–∞–∂–∏ —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "–ö—Ç–æ –¥–æ—Å—Ç–∏–≥ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?",
        "–ß—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞–ª–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É?",
        "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π?",
        "–ö–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"
      ];

    case AI_ACTIONS.PROGRESS_UPDATE:
      return [
        "–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?",
        "–ù—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω?",
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–¥–ª–µ–Ω–Ω—ã–π?",
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        "–ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
      ];

    case AI_ACTIONS.TRAINER_CONSULTATION:
      return [
        "–ö–∞–∫–æ–π –æ–ø—ã—Ç —É —Ç—Ä–µ–Ω–µ—Ä–∞?",
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–Ω–µ –µ–≥–æ —Å—Ç–∏–ª—å?",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –∑–∞–Ω—è—Ç–∏—è?",
        "–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        "–û—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
      ];

    case AI_ACTIONS.TRAINER_SELECTION:
      return [
        "–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å",
        "–ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É",
        "–£–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã",
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º"
      ];

    case AI_ACTIONS.GENERAL_CONSULTATION:
      const suggestions = [
        "–ö–∞–∫–∏–µ –≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –µ—Å—Ç—å?",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã?",
        "–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?",
        "–ù—É–∂–Ω–æ –ª–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ?"
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
      if (context.selectedCategory && context.selectedCategory !== "–í—Å–µ") {
        suggestions.unshift(`–õ—É—á—à–∏–µ —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ ${context.selectedCategory}`);
      }

      return suggestions;

    // –ù–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    case AI_ACTIONS.SHOP_CONSULTATION:
      return [
        "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã?",
        "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è",
        "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏",
        "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏",
        "–ü—Ä–µ–¥—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã"
      ];

    case AI_ACTIONS.PRODUCT_CONSULTATION:
      return [
        "–ö–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?",
        "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è?",
        "–ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ –¥–ª—è –º–æ–∏—Ö —Ü–µ–ª–µ–π?",
        "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –Ω–∞ –∫—É—Ä—Å?",
        "–ê–Ω–∞–ª–æ–≥–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"
      ];

    case AI_ACTIONS.PRODUCT_COMPARISON:
      return [
        "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏?",
        "–ß—Ç–æ –ª—É—á—à–µ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ?",
        "–ö–∞–∫–æ–π –±—ã—Å—Ç—Ä–µ–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç?",
        "–ß—Ç–æ –ø–æ–¥–æ–π–¥–µ—Ç –Ω–æ–≤–∏—á–∫—É?",
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É"
      ];

    case AI_ACTIONS.PURCHASE_ASSISTANCE:
      return [
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å",
        "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?",
        "–ö–æ–≥–¥–∞ –ª—É—á—à–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?",
        "–ù—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?"
      ];

    default:
      return [
        "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
        "–í—ã–±—Ä–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
        "–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"
      ];
  }
};