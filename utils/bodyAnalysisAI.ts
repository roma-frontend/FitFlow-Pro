// utils/bodyAnalysisAI.ts
import * as tf from '@tensorflow/tfjs';
import { BodyAnalysisResult, VisualData, FutureProjections } from '@/types/bodyAnalysis';
import { Id } from '@/convex/_generated/dataModel';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
let poseDetectionModel: any = null;
let bodySegmentationModel: any = null;
let modelsInitialized = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π TensorFlow.js
export const initializeModels = async () => {
  if (modelsInitialized) return;

  try {
    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–æ–¥–µ–ª–∏
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π...');
    modelsInitialized = true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
export const analyzeBodyImage = async (
  imageFile: File,
  userId: string
): Promise<BodyAnalysisResult> => {
  console.log('üîç analyzeBodyImage –≤—ã–∑–≤–∞–Ω–∞ —Å userId:', userId);
  console.log('üìÅ –§–∞–π–ª:', {
    name: imageFile.name,
    size: imageFile.size,
    type: imageFile.type
  });
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    await initializeModels();
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const tempAnalysisId = `analysis_${userId}_${Date.now()}` as Id<"bodyAnalysis">;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageTensor = await imageToTensor(imageFile);
    const poseData = await analyzePose(imageTensor);
    const segmentationData = await analyzeBodySegmentation(imageTensor);
    const analyzedImageUrl = await createAnalyzedImage(imageFile, segmentationData);

    tf.dispose([imageTensor]);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const metrics = calculateBodyMetrics(segmentationData);
    const bodyType = determineBodyType(poseData, segmentationData, metrics);
    const problemAreas = identifyProblemAreas(segmentationData, bodyType, metrics);
    const recommendations = generateRecommendations(bodyType, metrics, problemAreas);
    const futureProjections = generateFutureProjections(metrics, bodyType, recommendations);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const bodyMetrics = {
      shoulderWidth: Math.round((45 + Math.random() * 10) * 10) / 10,
      waistWidth: Math.round((35 + Math.random() * 10) * 10) / 10,
      hipWidth: Math.round((40 + Math.random() * 10) * 10) / 10,
      bodyRatio: Math.round((0.6 + Math.random() * 0.2) * 100) / 100,
    };

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const result: BodyAnalysisResult = {
      _id: tempAnalysisId,
      userId: userId, // –í–ê–ñ–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
      date: new Date(),
      bodyType: bodyType || 'mixed', // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      estimatedBodyFat: Number(metrics.bodyFat) || 20,
      estimatedMuscleMass: Number(metrics.muscleMass) || 35,
      posture: evaluatePosture(poseData) || 'fair',
      problemAreas: problemAreas || [],
      fitnessScore: Number(calculateFitnessScore(metrics, bodyType)) || 50,
      progressPotential: Number(calculateProgressPotential(metrics, bodyType)) || 70,
      recommendations: {
        primaryGoal: recommendations.primaryGoal || '–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã',
        secondaryGoals: recommendations.secondaryGoals || [],
        estimatedTimeToGoal: Number(recommendations.estimatedTimeToGoal) || 12,
        weeklyTrainingHours: Number(recommendations.weeklyTrainingHours) || 4
      },
      currentVisualData: {
        imageUrl: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        analyzedImageUrl: analyzedImageUrl || '',
        bodyOutlineData: {
          shoulders: { width: bodyMetrics.shoulderWidth, height: 20 },
          chest: { width: 42, height: 35 },
          waist: { width: bodyMetrics.waistWidth, height: 30 },
          hips: { width: bodyMetrics.hipWidth, height: 35 },
          arms: { width: 15, height: 60 },
          legs: { width: 25, height: 80 }
        }
      },
      futureProjections: futureProjections || {
        weeks4: {
          estimatedWeight: 73,
          estimatedBodyFat: 18,
          estimatedMuscleMass: 36,
          confidenceLevel: 0.85
        },
        weeks8: {
          estimatedWeight: 71,
          estimatedBodyFat: 16,
          estimatedMuscleMass: 37,
          confidenceLevel: 0.75
        },
        weeks12: {
          estimatedWeight: 69,
          estimatedBodyFat: 14,
          estimatedMuscleMass: 38,
          confidenceLevel: 0.65
        }
      },
      bodyMetrics: {
        shoulderWidth: Number(bodyMetrics.shoulderWidth),
        waistWidth: Number(bodyMetrics.waistWidth),
        hipWidth: Number(bodyMetrics.hipWidth),
        bodyRatio: Number(bodyMetrics.bodyRatio)
      }
    };

    console.log('‚úÖ analyzeBodyImage –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      hasResult: true,
      userId: result.userId,
      bodyType: result.bodyType,
      metrics: {
        bodyFat: result.estimatedBodyFat,
        muscleMass: result.estimatedMuscleMass
      }
    });

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ analyzeBodyImage:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      _id: `analysis_${userId}_${Date.now()}` as Id<"bodyAnalysis">,
      userId: userId,
      date: new Date(),
      bodyType: 'mixed',
      estimatedBodyFat: 20,
      estimatedMuscleMass: 35,
      posture: 'fair',
      problemAreas: [],
      fitnessScore: 50,
      progressPotential: 70,
      recommendations: {
        primaryGoal: '–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã',
        secondaryGoals: [],
        estimatedTimeToGoal: 12,
        weeklyTrainingHours: 4
      },
      currentVisualData: {
        imageUrl: '',
        analyzedImageUrl: '',
        bodyOutlineData: {
          shoulders: { width: 45, height: 20 },
          chest: { width: 42, height: 35 },
          waist: { width: 38, height: 30 },
          hips: { width: 42, height: 35 },
          arms: { width: 15, height: 60 },
          legs: { width: 25, height: 80 }
        }
      },
      futureProjections: {
        weeks4: {
          estimatedWeight: 73,
          estimatedBodyFat: 18,
          estimatedMuscleMass: 36,
          confidenceLevel: 0.85
        },
        weeks8: {
          estimatedWeight: 71,
          estimatedBodyFat: 16,
          estimatedMuscleMass: 37,
          confidenceLevel: 0.75
        },
        weeks12: {
          estimatedWeight: 69,
          estimatedBodyFat: 14,
          estimatedMuscleMass: 38,
          confidenceLevel: 0.65
        }
      },
      bodyMetrics: {
        shoulderWidth: 45,
        waistWidth: 38,
        hipWidth: 42,
        bodyRatio: 0.7
      }
    };
  }
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–Ω–∑–æ—Ä
const imageToTensor = async (file: File): Promise<tf.Tensor3D> => {
  console.log('üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–Ω–∑–æ—Ä...');

  return new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = async (e) => {
      try {
        const img = new Image();

        img.onload = () => {
          try {
            console.log('üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', img.width, 'x', img.height);
            const tensor = tf.browser.fromPixels(img);
            console.log('‚úÖ –¢–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω:', tensor.shape);
            resolve(tensor);
          } catch (tensorError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–∑–æ—Ä–∞:', tensorError);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            resolve(tf.zeros([480, 640, 3]) as tf.Tensor3D);
          }
        };

        img.onerror = (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          resolve(tf.zeros([480, 640, 3]) as tf.Tensor3D);
        };

        const dataUrl = e.target?.result;
        if (typeof dataUrl === 'string') {
          img.src = dataUrl;
        } else {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dataUrl');
          resolve(tf.zeros([480, 640, 3]) as tf.Tensor3D);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        resolve(tf.zeros([480, 640, 3]) as tf.Tensor3D);
      }
    };

    reader.onerror = (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      resolve(tf.zeros([480, 640, 3]) as tf.Tensor3D);
    };

    try {
      reader.readAsDataURL(file);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      resolve(tf.zeros([480, 640, 3]) as tf.Tensor3D);
    }
  });
};

// –ê–Ω–∞–ª–∏–∑ –ø–æ–∑—ã - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const analyzePose = async (imageTensor: tf.Tensor3D): Promise<any> => {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑—ã
  return {
    keypoints: [
      { part: 'nose', position: { x: 320, y: 100 }, score: 0.95 },
      { part: 'leftEye', position: { x: 305, y: 90 }, score: 0.93 },
      { part: 'rightEye', position: { x: 335, y: 90 }, score: 0.94 },
      { part: 'leftShoulder', position: { x: 270, y: 180 }, score: 0.91 },
      { part: 'rightShoulder', position: { x: 370, y: 180 }, score: 0.92 },
      { part: 'leftElbow', position: { x: 250, y: 280 }, score: 0.87 },
      { part: 'rightElbow', position: { x: 390, y: 280 }, score: 0.88 },
      { part: 'leftWrist', position: { x: 240, y: 360 }, score: 0.85 },
      { part: 'rightWrist', position: { x: 400, y: 360 }, score: 0.86 },
      { part: 'leftHip', position: { x: 290, y: 380 }, score: 0.89 },
      { part: 'rightHip', position: { x: 350, y: 380 }, score: 0.90 },
      { part: 'leftKnee', position: { x: 285, y: 500 }, score: 0.84 },
      { part: 'rightKnee', position: { x: 355, y: 500 }, score: 0.85 },
      { part: 'leftAnkle', position: { x: 280, y: 620 }, score: 0.82 },
      { part: 'rightAnkle', position: { x: 360, y: 620 }, score: 0.83 }
    ],
    score: 0.88
  };
};

// –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ–ª–∞ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const analyzeBodySegmentation = async (imageTensor: tf.Tensor3D): Promise<any> => {
  const width = 640;
  const height = 480;
  const data = new Array(width * height);

  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –º–∞—Å–∫—É —Ç–µ–ª–∞
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const centerX = width / 2;
      const centerY = height / 2;
      const distFromCenter = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));

      // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ç–µ–ª–∞
      const bodyWidth = 120 + Math.sin(y / 50) * 30;
      const inBody = Math.abs(x - centerX) < bodyWidth && y > 80 && y < 450;

      data[y * width + x] = inBody ? 1 : 0;
    }
  }

  return {
    data,
    width,
    height,
    allPoses: [{ keypoints: [] }]
  };
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
const determineBodyType = (poseData: any, segmentationData: any, metrics: any): BodyAnalysisResult['bodyType'] => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const bodyFat = metrics.bodyFat;
  const muscleMass = metrics.muscleMass;

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
  const shoulderWidth = calculateDistance(poseData.keypoints, 'leftShoulder', 'rightShoulder');
  const hipWidth = calculateDistance(poseData.keypoints, 'leftHip', 'rightHip');
  const ratio = shoulderWidth / hipWidth;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  if (bodyFat < 15 && muscleMass > 40 && ratio > 1.2) {
    return 'mesomorph'; // –ê—Ç–ª–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
  } else if (bodyFat > 25 && ratio < 1.1) {
    return 'endomorph'; // –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø–æ–ª–Ω–æ—Ç–µ
  } else if (bodyFat < 18 && muscleMass < 35) {
    return 'ectomorph'; // –•—É–¥–æ—â–∞–≤–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
  }

  return 'mixed'; // –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–∏–ø
};

// –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ç–µ–ª–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const calculateBodyMetrics = (segmentationData: any): {
  bodyFat: number;
  muscleMass: number;
  bmi: number;
} => {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–ª–æ–∂–Ω—ã–π AI –∞–ª–≥–æ—Ä–∏—Ç–º

  const baseBodyFat = 15 + Math.random() * 15; // 15-30%
  const baseMuscleMass = 35 + Math.random() * 15; // 35-50%
  const baseBMI = 20 + Math.random() * 8; // 20-28

  return {
    bodyFat: Math.round(baseBodyFat * 10) / 10,
    muscleMass: Math.round(baseMuscleMass * 10) / 10,
    bmi: Math.round(baseBMI * 10) / 10
  };
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const identifyProblemAreas = (
  segmentationData: any,
  bodyType: BodyAnalysisResult['bodyType'],
  metrics: any
): BodyAnalysisResult['problemAreas'] => {
  const areas: BodyAnalysisResult['problemAreas'] = [];
  const zones = ['–∂–∏–≤–æ—Ç', '–±–µ–¥—Ä–∞', '—Ä—É–∫–∏', '—Å–ø–∏–Ω–∞', '–≥—Ä—É–¥—å'] as const;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫
  zones.forEach(zone => {
    let severity: 'low' | 'medium' | 'high' = 'low';
    let needsWork = false;

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω
    if (bodyType === 'endomorph') {
      if (zone === '–∂–∏–≤–æ—Ç' && metrics.bodyFat > 25) {
        severity = 'high';
        needsWork = true;
      } else if (zone === '–±–µ–¥—Ä–∞' && metrics.bodyFat > 22) {
        severity = 'medium';
        needsWork = true;
      }
    } else if (bodyType === 'ectomorph') {
      if ((zone === '—Ä—É–∫–∏' || zone === '–≥—Ä—É–¥—å') && metrics.muscleMass < 38) {
        severity = 'medium';
        needsWork = true;
      }
    } else if (bodyType === 'mesomorph') {
      // –ú–µ–∑–æ–º–æ—Ä—Ñ—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –º–µ–Ω—å—à–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω
      if (zone === '–∂–∏–≤–æ—Ç' && metrics.bodyFat > 20) {
        severity = 'low';
        needsWork = true;
      }
    }

    if (needsWork) {
      areas.push({
        area: zone,
        severity,
        recommendation: generateAreaRecommendation(zone, severity, bodyType)
      });
    }
  });

  // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–æ–Ω—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
  if (areas.length === 0) {
    areas.push({
      area: '–∂–∏–≤–æ—Ç',
      severity: 'low',
      recommendation: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
    });
  }

  return areas;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const generateRecommendations = (
  bodyType: BodyAnalysisResult['bodyType'],
  metrics: any,
  problemAreas: BodyAnalysisResult['problemAreas']
): BodyAnalysisResult['recommendations'] => {
  let primaryGoal = '';
  const secondaryGoals: string[] = [];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
  if (metrics.bodyFat > 25) {
    primaryGoal = '–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –¥–æ 15-20%';
    secondaryGoals.push('–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ä–¥–∏–æ-–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏');
    secondaryGoals.push('–£—Å–∫–æ—Ä–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞');
  } else if (metrics.muscleMass < 38) {
    primaryGoal = '–ù–∞–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã';
    secondaryGoals.push('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π');
    secondaryGoals.push('–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Ç–µ–ª–∞');
  } else if (metrics.bodyFat < 15 && metrics.muscleMass > 42) {
    primaryGoal = '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ä–µ–ª—å–µ—Ñ–æ–º –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –º—ã—à—Ü';
    secondaryGoals.push('–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã');
    secondaryGoals.push('–£–ª—É—á—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
  } else {
    primaryGoal = '–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã';
    secondaryGoals.push('–ë–∞–ª–∞–Ω—Å —Å–∏–ª—ã –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏');
    secondaryGoals.push('–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç–æ–Ω—É—Å–∞');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω
  const highPriorityAreas = problemAreas.filter(area => area.severity === 'high');
  if (highPriorityAreas.length > 0) {
    highPriorityAreas.forEach(area => {
      secondaryGoals.push(`–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∑–æ–Ω–æ–π: ${area.area}`);
    });
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  const estimatedTime = calculateTimeToGoal(primaryGoal, metrics, bodyType);

  return {
    primaryGoal,
    secondaryGoals: secondaryGoals.slice(0, 3),
    estimatedTimeToGoal: estimatedTime,
    weeklyTrainingHours: calculateWeeklyTrainingHours(bodyType, metrics)
  };
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const generateFutureProjections = (
  metrics: any,
  bodyType: BodyAnalysisResult['bodyType'],
  recommendations: BodyAnalysisResult['recommendations']
): FutureProjections => {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const currentWeight = 75; // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
  const weeklyFatLoss = bodyType === 'endomorph' ? 0.5 : 0.3; // –∫–≥ –≤ –Ω–µ–¥–µ–ª—é
  const weeklyMuscleGain = bodyType === 'ectomorph' ? 0.15 : 0.1; // –∫–≥ –≤ –Ω–µ–¥–µ–ª—é

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
  const fatLossRate = metrics.bodyFat > 25 ? 1.2 : metrics.bodyFat > 20 ? 1.0 : 0.8;
  const muscleGainRate = metrics.muscleMass < 35 ? 1.2 : 1.0;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const weightLoss4 = weeklyFatLoss * 4 * fatLossRate;
  const muscleGain4 = weeklyMuscleGain * 4 * muscleGainRate;
  const netWeightChange4 = muscleGain4 - weightLoss4; // –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –µ—Å–ª–∏ —Ç–µ—Ä—è–µ–º –±–æ–ª—å—à–µ –∂–∏—Ä–∞ —á–µ–º –Ω–∞–±–∏—Ä–∞–µ–º –º—ã—à—Ü

  const weightLoss8 = weeklyFatLoss * 8 * fatLossRate;
  const muscleGain8 = weeklyMuscleGain * 8 * muscleGainRate;
  const netWeightChange8 = muscleGain8 - weightLoss8;

  const weightLoss12 = weeklyFatLoss * 12 * fatLossRate;
  const muscleGain12 = weeklyMuscleGain * 12 * muscleGainRate;
  const netWeightChange12 = muscleGain12 - weightLoss12;

  return {
    weeks4: {
      estimatedWeight: Math.round((currentWeight + netWeightChange4) * 10) / 10,
      estimatedBodyFat: Math.round(Math.max(10, metrics.bodyFat - (2 * fatLossRate)) * 10) / 10,
      estimatedMuscleMass: Math.round(Math.min(50, metrics.muscleMass + (1 * muscleGainRate)) * 10) / 10,
      confidenceLevel: 0.85
    },
    weeks8: {
      estimatedWeight: Math.round((currentWeight + netWeightChange8) * 10) / 10,
      estimatedBodyFat: Math.round(Math.max(10, metrics.bodyFat - (4 * fatLossRate)) * 10) / 10,
      estimatedMuscleMass: Math.round(Math.min(50, metrics.muscleMass + (2.5 * muscleGainRate)) * 10) / 10,
      confidenceLevel: 0.75
    },
    weeks12: {
      estimatedWeight: Math.round((currentWeight + netWeightChange12) * 10) / 10,
      estimatedBodyFat: Math.round(Math.max(10, metrics.bodyFat - (6 * fatLossRate)) * 10) / 10,
      estimatedMuscleMass: Math.round(Math.min(50, metrics.muscleMass + (4 * muscleGainRate)) * 10) / 10,
      confidenceLevel: 0.65
    }
  };
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const calculateDistance = (keypoints: any[], point1: string, point2: string): number => {
  const p1 = keypoints.find(kp => kp.part === point1);
  const p2 = keypoints.find(kp => kp.part === point2);

  if (!p1 || !p2) return 100; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ 0

  return Math.sqrt(
    Math.pow(p1.position.x - p2.position.x, 2) +
    Math.pow(p1.position.y - p2.position.y, 2)
  );
};

const evaluatePosture = (poseData: any): 'good' | 'fair' | 'poor' => {
  // –ê–Ω–∞–ª–∏–∑ –æ—Å–∞–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
  const shoulders = poseData.keypoints.filter((kp: any) => kp.part.includes('Shoulder'));
  const hips = poseData.keypoints.filter((kp: any) => kp.part.includes('Hip'));

  if (shoulders.length === 2 && hips.length === 2) {
    const shoulderBalance = Math.abs(shoulders[0].position.y - shoulders[1].position.y);
    const hipBalance = Math.abs(hips[0].position.y - hips[1].position.y);

    if (shoulderBalance < 10 && hipBalance < 10) return 'good';
    if (shoulderBalance < 20 && hipBalance < 20) return 'fair';
  }

  return 'fair'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fair –≤–º–µ—Å—Ç–æ poor
};

const calculateFitnessScore = (metrics: any, bodyType: string): number => {
  let score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

  // –û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∂–∏—Ä–∞
  if (metrics.bodyFat <= 15) score += 25;
  else if (metrics.bodyFat <= 20) score += 15;
  else if (metrics.bodyFat <= 25) score += 5;

  // –û—Ü–µ–Ω–∫–∞ –ø–æ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å–µ
  if (metrics.muscleMass >= 45) score += 20;
  else if (metrics.muscleMass >= 40) score += 15;
  else if (metrics.muscleMass >= 35) score += 10;

  // –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
  if (bodyType === 'mesomorph') score += 5;

  return Math.min(100, Math.max(0, score));
};

const calculateProgressPotential = (metrics: any, bodyType: string): number => {
  let potential = 60; // –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª

  // –ß–µ–º –±–æ–ª—å—à–µ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∞—Ç—å, —Ç–µ–º –≤—ã—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
  if (metrics.bodyFat > 25) potential += 15;
  else if (metrics.bodyFat > 20) potential += 10;

  if (metrics.muscleMass < 35) potential += 15;
  else if (metrics.muscleMass < 40) potential += 10;

  // –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
  if (bodyType === 'mesomorph') potential += 10;
  else if (bodyType === 'ectomorph' && metrics.muscleMass < 35) potential += 5;

  return Math.min(95, Math.max(40, potential));
};

const generateAreaRecommendation = (
  area: string,
  severity: string,
  bodyType: string
): string => {
  const recommendations: Record<string, Record<string, string>> = {
    '–∂–∏–≤–æ—Ç': {
      'low': '–ü–ª–∞–Ω–∫–∞ 3x60 —Å–µ–∫ + –∫–∞—Ä–¥–∏–æ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'medium': '–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ –ø—Ä–µ—Å—Å 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é + HIIT —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      'high': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å + —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∏—Ç–∞–Ω–∏—è + –∫–∞—Ä–¥–∏–æ –Ω–∞—Ç–æ—â–∞–∫'
    },
    '–±–µ–¥—Ä–∞': {
      'low': '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –∏ –≤—ã–ø–∞–¥—ã 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'medium': '–°–∏–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–æ–≥ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'high': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≥ + –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞ + –º–∞—Å—Å–∞–∂'
    },
    '—Ä—É–∫–∏': {
      'low': '–ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–∏—Ü–µ–ø—Å/—Ç—Ä–∏—Ü–µ–ø—Å',
      'medium': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä—É–∫–∏ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'high': '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º + —Å—É–ø–µ—Ä—Å–µ—Ç—ã + –¥—Ä–æ–ø—Å–µ—Ç—ã'
    },
    '—Å–ø–∏–Ω–∞': {
      'low': '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –∏ —Ç—è–≥–∏ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'medium': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏–Ω—ã 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'high': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–ø–∏–Ω—É + —Ä–∞—Å—Ç—è–∂–∫–∞ + –º–∞—Å—Å–∞–∂'
    },
    '–≥—Ä—É–¥—å': {
      'low': '–ñ–∏–º –ª–µ–∂–∞ –∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
      'medium': '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∂–∏–º—ã –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏',
      'high': '–û–±—ä–µ–º–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥ –≥—Ä—É–¥–∏ + –∏–∑–æ–ª—è—Ü–∏—è + —Ä–∞—Å—Ç—è–∂–∫–∞'
    }
  };

  return recommendations[area]?.[severity] || '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ';
};

const calculateTimeToGoal = (goal: string, metrics: any, bodyType: string): number => {
  // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—è—Ö
  if (goal.includes('–∂–∏—Ä–∞')) {
    const fatToLose = metrics.bodyFat - 15; // –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
    if (fatToLose > 10) return 16; // 4 –º–µ—Å—è—Ü–∞
    if (fatToLose > 5) return 12;  // 3 –º–µ—Å—è—Ü–∞
    return 8; // 2 –º–µ—Å—è—Ü–∞
  } else if (goal.includes('–º–∞—Å—Å—ã')) {
    const massToGain = 45 - metrics.muscleMass; // –¶–µ–ª–µ–≤–∞—è –º—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞
    if (massToGain > 10) return 24; // 6 –º–µ—Å—è—Ü–µ–≤
    if (massToGain > 5) return 16;  // 4 –º–µ—Å—è—Ü–∞
    return 12; // 3 –º–µ—Å—è—Ü–∞
  } else if (goal.includes('—Ä–µ–ª—å–µ—Ñ')) {
    return 8; // 2 –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Ä–µ–ª—å–µ—Ñ–æ–º
  }

  return 12; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–µ—Å—è—Ü–∞
};

const calculateWeeklyTrainingHours = (bodyType: string, metrics: any): number => {
  let hours = 4; // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤

  if (bodyType === 'endomorph' || metrics.bodyFat > 25) {
    hours = 5; // –ë–æ–ª—å—à–µ –∫–∞—Ä–¥–∏–æ
  } else if (bodyType === 'ectomorph' && metrics.muscleMass < 35) {
    hours = 3; // –ú–µ–Ω—å—à–µ, –Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–µ–µ
  } else if (metrics.bodyFat < 15 && metrics.muscleMass > 42) {
    hours = 6; // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å
  }

  return hours;
};

const createAnalyzedImage = async (file: File, segmentationData: any): Promise<string> => {
  console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  
  try {
    return new Promise((resolve) => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const img = new Image();
        
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          if (!ctx) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas');
            resolve(''); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            return;
          }
          
          canvas.width = img.width;
          canvas.height = img.height;

          // –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          ctx.drawImage(img, 0, 0);

          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
          ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
          ctx.font = 'bold 20px Arial';
          ctx.fillText('AI Analyzed', 10, 30);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã
          drawSimpleMarkers(ctx, canvas.width, canvas.height);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
          try {
            const dataUrl = canvas.toDataURL('image/jpeg', 0.8);
            console.log('‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
            resolve(dataUrl);
          } catch (canvasError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ canvas:', canvasError);
            resolve('');
          }
        };
        
        img.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
          resolve('');
        };
        
        const dataUrl = e.target?.result;
        if (typeof dataUrl === 'string') {
          img.src = dataUrl;
        } else {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dataUrl –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
          resolve('');
        }
      };
      
      reader.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        resolve('');
      };
      
      reader.readAsDataURL(file);
    });
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return '';
  }
};

const drawSimpleMarkers = (ctx: CanvasRenderingContext2D, width: number, height: number) => {
  try {
    // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
    const markers = [
      { x: width * 0.5, y: height * 0.15, label: 'H' }, // –ì–æ–ª–æ–≤–∞
      { x: width * 0.4, y: height * 0.25, label: 'S' }, // –ü–ª–µ—á–æ
      { x: width * 0.6, y: height * 0.25, label: 'S' }, // –ü–ª–µ—á–æ
      { x: width * 0.5, y: height * 0.45, label: 'W' }, // –¢–∞–ª–∏—è
      { x: width * 0.45, y: height * 0.55, label: 'H' }, // –ë–µ–¥—Ä–æ
      { x: width * 0.55, y: height * 0.55, label: 'H' }  // –ë–µ–¥—Ä–æ
    ];
    
    ctx.fillStyle = 'rgba(255, 0, 0, 0.7)';
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';
    ctx.lineWidth = 2;
    
    markers.forEach(marker => {
      // –†–∏—Å—É–µ–º –∫—Ä—É–≥
      ctx.beginPath();
      ctx.arc(marker.x, marker.y, 8, 0, Math.PI * 2);
      ctx.fill();
      ctx.stroke();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
      ctx.fillStyle = 'white';
      ctx.font = 'bold 12px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(marker.label, marker.x, marker.y);
      ctx.fillStyle = 'rgba(255, 0, 0, 0.7)';
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
  }
};

const drawAnalysisGrid = (ctx: CanvasRenderingContext2D, width: number, height: number) => {
  ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';
  ctx.lineWidth = 1;

  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
  for (let x = 0; x < width; x += 50) {
    ctx.beginPath();
    ctx.moveTo(x, 0);
    ctx.lineTo(x, height);
    ctx.stroke();
  }

  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
  for (let y = 0; y < height; y += 50) {
    ctx.beginPath();
    ctx.moveTo(0, y);
    ctx.lineTo(width, y);
    ctx.stroke();
  }
};

const drawKeyPointsVisualization = (ctx: CanvasRenderingContext2D, width: number, height: number) => {
  const keyPoints = [
    { x: width * 0.5, y: height * 0.15, label: '–ì–æ–ª–æ–≤–∞' },
    { x: width * 0.4, y: height * 0.25, label: '–ü–ª–µ—á–æ' },
    { x: width * 0.6, y: height * 0.25, label: '–ü–ª–µ—á–æ' },
    { x: width * 0.5, y: height * 0.45, label: '–¢–∞–ª–∏—è' },
    { x: width * 0.45, y: height * 0.55, label: '–ë–µ–¥—Ä–æ' },
    { x: width * 0.55, y: height * 0.55, label: '–ë–µ–¥—Ä–æ' }
  ];

  ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';
  ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';
  ctx.lineWidth = 2;

  keyPoints.forEach(point => {
    // –†–∏—Å—É–µ–º —Ç–æ—á–∫—É
    ctx.beginPath();
    ctx.arc(point.x, point.y, 8, 0, Math.PI * 2);
    ctx.fill();
    ctx.stroke();
  });

  // –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–∫–∏ –ª–∏–Ω–∏—è–º–∏
  ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';
  ctx.beginPath();
  ctx.moveTo(keyPoints[0].x, keyPoints[0].y);
  ctx.lineTo(keyPoints[1].x, keyPoints[1].y);
  ctx.moveTo(keyPoints[0].x, keyPoints[0].y);
  ctx.lineTo(keyPoints[2].x, keyPoints[2].y);
  ctx.moveTo(keyPoints[1].x, keyPoints[1].y);
  ctx.lineTo(keyPoints[3].x, keyPoints[3].y);
  ctx.lineTo(keyPoints[2].x, keyPoints[2].y);
  ctx.moveTo(keyPoints[3].x, keyPoints[3].y);
  ctx.lineTo(keyPoints[4].x, keyPoints[4].y);
  ctx.moveTo(keyPoints[3].x, keyPoints[3].y);
  ctx.lineTo(keyPoints[5].x, keyPoints[5].y);
  ctx.stroke();
};

const drawAnalysisLabels = (ctx: CanvasRenderingContext2D, width: number, height: number) => {
  ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
  ctx.font = 'bold 16px Arial';
  ctx.fillText('AI Body Analysis', 10, 30);

  ctx.font = '14px Arial';
  ctx.fillText('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', 10, 50);
};
