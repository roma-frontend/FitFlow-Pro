// utils/bodyAnalysisDebug.ts
import { BodyAnalysisResult } from '@/types/bodyAnalysis';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
export function validateAnalysisData(data: any): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!data.userId) errors.push('userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  if (!data.bodyType) errors.push('bodyType –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (typeof data.estimatedBodyFat !== 'number' || data.estimatedBodyFat <= 0) {
    errors.push(`estimatedBodyFat –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${data.estimatedBodyFat}`);
  }
  
  if (typeof data.estimatedMuscleMass !== 'number' || data.estimatedMuscleMass <= 0) {
    errors.push(`estimatedMuscleMass –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${data.estimatedMuscleMass}`);
  }
  
  if (typeof data.fitnessScore !== 'number' || data.fitnessScore < 0 || data.fitnessScore > 100) {
    errors.push(`fitnessScore –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${data.fitnessScore}`);
  }
  
  if (typeof data.progressPotential !== 'number' || data.progressPotential < 0 || data.progressPotential > 100) {
    errors.push(`progressPotential –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${data.progressPotential}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
  if (!Array.isArray(data.problemAreas)) {
    errors.push('problemAreas –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  } else {
    data.problemAreas.forEach((area: any, index: number) => {
      if (!area.area || !area.severity || !area.recommendation) {
        errors.push(`problemAreas[${index}] –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω`);
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (!data.recommendations) {
    errors.push('recommendations –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    if (!data.recommendations.primaryGoal) errors.push('primaryGoal –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    if (!Array.isArray(data.recommendations.secondaryGoals)) errors.push('secondaryGoals –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    if (typeof data.recommendations.estimatedTimeToGoal !== 'number') {
      errors.push('estimatedTimeToGoal –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
    if (typeof data.recommendations.weeklyTrainingHours !== 'number') {
      errors.push('weeklyTrainingHours –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!data.currentVisualData) {
    errors.push('currentVisualData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    if (!data.currentVisualData.imageUrl && !data.currentVisualData.analyzedImageUrl) {
      warnings.push('–ù–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
  if (!data.futureProjections) {
    errors.push('futureProjections –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    ['weeks4', 'weeks8', 'weeks12'].forEach(period => {
      const projection = data.futureProjections[period];
      if (!projection) {
        errors.push(`futureProjections.${period} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      } else {
        if (typeof projection.estimatedWeight !== 'number') {
          errors.push(`futureProjections.${period}.estimatedWeight –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        }
        if (typeof projection.estimatedBodyFat !== 'number') {
          errors.push(`futureProjections.${period}.estimatedBodyFat –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        }
        if (typeof projection.estimatedMuscleMass !== 'number') {
          errors.push(`futureProjections.${period}.estimatedMuscleMass –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        }
        if (typeof projection.confidenceLevel !== 'number') {
          errors.push(`futureProjections.${period}.confidenceLevel –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        }
      }
    });
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
export function logAnalysisData(data: BodyAnalysisResult, stage: string) {
  console.group(`üîç Body Analysis Debug - ${stage}`);
  
  console.log('üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', {
    bodyType: data.bodyType,
    bodyFat: data.estimatedBodyFat,
    muscleMass: data.estimatedMuscleMass,
    fitnessScore: data.fitnessScore,
    progressPotential: data.progressPotential,
    posture: data.posture
  });

  console.log('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', data.recommendations);
  
  console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã:', data.problemAreas);
  
  console.log('üìà –ü—Ä–æ–≥–Ω–æ–∑—ã:', {
    '4 –Ω–µ–¥–µ–ª–∏': data.futureProjections?.weeks4,
    '8 –Ω–µ–¥–µ–ª—å': data.futureProjections?.weeks8,
    '12 –Ω–µ–¥–µ–ª—å': data.futureProjections?.weeks12
  });

  console.log('üìê –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞:', data.bodyMetrics);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validation = validateAnalysisData(data);
  if (!validation.isValid) {
    console.error('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation.errors);
  }
  if (validation.warnings.length > 0) {
    console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', validation.warnings);
  }

  console.groupEnd();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export function createMockAnalysisData(): BodyAnalysisResult {
  return {
    _id: 'mock_analysis_123' as any,
    userId: 'test_user',
    date: new Date(),
    bodyType: 'mesomorph',
    estimatedBodyFat: 18.5,
    estimatedMuscleMass: 38.2,
    posture: 'good',
    fitnessScore: 75,
    progressPotential: 85,
    problemAreas: [
      {
        area: '–∂–∏–≤–æ—Ç',
        severity: 'medium',
        recommendation: '–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—Ä–¥–∏–æ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º'
      }
    ],
    recommendations: {
      primaryGoal: '–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –¥–æ 15%',
      secondaryGoals: ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', '–£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏'],
      estimatedTimeToGoal: 12,
      weeklyTrainingHours: 5
    },
    currentVisualData: {
      imageUrl: '/test-image.jpg',
      analyzedImageUrl: '/test-analyzed.jpg',
      bodyOutlineData: {
        shoulders: { width: 48, height: 20 },
        chest: { width: 42, height: 35 },
        waist: { width: 38, height: 30 },
        hips: { width: 42, height: 35 },
        arms: { width: 15, height: 60 },
        legs: { width: 25, height: 80 }
      }
    },
    futureProjections: {
      weeks4: {
        estimatedWeight: 73.5,
        estimatedBodyFat: 16.5,
        estimatedMuscleMass: 38.8,
        confidenceLevel: 0.85
      },
      weeks8: {
        estimatedWeight: 71.8,
        estimatedBodyFat: 14.5,
        estimatedMuscleMass: 39.5,
        confidenceLevel: 0.75
      },
      weeks12: {
        estimatedWeight: 70.2,
        estimatedBodyFat: 12.5,
        estimatedMuscleMass: 40.2,
        confidenceLevel: 0.65
      }
    },
    bodyMetrics: {
      shoulderWidth: 48,
      waistWidth: 38,
      hipWidth: 42,
      bodyRatio: 0.72
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Convex
export function prepareDataForConvex(data: any): any {
  const prepared = { ...data };

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–∞ - —ç—Ç–æ —á–∏—Å–ª–∞ (–Ω–µ —Å—Ç—Ä–æ–∫–∏)
  const numericFields = [
    'estimatedBodyFat',
    'estimatedMuscleMass',
    'fitnessScore',
    'progressPotential'
  ];

  numericFields.forEach(field => {
    if (prepared[field] !== undefined) {
      prepared[field] = Number(prepared[field]);
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  if (prepared.recommendations) {
    prepared.recommendations.estimatedTimeToGoal = Number(prepared.recommendations.estimatedTimeToGoal);
    prepared.recommendations.weeklyTrainingHours = Number(prepared.recommendations.weeklyTrainingHours);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
  if (prepared.futureProjections) {
    ['weeks4', 'weeks8', 'weeks12'].forEach(period => {
      if (prepared.futureProjections[period]) {
        const projection = prepared.futureProjections[period];
        projection.estimatedWeight = Number(projection.estimatedWeight);
        projection.estimatedBodyFat = Number(projection.estimatedBodyFat);
        projection.estimatedMuscleMass = Number(projection.estimatedMuscleMass);
        projection.confidenceLevel = Number(projection.confidenceLevel);
      }
    });
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ª–∞
  if (prepared.bodyMetrics) {
    Object.keys(prepared.bodyMetrics).forEach(key => {
      prepared.bodyMetrics[key] = Number(prepared.bodyMetrics[key]);
    });
  }

  return prepared;
}