import { NextRequest, NextResponse } from "next/server";

// utils/vercelFix.ts
export class VercelStabilityUtils {
  // üîß –£–°–¢–û–ô–ß–ò–í–û–ï –ß–¢–ï–ù–ò–ï COOKIES –° –î–í–£–ú–Ø –ú–ï–¢–û–î–ê–ú–ò
  static getCookieValue(request: NextRequest, name: string): string | undefined {
    try {
      // –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
      const cookie = request.cookies.get(name)?.value;
      if (cookie) return cookie;

      // –ú–µ—Ç–æ–¥ 2: –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (fallback –¥–ª—è Edge Runtime)
      const cookieHeader = request.headers.get('cookie');
      if (cookieHeader) {
        const cookies = cookieHeader.split(';').reduce((acc, cookie) => {
          const [key, value] = cookie.trim().split('=');
          if (key && value) {
            try {
              acc[key] = decodeURIComponent(value);
            } catch {
              acc[key] = value;
            }
          }
          return acc;
        }, {} as Record<string, string>);

        return cookies[name];
      }

      return undefined;
    } catch (error) {
      console.error(`Error reading cookie ${name}:`, error);
      return undefined;
    }
  }

  // üö® –ó–ê–©–ò–¢–ê –û–¢ PREFETCH –ü–†–û–ë–õ–ï–ú
  static isPrefetchRequest(request: NextRequest): boolean {
    const purpose = request.headers.get('purpose');
    const prefetch = request.headers.get('next-router-prefetch');
    const userAgent = request.headers.get('user-agent');
    
    return !!(
      purpose === 'prefetch' || 
      prefetch || 
      userAgent?.includes('prefetch')
    );
  }

  // ‚è∞ –£–í–ï–õ–ò–ß–ï–ù–ù–û–ï –í–†–ï–ú–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø VERCEL
  static readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 1

  // üîí –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò –î–õ–Ø –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò
  static addStabilityHeaders(response: NextResponse): NextResponse {
    response.headers.set('X-Middleware-Cache', 'MISS');
    response.headers.set('Vary', 'Cookie, Authorization');
    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    
    if (process.env.NODE_ENV === 'production') {
      response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
    }
    
    return response;
  }
}
